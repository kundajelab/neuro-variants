{
    "workflowName": "atac",
    "workflowProcessingEvents": [
        {
            "description": "Finished",
            "cromwellVersion": "59",
            "cromwellId": "cromid-a307d4e",
            "timestamp": "2024-06-10T07:47:26.863Z"
        },
        {
            "cromwellVersion": "59",
            "description": "PickedUp",
            "timestamp": "2024-06-10T06:32:04.099Z",
            "cromwellId": "cromid-a307d4e"
        }
    ],
    "metadataSource": "Unarchived",
    "actualWorkflowLanguageVersion": "1.0",
    "submittedFiles": {
        "workflow": "version 1.0\n\nworkflow atac {\n    String pipeline_ver = 'v1.10.0'\n\n    meta {\n        version: 'v1.10.0'\n        author: 'Jin wook Lee (leepc12@gmail.com) at ENCODE-DCC'\n        description: 'ATAC-Seq/DNase-Seq pipeline'\n        specification_document: 'https://docs.google.com/document/d/1f0Cm4vRyDQDu0bMehHD7P7KOMxTOP-HiNoIvL1VcBt8/edit?usp=sharing'\n\n        caper_docker: 'encodedcc/atac-seq-pipeline:v1.10.0'\n        caper_singularity: 'docker://encodedcc/atac-seq-pipeline:v1.10.0'\n        croo_out_def: 'https://storage.googleapis.com/encode-pipeline-output-definition/atac.croo.v5.json'\n\n        parameter_group: {\n            pipeline_metadata: {\n                title: 'Pipeline metadata',\n                description: 'Metadata for a pipeline (e.g. title and description).'\n            },\n            reference_genome: {\n                title: 'Reference genome',\n                description: 'Genome specific files. e.g. reference FASTA, bowtie2 index, chromosome sizes file.',\n                help: 'Choose one atac.genome_tsv file that defines all genome specific parameters in it or define each genome specific parameter in input JSON to override those defined in genome TSV file. If you use Caper then use https://storage.googleapis.com/encode-pipeline-genome-data/genome_tsv/v1/[GENOME]_caper.tsv. Caper will automatically download/install all files defined in such TSV. Otherwise download genome TSV file by using a shell script (scripts/download_genome_data.sh [GENOME] [DEST_DIR]). Supported genomes are hg38, hg19, mm10 and mm9. See pipeline documentation if you want to build genome database from your own FASTA file. If some genome data are missing then analyses using such data will be skipped.'\n            },\n            input_genomic_data: {\n                title: 'Input genomic data',\n                description: 'Genomic input files for experiment.',\n                help: 'Pipeline can start with any types of experiment data (e.g. FASTQ, BAM, NODUP_BAM, TAG-ALIGN, PEAK). Choose one type and leave others empty. FASTQs have a variable for each biological replicate. e.g. atac.fastqs_rep1_R1 and atac.fastqs_rep2_R1. You can define up to 10 experiment replicates. For other types, there is an array to define file for each biological replicate. e.g. atac.bams: [\"rep1.bam\", \"rep1.bam\"]. Define sequential endedness with atac.paired_end, if you have mixed SE and PE replicates then define atac.paired_ends instead for each replicate. e.g. atac.paired_ends: [false, true].'\n            },\n            adapter_trimming: {\n                title: 'Adapter trimming',\n                description: 'Parameters for adapter trimming.',\n                help: 'Use atac.auto_detect_adapter to automatically detect/trim 3 adapters (Illumina: AGATCGGAAGAGC, Nextera: CTGTCTCTTATA, smallRNA: TGGAATTCTCGG) or manually define adapter sequence to be trimmed (atac.adapter or atac.adapters_repX_RY). Leave all parameters undefined/empty if your FASTQs are already trimmed.'\n            },\n            pipeline_parameter: {\n                title: 'Pipeline parameter',\n                description: 'Pipeline type and flags to turn on/off analyses.',\n                help: 'Pipeline can run as DNAse-seq mode. The only difference is TN5-shifting of read in ATAC-seq mode. Use atac.align_only to align FASTQs without peak calling.'\n            },\n            alignment: {\n                title: 'Alignment',\n                description: 'Parameters for alignment.',\n                help: 'Pipeline calculates mitochondrial fraction of reads in raw BAM. But after that it filters out mitochondrial reads (e.g. chrM, MT) from NODUP_BAMs (filtered/deduped). It is controlled by atac.filter_chrs array. If you want to keep mitochondrial reads then make this array empty.'\n            },\n            peak_calling: {\n                title: 'Peak calling',\n                description: 'Parameters for peak calling.',\n                help: 'This group includes statistical thresholds for peak-calling or post-peak-calling analyses: p-val, FDR, IDR.'\n            },\n            resource_parameter: {\n                title: 'Resource parameter',\n                description: 'Number of CPUs (threads), max. memory and walltime for tasks.',\n                help: 'Resource settings are used for determining an instance type on cloud backends (e.g. GCP, AWS) and used for submitting tasks to a cluster engine (e.g. SLURM, SGE, ...). Walltime (atac.*_time_hr) is only used for cluster engines. Other tasks default to use 1 CPU and 4GB of memory.'\n            }\n        }\n    }\n    input {\n        # group: pipeline_metadata\n        String title = 'Untitled'\n        String description = 'No description'\n\n        # group: reference_genome\n        File? genome_tsv\n        String? genome_name\n        File? ref_fa\n        File? ref_mito_fa\n        File? bowtie2_idx_tar\n        File? bowtie2_mito_idx_tar\n        File? chrsz\n        File? blacklist\n        File? blacklist2\n        String? mito_chr_name\n        String? regex_bfilt_peak_chr_name\n        String? gensz\n        File? tss\n        File? dnase\n        File? prom\n        File? enh\n        File? reg2map\n        File? reg2map_bed\n        File? roadmap_meta\n\n        # group: input_genomic_data\n        Boolean? paired_end\n        Array[Boolean] paired_ends = []\n        Array[File] fastqs_rep1_R1 = []\n        Array[File] fastqs_rep1_R2 = []\n        Array[File] fastqs_rep2_R1 = []\n        Array[File] fastqs_rep2_R2 = []\n        Array[File] fastqs_rep3_R1 = []\n        Array[File] fastqs_rep3_R2 = []\n        Array[File] fastqs_rep4_R1 = []\n        Array[File] fastqs_rep4_R2 = []\n        Array[File] fastqs_rep5_R1 = []\n        Array[File] fastqs_rep5_R2 = []\n        Array[File] fastqs_rep6_R1 = []\n        Array[File] fastqs_rep6_R2 = []\n        Array[File] fastqs_rep7_R1 = []\n        Array[File] fastqs_rep7_R2 = []\n        Array[File] fastqs_rep8_R1 = []\n        Array[File] fastqs_rep8_R2 = []\n        Array[File] fastqs_rep9_R1 = []\n        Array[File] fastqs_rep9_R2 = []\n        Array[File] fastqs_rep10_R1 = []\n        Array[File] fastqs_rep10_R2 = []\n        Array[File?] bams = []\n        Array[File?] nodup_bams = []\n        Array[File?] tas = []\n        Array[File?] peaks = []\n        Array[File?] peaks_pr1 = []\n        Array[File?] peaks_pr2 = []\n        File? peak_pooled\n        File? peak_ppr1\n        File? peak_ppr2\n\n        # group: pipeline_parameter\n        String pipeline_type = 'atac'\n        Boolean align_only = false\n        Boolean true_rep_only = false\n        Boolean enable_xcor = false\n        Boolean enable_count_signal_track = false\n        Boolean enable_idr = true\n        Boolean enable_preseq = false\n        Boolean enable_fraglen_stat = true\n        Boolean enable_tss_enrich = true\n        Boolean enable_annot_enrich = true\n        Boolean enable_jsd = true\n        Boolean enable_compare_to_roadmap = false\n        Boolean enable_gc_bias = true\n\n        # group: adapter_trimming\n        String cutadapt_param = '-e 0.1 -m 5'\n        Boolean auto_detect_adapter = false\n        String? adapter\n        Array[String] adapters_rep1_R1 = []\n        Array[String] adapters_rep1_R2 = []\n        Array[String] adapters_rep2_R1 = []\n        Array[String] adapters_rep2_R2 = []\n        Array[String] adapters_rep3_R1 = []\n        Array[String] adapters_rep3_R2 = []\n        Array[String] adapters_rep4_R1 = []\n        Array[String] adapters_rep4_R2 = []\n        Array[String] adapters_rep5_R1 = []\n        Array[String] adapters_rep5_R2 = []\n        Array[String] adapters_rep6_R1 = []\n        Array[String] adapters_rep6_R2 = []\n        Array[String] adapters_rep7_R1 = []\n        Array[String] adapters_rep7_R2 = []\n        Array[String] adapters_rep8_R1 = []\n        Array[String] adapters_rep8_R2 = []\n        Array[String] adapters_rep9_R1 = []\n        Array[String] adapters_rep9_R2 = []\n        Array[String] adapters_rep10_R1 = []\n        Array[String] adapters_rep10_R2 = []\n\n        # group: alignment\n        Int multimapping = 4\n        String dup_marker = 'picard'\n        Boolean no_dup_removal = false\n        Int mapq_thresh = 30\n        Array[String] filter_chrs = ['chrM', 'MT']\n        Int subsample_reads = 0\n        Int xcor_subsample_reads = 25000000\n        Array[Int?] read_len = []\n        Int pseudoreplication_random_seed = 0\n\n        # group: peak_calling\n        Int cap_num_peak = 300000\n        Float pval_thresh = 0.01\n        Int smooth_win = 150\n        Float idr_thresh = 0.05\n\n        # group: resource_parameter\n        Int align_cpu = 6\n        Float align_mem_factor = 0.15\n        Int align_time_hr = 48\n        Float align_disk_factor = 8.0\n\n        Int filter_cpu = 4\n        Float filter_mem_factor = 0.4\n        Int filter_time_hr = 24\n        Float filter_disk_factor = 8.0\n\n        Int bam2ta_cpu = 2\n        Float bam2ta_mem_factor = 0.3\n        Int bam2ta_time_hr = 12\n        Float bam2ta_disk_factor = 4.0\n\n        Float spr_mem_factor = 13.5\n        Float spr_disk_factor = 18.0\n\n        Int jsd_cpu = 4\n        Float jsd_mem_factor = 0.1\n        Int jsd_time_hr = 12\n        Float jsd_disk_factor = 2.0\n\n        Int xcor_cpu = 2\n        Float xcor_mem_factor = 1.0\n        Int xcor_time_hr = 6\n        Float xcor_disk_factor = 4.5\n\n        Int call_peak_cpu = 2\n        Float call_peak_mem_factor = 4.0\n        Int call_peak_time_hr = 24\n        Float call_peak_disk_factor = 30.0\n\n        Float macs2_signal_track_mem_factor = 12.0\n        Int macs2_signal_track_time_hr = 24\n        Float macs2_signal_track_disk_factor = 80.0\n\n        Float preseq_mem_factor = 0.5\n        Float preseq_disk_factor = 5.0\n\n        String? filter_picard_java_heap\n        String? preseq_picard_java_heap\n        String? fraglen_stat_picard_java_heap\n        String? gc_bias_picard_java_heap\n    }\n\n    parameter_meta {\n        title: {\n            description: 'Experiment title.',\n            group: 'pipeline_metadata',\n            example: 'ENCSR356KRQ (subsampled 1/400)'\n        }\n        description: {\n            description: 'Experiment description.',\n            group: 'pipeline_metadata',\n            example: 'ATAC-seq on primary keratinocytes in day 0.0 of differentiation (subsampled 1/400)'\n        }\n        genome_tsv: {\n            description: 'Reference genome database TSV.',\n            group: 'reference_genome',\n            help: 'This TSV files includes all genome specific parameters (e.g. reference FASTA, bowtie2 index). You can still invidiaully define any parameters in it. Parameters defined in input JSON will override those defined in genome TSV.',\n            example: 'https://storage.googleapis.com/encode-pipeline-genome-data/genome_tsv/v1/hg38_caper.tsv'\n        }\n        genome_name: {\n            description: 'Genome name.',\n            group: 'reference_genome'\n        }\n        ref_fa: {\n            description: 'Reference FASTA file.',\n            group: 'reference_genome'\n        }\n        ref_mito_fa: {\n            description: 'Reference FASTA file (mitochondrial reads only).',\n            group: 'reference_genome'\n        }\n        bowtie2_idx_tar: {\n            description: 'BWA index TAR file.',\n            group: 'reference_genome'\n        }\n        bowtie2_mito_idx_tar: {\n            description: 'BWA index TAR file (mitochondrial reads only).',\n            group: 'reference_genome'\n        }\n        chrsz: {\n            description: '2-col chromosome sizes file.',\n            group: 'reference_genome'\n        }\n        blacklist: {\n            description: 'Blacklist file in BED format.',\n            group: 'reference_genome',\n            help: 'Peaks will be filtered with this file.'\n        }\n        blacklist2: {\n            description: 'Secondary blacklist file in BED format.',\n            group: 'reference_genome',\n            help: 'If it is defined, it will be merged with atac.blacklist. Peaks will be filtered with merged blacklist.'\n        }\n        mito_chr_name: {\n            description: 'Mitochondrial chromosome name.',\n            group: 'reference_genome',\n            help: 'e.g. chrM, MT. Mitochondrial reads defined here will be filtered out during filtering BAMs in \"filter\" task.'\n        }\n        regex_bfilt_peak_chr_name: {\n            description: 'Reg-ex for chromosomes to keep while filtering peaks.',\n            group: 'reference_genome',\n            help: 'Chromosomes defined here will be kept. All other chromosomes will be filtered out in .bfilt. peak file. This is done along with blacklist filtering peak file.'\n        }\n        gensz: {\n            description: 'Genome sizes. \"hs\" for human, \"mm\" for mouse or sum of 2nd columnin chromosome sizes file.',\n            group: 'reference_genome'\n        }\n        tss: {\n            description: 'TSS file in BED format.',\n            group: 'reference_genome'\n        }\n        dnase: {\n            description: 'Open chromatin regions file in BED format.',\n            group: 'reference_genome'\n        }\n        prom: {\n            description: 'Promoter regions file in BED format.',\n            group: 'reference_genome'\n        }\n        enh: {\n            description: 'Enhancer regions file in BED format.',\n            group: 'reference_genome'\n        }\n        reg2map: {\n            description: 'Cell type signals file.',\n            group: 'reference_genome'\n        }\n        reg2map_bed: {\n            description: 'File of regions used to generate reg2map signals.',\n            group: 'reference_genome'\n        }\n        roadmap_meta: {\n            description: 'Roadmap metadata.',\n            group: 'reference_genome'\n        }\n        paired_end: {\n            description: 'Sequencing endedness.',\n            group: 'input_genomic_data',\n            help: 'Setting this on means that all replicates are paired ended. For mixed samples, use atac.paired_ends array instead.',\n            example: true\n        }\n        paired_ends: {\n            description: 'Sequencing endedness array (for mixed SE/PE datasets).',\n            group: 'input_genomic_data',\n            help: 'Whether each biological replicate is paired ended or not.'\n        }\n        fastqs_rep1_R1: {\n            description: 'Read1 FASTQs to be merged for a biological replicate 1.',\n            group: 'input_genomic_data',\n            help: 'Define if you want to start pipeline from FASTQ files. Pipeline can start from any type of inputs (e.g. FASTQs, BAMs, ...). Choose one type and fill paramters for that type and leave other undefined. Especially for FASTQs, we have individual variable for each biological replicate to allow FASTQs of technical replicates can be merged. Make sure that they are consistent with read2 FASTQs (atac.fastqs_rep1_R2). These FASTQs are usually technical replicates to be merged.',\n            example: [\n                \"https://storage.googleapis.com/encode-pipeline-test-samples/encode-atac-seq-pipeline/ENCSR356KRQ/fastq_subsampled/rep1/pair1/ENCFF341MYG.subsampled.400.fastq.gz\",\n                \"https://storage.googleapis.com/encode-pipeline-test-samples/encode-atac-seq-pipeline/ENCSR356KRQ/fastq_subsampled/rep1/pair1/ENCFF106QGY.subsampled.400.fastq.gz\"\n            ]\n        }\n        fastqs_rep1_R2: {\n            description: 'Read2 FASTQs to be merged for a biological replicate 1.',\n            group: 'input_genomic_data',\n            help: 'Make sure that they are consistent with read1 FASTQs (atac.fastqs_rep1_R1). These FASTQs are usually technical replicates to be merged.',\n            example: [\n                \"https://storage.googleapis.com/encode-pipeline-test-samples/encode-atac-seq-pipeline/ENCSR356KRQ/fastq_subsampled/rep1/pair2/ENCFF248EJF.subsampled.400.fastq.gz\",\n                \"https://storage.googleapis.com/encode-pipeline-test-samples/encode-atac-seq-pipeline/ENCSR356KRQ/fastq_subsampled/rep1/pair2/ENCFF368TYI.subsampled.400.fastq.gz\"\n            ]\n        }\n        fastqs_rep2_R1: {\n            description: 'Read1 FASTQs to be merged for a biological replicate 2.',\n            group: 'input_genomic_data',\n            help: 'Make sure that they are consistent with read2 FASTQs (atac.fastqs_rep2_R2). These FASTQs are usually technical replicates to be merged.',\n            example: [\n                \"https://storage.googleapis.com/encode-pipeline-test-samples/encode-atac-seq-pipeline/ENCSR356KRQ/fastq_subsampled/rep2/pair1/ENCFF641SFZ.subsampled.400.fastq.gz\",\n                \"https://storage.googleapis.com/encode-pipeline-test-samples/encode-atac-seq-pipeline/ENCSR356KRQ/fastq_subsampled/rep2/pair1/ENCFF751XTV.subsampled.400.fastq.gz\",\n                \"https://storage.googleapis.com/encode-pipeline-test-samples/encode-atac-seq-pipeline/ENCSR356KRQ/fastq_subsampled/rep2/pair1/ENCFF927LSG.subsampled.400.fastq.gz\",\n                \"https://storage.googleapis.com/encode-pipeline-test-samples/encode-atac-seq-pipeline/ENCSR356KRQ/fastq_subsampled/rep2/pair1/ENCFF859BDM.subsampled.400.fastq.gz\",\n                \"https://storage.googleapis.com/encode-pipeline-test-samples/encode-atac-seq-pipeline/ENCSR356KRQ/fastq_subsampled/rep2/pair1/ENCFF193RRC.subsampled.400.fastq.gz\",\n                \"https://storage.googleapis.com/encode-pipeline-test-samples/encode-atac-seq-pipeline/ENCSR356KRQ/fastq_subsampled/rep2/pair1/ENCFF366DFI.subsampled.400.fastq.gz\"\n            ]\n        }\n        fastqs_rep2_R2: {\n            description: 'Read2 FASTQs to be merged for a biological replicate 2.',\n            group: 'input_genomic_data',\n            help: 'Make sure that they are consistent with read1 FASTQs (atac.fastqs_rep2_R1). These FASTQs are usually technical replicates to be merged.',\n            example: [\n                \"https://storage.googleapis.com/encode-pipeline-test-samples/encode-atac-seq-pipeline/ENCSR356KRQ/fastq_subsampled/rep2/pair2/ENCFF031ARQ.subsampled.400.fastq.gz\",\n                \"https://storage.googleapis.com/encode-pipeline-test-samples/encode-atac-seq-pipeline/ENCSR356KRQ/fastq_subsampled/rep2/pair2/ENCFF590SYZ.subsampled.400.fastq.gz\",\n                \"https://storage.googleapis.com/encode-pipeline-test-samples/encode-atac-seq-pipeline/ENCSR356KRQ/fastq_subsampled/rep2/pair2/ENCFF734PEQ.subsampled.400.fastq.gz\",\n                \"https://storage.googleapis.com/encode-pipeline-test-samples/encode-atac-seq-pipeline/ENCSR356KRQ/fastq_subsampled/rep2/pair2/ENCFF007USV.subsampled.400.fastq.gz\",\n                \"https://storage.googleapis.com/encode-pipeline-test-samples/encode-atac-seq-pipeline/ENCSR356KRQ/fastq_subsampled/rep2/pair2/ENCFF886FSC.subsampled.400.fastq.gz\",\n                \"https://storage.googleapis.com/encode-pipeline-test-samples/encode-atac-seq-pipeline/ENCSR356KRQ/fastq_subsampled/rep2/pair2/ENCFF573UXK.subsampled.400.fastq.gz\"\n            ]\n        }\n        fastqs_rep3_R1: {\n            description: 'Read1 FASTQs to be merged for a biological replicate 3.',\n            group: 'input_genomic_data',\n            help: 'Make sure that they are consistent with read2 FASTQs (atac.fastqs_rep3_R2). These FASTQs are usually technical replicates to be merged.'\n        }\n        fastqs_rep3_R2: {\n            description: 'Read2 FASTQs to be merged for a biological replicate 3.',\n            group: 'input_genomic_data',\n            help: 'Make sure that they are consistent with read1 FASTQs (atac.fastqs_rep3_R1). These FASTQs are usually technical replicates to be merged.'\n        }\n        fastqs_rep4_R1: {\n            description: 'Read1 FASTQs to be merged for a biological replicate 4.',\n            group: 'input_genomic_data',\n            help: 'Make sure that they are consistent with read2 FASTQs (atac.fastqs_rep4_R2). These FASTQs are usually technical replicates to be merged.'\n        }\n        fastqs_rep4_R2: {\n            description: 'Read2 FASTQs to be merged for a biological replicate 4.',\n            group: 'input_genomic_data',\n            help: 'Make sure that they are consistent with read1 FASTQs (atac.fastqs_rep4_R1). These FASTQs are usually technical replicates to be merged.'\n        }\n        fastqs_rep5_R1: {\n            description: 'Read1 FASTQs to be merged for a biological replicate 5.',\n            group: 'input_genomic_data',\n            help: 'Make sure that they are consistent with read2 FASTQs (atac.fastqs_rep5_R2). These FASTQs are usually technical replicates to be merged.'\n        }\n        fastqs_rep5_R2: {\n            description: 'Read2 FASTQs to be merged for a biological replicate 5.',\n            group: 'input_genomic_data',\n            help: 'Make sure that they are consistent with read1 FASTQs (atac.fastqs_rep5_R1). These FASTQs are usually technical replicates to be merged.'\n        }\n        fastqs_rep6_R1: {\n            description: 'Read1 FASTQs to be merged for a biological replicate 6.',\n            group: 'input_genomic_data',\n            help: 'Make sure that they are consistent with read2 FASTQs (atac.fastqs_rep6_R2). These FASTQs are usually technical replicates to be merged.'\n        }\n        fastqs_rep6_R2: {\n            description: 'Read2 FASTQs to be merged for a biological replicate 6.',\n            group: 'input_genomic_data',\n            help: 'Make sure that they are consistent with read1 FASTQs (atac.fastqs_rep6_R1). These FASTQs are usually technical replicates to be merged.'\n        }\n        fastqs_rep7_R1: {\n            description: 'Read1 FASTQs to be merged for a biological replicate 7.',\n            group: 'input_genomic_data',\n            help: 'Make sure that they are consistent with read2 FASTQs (atac.fastqs_rep7_R2). These FASTQs are usually technical replicates to be merged.'\n        }\n        fastqs_rep7_R2: {\n            description: 'Read2 FASTQs to be merged for a biological replicate 7.',\n            group: 'input_genomic_data',\n            help: 'Make sure that they are consistent with read1 FASTQs (atac.fastqs_rep7_R1). These FASTQs are usually technical replicates to be merged.'\n        }\n        fastqs_rep8_R1: {\n            description: 'Read1 FASTQs to be merged for a biological replicate 8.',\n            group: 'input_genomic_data',\n            help: 'Make sure that they are consistent with read2 FASTQs (atac.fastqs_rep8_R2). These FASTQs are usually technical replicates to be merged.'\n        }\n        fastqs_rep8_R2: {\n            description: 'Read2 FASTQs to be merged for a biological replicate 8.',\n            group: 'input_genomic_data',\n            help: 'Make sure that they are consistent with read1 FASTQs (atac.fastqs_rep8_R1). These FASTQs are usually technical replicates to be merged.'\n        }\n        fastqs_rep9_R1: {\n            description: 'Read1 FASTQs to be merged for a biological replicate 9.',\n            group: 'input_genomic_data',\n            help: 'Make sure that they are consistent with read2 FASTQs (atac.fastqs_rep9_R2). These FASTQs are usually technical replicates to be merged.'\n        }\n        fastqs_rep9_R2: {\n            description: 'Read2 FASTQs to be merged for a biological replicate 9.',\n            group: 'input_genomic_data',\n            help: 'Make sure that they are consistent with read1 FASTQs (atac.fastqs_rep9_R1). These FASTQs are usually technical replicates to be merged.'\n        }\n        fastqs_rep10_R1: {\n            description: 'Read1 FASTQs to be merged for a biological replicate 10.',\n            group: 'input_genomic_data',\n            help: 'Make sure that they are consistent with read2 FASTQs (atac.fastqs_rep10_R2). These FASTQs are usually technical replicates to be merged.'\n        }\n        fastqs_rep10_R2: {\n            description: 'Read2 FASTQs to be merged for a biological replicate 10.',\n            group: 'input_genomic_data',\n            help: 'Make sure that they are consistent with read1 FASTQs (atac.fastqs_rep10_R1). These FASTQs are usually technical replicates to be merged.'\n        }\n        bams: {\n            description: 'List of unfiltered/raw BAM files for each biological replicate.',\n            group: 'input_genomic_data',\n            help: 'Define if you want to start pipeline from BAM files. Unfiltered/raw BAM file generated from aligner (e.g. bowtie2). Each entry for each biological replicate. e.g. [rep1.bam, rep2.bam, rep3.bam, ...].'\n        }\n        nodup_bams: {\n            description: 'List of filtered/deduped BAM files for each biological replicate',\n            group: 'input_genomic_data',\n            help: 'Define if you want to start pipeline from filtered BAM files. Filtered/deduped BAM file. Each entry for each biological replicate. e.g. [rep1.nodup.bam, rep2.nodup.bam, rep3.nodup.bam, ...].'\n        }\n        tas: {\n            description: 'List of TAG-ALIGN files for each biological replicate.',\n            group: 'input_genomic_data',\n            help: 'Define if you want to start pipeline from TAG-ALIGN files. TAG-ALIGN is in a 6-col BED format. It is a simplified version of BAM. Each entry for each biological replicate. e.g. [rep1.tagAlign.gz, rep2.tagAlign.gz, ...].'\n        }\n        peaks: {\n            description: 'List of NARROWPEAK files (not blacklist filtered) for each biological replicate.',\n            group: 'input_genomic_data',\n            help: 'Define if you want to start pipeline from PEAK files. Each entry for each biological replicate. e.g. [rep1.narrowPeak.gz, rep2.narrowPeak.gz, ...]. Define other PEAK parameters (e.g. atac.peaks_pr1, atac.peak_pooled) according to your flag settings (e.g. atac.true_rep_only) and number of replicates. If you have more than one replicate then define atac.peak_pooled, atac.peak_ppr1 and atac.peak_ppr2. If atac.true_rep_only flag is on then do not define any parameters (atac.peaks_pr1, atac.peaks_pr2, atac.peak_ppr1 and atac.peak_ppr2) related to pseudo replicates.'\n        }\n        peaks_pr1: {\n            description: 'List of NARROWPEAK files (not blacklist filtered) for pseudo-replicate 1 of each biological replicate.',\n            group: 'input_genomic_data',\n            help: 'Define if you want to start pipeline from PEAK files. Define if atac.true_rep_only flag is off.'\n        }\n        peaks_pr2: {\n            description: 'List of NARROWPEAK files (not blacklist filtered) for pseudo-replicate 2 of each biological replicate.',\n            group: 'input_genomic_data',\n            help: 'Define if you want to start pipeline from PEAK files. Define if atac.true_rep_only flag is off.'\n        }\n        peak_pooled: {\n            description: 'NARROWPEAK file for pooled true replicate.',\n            group: 'input_genomic_data',\n            help: 'Define if you want to start pipeline from PEAK files. Define if you have multiple biological replicates. Pooled true replicate means analysis on pooled biological replicates.'\n        }\n        peak_ppr1: {\n            description: 'NARROWPEAK file for pooled pseudo replicate 1.',\n            group: 'input_genomic_data',\n            help: 'Define if you want to start pipeline from PEAK files. Define if you have multiple biological replicates and atac.true_rep_only flag is off. PPR1 means analysis on pooled 1st pseudo replicates. Each biological replicate is shuf/split into two pseudos. This is a pooling of each replicate\\'s 1st pseudos.'\n        }\n        peak_ppr2: {\n            description: 'NARROWPEAK file for pooled pseudo replicate 2.',\n            group: 'input_genomic_data',\n            help: 'Define if you want to start pipeline from PEAK files. Define if you have multiple biological replicates and atac.true_rep_only flag is off. PPR1 means analysis on pooled 2nd pseudo replicates. Each biological replicate is shuf/split into two pseudos. This is a pooling of each replicate\\'s 2nd pseudos.'\n        }\n\n        pipeline_type: {\n            description: 'Pipeline type. atac for ATAC-Seq or dnase for DNase-Seq.',\n            group: 'pipeline_parameter',\n            help: 'The only difference of two types is that TN5 shifting of TAG-ALIGN is done for atac. TAG-ALIGN is in 6-col BED format. It is a simplified version of BAM.',\n            choices: ['atac', 'dnase'],\n            example: 'atac'\n        }\n        align_only: {\n            description: 'Align only mode.',\n            group: 'pipeline_parameter',\n            help: 'Reads will be aligned but there will be no peak-calling on them.'\n        }\n        true_rep_only: {\n            description: 'Disables all analyses related to pseudo-replicates.',\n            group: 'pipeline_parameter',\n            help: 'Pipeline generates 2 pseudo-replicate from one biological replicate. This flag turns off all analyses related to pseudos (with prefix/suffix pr, ppr).'\n        }\n        enable_xcor: {\n            description: 'Enables cross-correlation analysis.',\n            group: 'pipeline_parameter',\n            help: 'Generates cross-correlation plot.'\n        }\n        enable_count_signal_track: {\n            description: 'Enables generation of count signal tracks.',\n            group: 'pipeline_parameter'\n        }\n        enable_idr: {\n            description: 'Enables IDR on MACS2 NARROWPEAKs.',\n            group: 'pipeline_parameter'\n        }\n        enable_preseq: {\n            description: 'Enables preseq analysis.',\n            group: 'pipeline_parameter'\n        }\n        enable_fraglen_stat: {\n            description: 'Enables calculation of fragment length distribution/statistics.',\n            group: 'pipeline_parameter'\n        }\n        enable_tss_enrich: {\n            description: 'Enables TSS enrichment plot generation.',\n            group: 'pipeline_parameter'\n        }\n        enable_annot_enrich: {\n            description: 'Enables annotated regions enrichment analysis.',\n            group: 'pipeline_parameter'\n        }\n        enable_jsd: {\n            description: 'Enables Jensen-Shannon Distance (JSD) plot generation.',\n            group: 'pipeline_parameter'\n        }\n        enable_compare_to_roadmap: {\n            description: 'Enables comparison to Roadmap.',\n            group: 'pipeline_parameter'\n        }\n        enable_gc_bias: {\n            description: 'Enables GC bias calculation.',\n            group: 'pipeline_parameter'\n        }\n\n        cutadapt_param: {\n            description: 'Parameters for cutadapt.',\n            group: 'adapter_trimming',\n            help: 'It is -e 0.1 -m 5 by default (err_rate=0.1, min_trim_len=5). You can define any parameters that cutadapt supports.'\n        }\n        auto_detect_adapter: {\n            description: 'Auto-detect/trim adapter sequences.',\n            group: 'adapter_trimming',\n            help: 'Can detect/trim three types of adapter sequences. Illumina: AGATCGGAAGAGC, Nextera: CTGTCTCTTATA, smallRNA: TGGAATTCTCGG.',\n            example: true\n        }\n        adapter: {\n            description: 'Adapter for all FASTQs.',\n            group: 'adapter_trimming',\n            help: 'Define if all FASTQs have the same adapter sequence. Otherwise define adapter sequence for individual FASTQ in atac.adapters_repX_R1 and atac.adapters_repX_R2 instead. Use atac.auto_detect_adapter if you want to detect adapters automatically. If all of your FASTQs are already trimmed then leave all adapter-related parameters undefined/empty.'\n        }\n        adapters_rep1_R1: {\n            description: 'Adapter sequences for read1 FASTQs to be merged for a biological replicate 1.',\n            group: 'adapter_trimming',\n            help: 'Make sure that they are consistent with read2 FASTQs (atac.adapters_rep1_R2). You can combine this with atac.auto_detect_adapter. Pipeline will auto-detect/trim adapter sequences for null entry in this list. e.g. [\"AAGGCCTT\", null, \"AAGGCCTT\"].'\n        }\n        adapters_rep1_R2: {\n            description: 'Adapter sequences for read2 FASTQs to be merged for a biological replicate 1.',\n            group: 'adapter_trimming',\n            help: 'Make sure that they are consistent with read1 FASTQs (atac.adapters_rep1_R1).'\n        }\n        adapters_rep2_R1: {\n            description: 'Adapter sequences for read1 FASTQs to be merged for a biological replicate 2.',\n            group: 'adapter_trimming',\n            help: 'Make sure that they are consistent with read2 FASTQs (atac.adapters_rep2_R2).'\n        }\n        adapters_rep2_R2: {\n            description: 'Adapter sequences for read2 FASTQs to be merged for a biological replicate 2.',\n            group: 'adapter_trimming',\n            help: 'Make sure that they are consistent with read1 FASTQs (atac.adapters_rep2_R1).'\n        }\n        adapters_rep3_R1: {\n            description: 'Adapter sequences for read1 FASTQs to be merged for a biological replicate 3.',\n            group: 'adapter_trimming',\n            help: 'Make sure that they are consistent with read2 FASTQs (atac.adapters_rep3_R2).'\n        }\n        adapters_rep3_R2: {\n            description: 'Adapter sequences for read2 FASTQs to be merged for a biological replicate 3.',\n            group: 'adapter_trimming',\n            help: 'Make sure that they are consistent with read1 FASTQs (atac.adapters_rep3_R1).'\n        }\n        adapters_rep4_R1: {\n            description: 'Adapter sequences for read1 FASTQs to be merged for a biological replicate 4.',\n            group: 'adapter_trimming',\n            help: 'Make sure that they are consistent with read2 FASTQs (atac.adapters_rep4_R2).'\n        }\n        adapters_rep4_R2: {\n            description: 'Adapter sequences for read2 FASTQs to be merged for a biological replicate 4.',\n            group: 'adapter_trimming',\n            help: 'Make sure that they are consistent with read1 FASTQs (atac.adapters_rep4_R1).'\n        }\n        adapters_rep5_R1: {\n            description: 'Adapter sequences for read1 FASTQs to be merged for a biological replicate 5.',\n            group: 'adapter_trimming',\n            help: 'Make sure that they are consistent with read2 FASTQs (atac.adapters_rep5_R2).'\n        }\n        adapters_rep5_R2: {\n            description: 'Adapter sequences for read2 FASTQs to be merged for a biological replicate 5.',\n            group: 'adapter_trimming',\n            help: 'Make sure that they are consistent with read1 FASTQs (atac.adapters_rep5_R1).'\n        }\n        adapters_rep6_R1: {\n            description: 'Adapter sequences for read1 FASTQs to be merged for a biological replicate 6.',\n            group: 'adapter_trimming',\n            help: 'Make sure that they are consistent with read2 FASTQs (atac.adapters_rep6_R2).'\n        }\n        adapters_rep6_R2: {\n            description: 'Adapter sequences for read2 FASTQs to be merged for a biological replicate 6.',\n            group: 'adapter_trimming',\n            help: 'Make sure that they are consistent with read1 FASTQs (atac.adapters_rep6_R1).'\n        }\n        adapters_rep7_R1: {\n            description: 'Adapter sequences for read1 FASTQs to be merged for a biological replicate 7.',\n            group: 'adapter_trimming',\n            help: 'Make sure that they are consistent with read2 FASTQs (atac.adapters_rep7_R2).'\n        }\n        adapters_rep7_R2: {\n            description: 'Adapter sequences for read2 FASTQs to be merged for a biological replicate 7.',\n            group: 'adapter_trimming',\n            help: 'Make sure that they are consistent with read1 FASTQs (atac.adapters_rep7_R1).'\n        }\n        adapters_rep8_R1: {\n            description: 'Adapter sequences for read1 FASTQs to be merged for a biological replicate 8.',\n            group: 'adapter_trimming',\n            help: 'Make sure that they are consistent with read2 FASTQs (atac.adapters_rep8_R2).'\n        }\n        adapters_rep8_R2: {\n            description: 'Adapter sequences for read2 FASTQs to be merged for a biological replicate 8.',\n            group: 'adapter_trimming',\n            help: 'Make sure that they are consistent with read1 FASTQs (atac.adapters_rep8_R1).'\n        }\n        adapters_rep9_R1: {\n            description: 'Adapter sequences for read1 FASTQs to be merged for a biological replicate 9.',\n            group: 'adapter_trimming',\n            help: 'Make sure that they are consistent with read2 FASTQs (atac.adapters_rep9_R2).'\n        }\n        adapters_rep9_R2: {\n            description: 'Adapter sequences for read2 FASTQs to be merged for a biological replicate 9.',\n            group: 'adapter_trimming',\n            help: 'Make sure that they are consistent with read1 FASTQs (atac.adapters_rep9_R1).'\n        }\n        adapters_rep10_R1: {\n            description: 'Adapter sequences for read1 FASTQs to be merged for a biological replicate 10.',\n            group: 'adapter_trimming',\n            help: 'Make sure that they are consistent with read2 FASTQs (atac.adapters_rep10_R2).'\n        }\n        adapters_rep10_R2: {\n            description: 'Adapter sequences for read2 FASTQs to be merged for a biological replicate 10.',\n            group: 'adapter_trimming',\n            help: 'Make sure that they are consistent with read1 FASTQs (atac.adapters_rep10_R1).'\n        }\n\n        multimapping: {\n            description: 'Number of multimappers.',\n            group: 'alignment',\n            help: 'It is 4 by default. Set it to 0 if your sample does not have multimappers.'\n        }\n        dup_marker: {\n            description: 'Marker for duplicate reads. picard or sambamba.',\n            group: 'alignment',\n            help: 'picard for Picard MarkDuplicates or sambamba for sambamba markdup.'\n        }\n        no_dup_removal: {\n            description: 'Disable removal of duplicate reads during filtering BAM.',\n            group: 'alignment',\n            help: 'Duplicate reads are filtererd out during filtering BAMs to gerenate NODUP_BAM. This flag will keep all duplicate reads in NODUP_BAM. This flag does not affect naming of NODUP_BAM. NODUP_BAM will still have .nodup. suffix in its filename.'\n        }\n        mapq_thresh: {\n            description: 'Threshold for low MAPQ reads removal.',\n            group: 'alignment',\n            help: 'Low MAPQ reads are filtered out while filtering BAM.'\n        }\n        filter_chrs: {\n            description: 'List of chromosomes to be filtered out while filtering BAM.',\n            group: 'alignment',\n            help: 'It is [\"chrM\", \"MT\"] by default. Therefore, mitochondrial reads will be filtered out while filtering. Make it empty if you want to keep all reads.'\n        }\n        subsample_reads: {\n            description: 'Subsample reads. Shuffle and subsample reads.',\n            group: 'alignment',\n            help: 'This affects all downstream analyses after filtering BAM. (e.g. all TAG-ALIGN files, peak-calling). Reads will be shuffled only if actual number of reads in BAM exceeds this number.  0 means disabled.'\n        }\n        xcor_subsample_reads: {\n            description: 'Subsample reads for cross-corrlelation analysis only.',\n            group: 'alignment',\n            help: 'This does not affect downstream analyses after filtering BAM. It is for cross-correlation analysis only. 0 means disabled.'\n        }\n        read_len: {\n            description: 'Read length per biological replicate.',\n            group: 'alignment',\n            help: 'Pipeline can estimate read length from FASTQs. If you start pipeline from other types (BAM, NODUP_BAM, TA, ...) than FASTQ. Then provide this for some analyses that require read length (e.g. TSS enrichment plot).'\n        }\n        pseudoreplication_random_seed: {\n            description: 'Random seed (positive integer) used for pseudo-replication (shuffling reads in TAG-ALIGN and then split it into two).',\n            group: 'alignment',\n            help: 'Pseudo-replication (task spr) is done by using GNU \"shuf --random-source=sha256(random_seed)\". If this parameter == 0, then pipeline uses input TAG-ALIGN file\\'s size (in bytes) for the random_seed.'\n        }\n        cap_num_peak: {\n            description: 'Upper limit on the number of peaks.',\n            group: 'peak_calling',\n            help: 'Called peaks will be sorted in descending order of score and the number of peaks will be capped at this number by taking first N peaks.'\n        }\n        pval_thresh: {\n            description: 'p-value Threshold for MACS2 peak caller.',\n            group: 'peak_calling',\n            help: 'macs2 callpeak -p'\n        }\n        smooth_win: {\n            description: 'Size of smoothing windows for MACS2 peak caller.',\n            group: 'peak_calling',\n            help: 'This will be used for both generating MACS2 peaks/signal tracks.'\n        }\n        idr_thresh: {\n            description: 'IDR threshold.',\n            group: 'peak_calling'\n        }\n        align_cpu: {\n            description: 'Number of cores for task align.',\n            group: 'resource_parameter',\n            help: 'Task align merges/crops/maps FASTQs.'\n        }\n        align_mem_factor: {\n            description: 'Multiplication factor to determine memory required for task align.',\n            group: 'resource_parameter',\n            help: 'This factor will be multiplied to the size of FASTQs to determine required memory of instance (GCP/AWS) or job (HPCs).'\n        }\n        align_time_hr: {\n            description: 'Walltime (h) required for task align.',\n            group: 'resource_parameter',\n            help: 'This is for HPCs only. e.g. SLURM, SGE, ...'\n        }\n        align_disk_factor: {\n            description: 'Multiplication factor to determine persistent disk size for task align.',\n            group: 'resource_parameter',\n            help: 'This factor will be multiplied to the size of FASTQs to determine required disk size of instance on GCP/AWS.'\n        }\n        filter_cpu: {\n            description: 'Number of cores for task filter.',\n            group: 'resource_parameter',\n            help: 'Task filter filters raw/unfilterd BAM to get filtered/deduped BAM.'\n        }\n        filter_mem_factor: {\n            description: 'Multiplication factor to determine memory required for task filter.',\n            group: 'resource_parameter',\n            help: 'This factor will be multiplied to the size of BAMs to determine required memory of instance (GCP/AWS) or job (HPCs).'\n        }\n        filter_time_hr: {\n            description: 'Walltime (h) required for task filter.',\n            group: 'resource_parameter',\n            help: 'This is for HPCs only. e.g. SLURM, SGE, ...'\n        }\n        filter_disk_factor: {\n            description: 'Multiplication factor to determine persistent disk size for task filter.',\n            group: 'resource_parameter',\n            help: 'This factor will be multiplied to the size of BAMs to determine required disk size of instance on GCP/AWS.'\n        }\n        bam2ta_cpu: {\n            description: 'Number of cores for task bam2ta.',\n            group: 'resource_parameter',\n            help: 'Task bam2ta converts filtered/deduped BAM in to TAG-ALIGN (6-col BED) format.'\n        }\n        bam2ta_mem_factor: {\n            description: 'Multiplication factor to determine memory required for task bam2ta.',\n            group: 'resource_parameter',\n            help: 'This factor will be multiplied to the size of filtered BAMs to determine required memory of instance (GCP/AWS) or job (HPCs).'\n        }\n        bam2ta_time_hr: {\n            description: 'Walltime (h) required for task bam2ta.',\n            group: 'resource_parameter',\n            help: 'This is for HPCs only. e.g. SLURM, SGE, ...'\n        }\n        bam2ta_disk_factor: {\n            description: 'Multiplication factor to determine persistent disk size for task bam2ta.',\n            group: 'resource_parameter',\n            help: 'This factor will be multiplied to the size of filtered BAMs to determine required disk size of instance on GCP/AWS.'\n        }\n        spr_mem_factor: {\n            description: 'Multiplication factor to determine memory required for task spr.',\n            group: 'resource_parameter',\n            help: 'This factor will be multiplied to the size of filtered BAMs to determine required memory of instance (GCP/AWS) or job (HPCs).'\n        }\n        spr_disk_factor: {\n            description: 'Multiplication factor to determine persistent disk size for task spr.',\n            group: 'resource_parameter',\n            help: 'This factor will be multiplied to the size of filtered BAMs to determine required disk size of instance on GCP/AWS.'\n        }\n        jsd_cpu: {\n            description: 'Number of cores for task jsd.',\n            group: 'resource_parameter',\n            help: 'Task jsd plots Jensen-Shannon distance and metrics related to it.'\n        }\n        jsd_mem_factor: {\n            description: 'Multiplication factor to determine memory required for task jsd.',\n            group: 'resource_parameter',\n            help: 'This factor will be multiplied to the size of filtered BAMs to determine required memory of instance (GCP/AWS) or job (HPCs).'\n        }\n        jsd_time_hr: {\n            description: 'Walltime (h) required for task jsd.',\n            group: 'resource_parameter',\n            help: 'This is for HPCs only. e.g. SLURM, SGE, ...'\n        }\n        jsd_disk_factor: {\n            description: 'Multiplication factor to determine persistent disk size for task jsd.',\n            group: 'resource_parameter',\n            help: 'This factor will be multiplied to the size of filtered BAMs to determine required disk size of instance on GCP/AWS.'\n        }\n        xcor_cpu: {\n            description: 'Number of cores for task xcor.',\n            group: 'resource_parameter',\n            help: 'Task xcor does cross-correlation analysis (including a plot) on subsampled TAG-ALIGNs.'\n        }\n        xcor_mem_factor: {\n            description: 'Multiplication factor to determine memory required for task xcor.',\n            group: 'resource_parameter',\n            help: 'This factor will be multiplied to the size of TAG-ALIGNs (BEDs) to determine required memory of instance (GCP/AWS) or job (HPCs).'\n        }\n        xcor_time_hr: {\n            description: 'Walltime (h) required for task xcor.',\n            group: 'resource_parameter',\n            help: 'This is for HPCs only. e.g. SLURM, SGE, ...'\n        }\n        xcor_disk_factor: {\n            description: 'Multiplication factor to determine persistent disk size for task xcor.',\n            group: 'resource_parameter',\n            help: 'This factor will be multiplied to the size of TAG-ALIGNs (BEDs) to determine required disk size of instance on GCP/AWS.'\n        }\n        call_peak_cpu: {\n            description: 'Number of cores for task call_peak. MACS2 is single-thread. No more than 2 is required.',\n            group: 'resource_parameter',\n            help: 'Task call_peak call peaks on TAG-ALIGNs by using MACS2 peak caller.'\n        }\n        call_peak_mem_factor: {\n            description: 'Multiplication factor to determine memory required for task call_peak.',\n            group: 'resource_parameter',\n            help: 'This factor will be multiplied to the size of TAG-ALIGNs (BEDs) to determine required memory of instance (GCP/AWS) or job (HPCs).'\n        }\n        call_peak_time_hr: {\n            description: 'Walltime (h) required for task call_peak.',\n            group: 'resource_parameter',\n            help: 'This is for HPCs only. e.g. SLURM, SGE, ...'\n        }\n        call_peak_disk_factor: {\n            description: 'Multiplication factor to determine persistent disk size for task call_peak.',\n            group: 'resource_parameter',\n            help: 'This factor will be multiplied to the size of TAG-ALIGNs (BEDs) to determine required disk size of instance on GCP/AWS.'\n        }\n        macs2_signal_track_mem_factor: {\n            description: 'Multiplication factor to determine memory required for task macs2_signal_track.',\n            group: 'resource_parameter',\n            help: 'This factor will be multiplied to the size of TAG-ALIGNs (BEDs) to determine required memory of instance (GCP/AWS) or job (HPCs).'\n        }\n        macs2_signal_track_time_hr: {\n            description: 'Walltime (h) required for task macs2_signal_track.',\n            group: 'resource_parameter',\n            help: 'This is for HPCs only. e.g. SLURM, SGE, ...'\n        }\n        macs2_signal_track_disk_factor: {\n            description: 'Multiplication factor to determine persistent disk size for task macs2_signal_track.',\n            group: 'resource_parameter',\n            help: 'This factor will be multiplied to the size of TAG-ALIGNs (BEDs) to determine required disk size of instance on GCP/AWS.'\n        }\n        preseq_mem_factor: {\n            description: 'Multiplication factor to determine memory required for task preseq.',\n            group: 'resource_parameter',\n            help: 'This factor will be multiplied to the size of BAMs to determine required memory of instance (GCP/AWS) or job (HPCs).'\n        }\n        preseq_disk_factor: {\n            description: 'Multiplication factor to determine persistent disk size for task preseq.',\n            group: 'resource_parameter',\n            help: 'This factor will be multiplied to the size of BAMs to determine required disk size of instance on GCP/AWS.'\n        }\n        filter_picard_java_heap: {\n            description: 'Maximum Java heap (java -Xmx) in task filter.',\n            group: 'resource_parameter',\n            help: 'Maximum memory for Picard tools MarkDuplicates. If not defined, 90% of filter task\\'s memory will be used.'\n        }\n        preseq_picard_java_heap: {\n            description: 'Maximum Java heap (java -Xmx) in task preseq.',\n            group: 'resource_parameter',\n            help: 'Maximum memory for Picard tools EstimateLibraryComplexity. If not defined, 90% of preseq task\\'s memory will be used.'\n        }\n        fraglen_stat_picard_java_heap: {\n            description: 'Maximum Java heap (java -Xmx) in task fraglen_stat_pe (for paired end replicate only).',\n            group: 'resource_parameter',\n            help: 'Maximum memory for Picard tools CollectInsertSizeMetrics. If not defined, 90% of fraglen_stat tasks\\'s memory will be used.'\n        }\n        gc_bias_picard_java_heap: {\n            description: 'Maximum Java heap (java -Xmx) in task gc_bias.',\n            group: 'resource_parameter',\n            help: 'Maximum memory for Picard tools CollectGcBiasMetrics. If not defined, 90% of gc_bias tasks\\'s memory will be used.'\n        }\n    }\n\n    String aligner = 'bowtie2'\n    String peak_caller = 'macs2'\n    String peak_type = 'narrowPeak'\n    \n    # read genome data and paths\n    if ( defined(genome_tsv) ) {\n        call read_genome_tsv { input: genome_tsv = genome_tsv }\n    }\n    File ref_fa_ = select_first([ref_fa, read_genome_tsv.ref_fa])\n    File bowtie2_idx_tar_ = select_first([bowtie2_idx_tar, read_genome_tsv.bowtie2_idx_tar])\n    File bowtie2_mito_idx_tar_ = select_first([bowtie2_mito_idx_tar, read_genome_tsv.bowtie2_mito_idx_tar])\n    File chrsz_ = select_first([chrsz, read_genome_tsv.chrsz])\n    String gensz_ = select_first([gensz, read_genome_tsv.gensz])\n    File? blacklist1_ = if defined(blacklist) then blacklist\n        else read_genome_tsv.blacklist\n    File? blacklist2_ = if defined(blacklist2) then blacklist2\n        else read_genome_tsv.blacklist2        \n    # merge multiple blacklists\n    # two blacklists can have different number of columns (3 vs 6)\n    # so we limit merged blacklist's columns to 3\n    Array[File] blacklists = select_all([blacklist1_, blacklist2_])\n    if ( length(blacklists) > 1 ) {\n        call pool_ta as pool_blacklist { input:\n            tas = blacklists,\n            col = 3,\n        }\n    }\n    File? blacklist_ = if length(blacklists) > 1 then pool_blacklist.ta_pooled\n        else if length(blacklists) > 0 then blacklists[0]\n        else blacklist2_\n    String mito_chr_name_ = select_first([mito_chr_name, read_genome_tsv.mito_chr_name])\n    String regex_bfilt_peak_chr_name_ = select_first([regex_bfilt_peak_chr_name, read_genome_tsv.regex_bfilt_peak_chr_name])\n    String genome_name_ = select_first([genome_name, read_genome_tsv.genome_name, basename(chrsz_)])\n\n    # read additional annotation data\n    File? tss_ = if defined(tss) then tss\n        else read_genome_tsv.tss\n    File? dnase_ = if defined(dnase) then dnase\n        else read_genome_tsv.dnase\n    File? prom_ = if defined(prom) then prom\n        else read_genome_tsv.prom\n    File? enh_ = if defined(enh) then enh\n        else read_genome_tsv.enh\n    File? reg2map_ = if defined(reg2map) then reg2map\n        else read_genome_tsv.reg2map\n    File? reg2map_bed_ = if defined(reg2map_bed) then reg2map_bed\n        else read_genome_tsv.reg2map_bed\n    File? roadmap_meta_ = if defined(roadmap_meta) then roadmap_meta\n        else read_genome_tsv.roadmap_meta\n\n    ### temp vars (do not define these)\n    String aligner_ = aligner\n    String peak_caller_ = peak_caller\n    String peak_type_ = peak_type\n    String idr_rank_ = if peak_caller_=='spp' then 'signal.value'\n                        else if peak_caller_=='macs2' then 'p.value'\n                        else 'p.value'\n    Int cap_num_peak_ = cap_num_peak\n    Int mapq_thresh_ = mapq_thresh\n\n    # temporary 2-dim fastqs array [rep_id][merge_id]\n    Array[Array[File]] fastqs_R1 = \n        if length(fastqs_rep10_R1)>0 then\n            [fastqs_rep1_R1, fastqs_rep2_R1, fastqs_rep3_R1, fastqs_rep4_R1, fastqs_rep5_R1,\n            fastqs_rep6_R1, fastqs_rep7_R1, fastqs_rep8_R1, fastqs_rep9_R1, fastqs_rep10_R1]\n        else if length(fastqs_rep9_R1)>0 then\n            [fastqs_rep1_R1, fastqs_rep2_R1, fastqs_rep3_R1, fastqs_rep4_R1, fastqs_rep5_R1,\n            fastqs_rep6_R1, fastqs_rep7_R1, fastqs_rep8_R1, fastqs_rep9_R1]\n        else if length(fastqs_rep8_R1)>0 then\n            [fastqs_rep1_R1, fastqs_rep2_R1, fastqs_rep3_R1, fastqs_rep4_R1, fastqs_rep5_R1,\n            fastqs_rep6_R1, fastqs_rep7_R1, fastqs_rep8_R1]\n        else if length(fastqs_rep7_R1)>0 then\n            [fastqs_rep1_R1, fastqs_rep2_R1, fastqs_rep3_R1, fastqs_rep4_R1, fastqs_rep5_R1,\n            fastqs_rep6_R1, fastqs_rep7_R1]\n        else if length(fastqs_rep6_R1)>0 then\n            [fastqs_rep1_R1, fastqs_rep2_R1, fastqs_rep3_R1, fastqs_rep4_R1, fastqs_rep5_R1,\n            fastqs_rep6_R1]\n        else if length(fastqs_rep5_R1)>0 then\n            [fastqs_rep1_R1, fastqs_rep2_R1, fastqs_rep3_R1, fastqs_rep4_R1, fastqs_rep5_R1]\n        else if length(fastqs_rep4_R1)>0 then\n            [fastqs_rep1_R1, fastqs_rep2_R1, fastqs_rep3_R1, fastqs_rep4_R1]\n        else if length(fastqs_rep3_R1)>0 then\n            [fastqs_rep1_R1, fastqs_rep2_R1, fastqs_rep3_R1]\n        else if length(fastqs_rep2_R1)>0 then\n            [fastqs_rep1_R1, fastqs_rep2_R1]\n        else if length(fastqs_rep1_R1)>0 then\n            [fastqs_rep1_R1]\n        else []\n    # no need to do that for R2 (R1 array will be used to determine presense of fastq for each rep)\n    Array[Array[File]] fastqs_R2 = \n        [fastqs_rep1_R2, fastqs_rep2_R2, fastqs_rep3_R2, fastqs_rep4_R2, fastqs_rep5_R2,\n        fastqs_rep6_R2, fastqs_rep7_R2, fastqs_rep8_R2, fastqs_rep9_R2, fastqs_rep10_R2]\n\n    # temporary 2-dim adapters array [rep_id][merge_id]\n    Array[Array[String]] adapters_R1 = \n        [adapters_rep1_R1, adapters_rep2_R1, adapters_rep3_R1, adapters_rep4_R1, adapters_rep5_R1,\n        adapters_rep6_R1, adapters_rep7_R1, adapters_rep8_R1, adapters_rep9_R1, adapters_rep10_R1]\n    Array[Array[String]] adapters_R2 = \n        [adapters_rep1_R2, adapters_rep2_R2, adapters_rep3_R2, adapters_rep4_R2, adapters_rep5_R2,\n        adapters_rep6_R2, adapters_rep7_R2, adapters_rep8_R2, adapters_rep9_R2, adapters_rep10_R2]\n\n    # temporary variables to get number of replicates\n    #       WDLic implementation of max(A,B,C,...)\n    Int num_rep_fastq = length(fastqs_R1)\n    Int num_rep_bam = if length(bams)<num_rep_fastq then num_rep_fastq\n        else length(bams)\n    Int num_rep_nodup_bam = if length(nodup_bams)<num_rep_bam then num_rep_bam\n        else length(nodup_bams)\n    Int num_rep_ta = if length(tas)<num_rep_nodup_bam then num_rep_nodup_bam\n        else length(tas)\n    Int num_rep_peak = if length(peaks)<num_rep_ta then num_rep_ta\n        else length(peaks)\n    Int num_rep = num_rep_peak\n\n    # sanity check for inputs\n    if ( num_rep == 0 ) {\n        call raise_exception as error_input_data  { input:\n            msg = 'No FASTQ/BAM/TAG-ALIGN/PEAK defined in your input JSON. Check if your FASTQs are defined as \"atac.fastqs_repX_RY\". DO NOT MISS suffix _R1 even for single ended FASTQ.'\n        }\n    }\n\n    # align each replicate\n    scatter(i in range(num_rep)) {\n        # to override endedness definition for individual replicate\n        #     paired_end will override paired_ends[i]\n        Boolean paired_end_ = if !defined(paired_end) && i<length(paired_ends) then paired_ends[i]\n            else select_first([paired_end])\n\n        Boolean has_input_of_align = i<length(fastqs_R1) && length(fastqs_R1[i])>0\n        Boolean has_output_of_align = i<length(bams) && defined(bams[i])\n        if ( has_input_of_align && !has_output_of_align ) {\n            call align { input :\n                fastqs_R1 = fastqs_R1[i],\n                fastqs_R2 = fastqs_R2[i],\n                adapter = adapter,\n                adapters_R1 = adapters_R1[i],\n                adapters_R2 = adapters_R2[i],\n                paired_end = paired_end_,\n                auto_detect_adapter = auto_detect_adapter,\n                cutadapt_param = cutadapt_param,\n\n                aligner = aligner_,\n                mito_chr_name = mito_chr_name_,\n                chrsz = chrsz_,\n                multimapping = multimapping,\n                idx_tar = bowtie2_idx_tar_,\n                # resource\n                cpu = align_cpu,\n                mem_factor = align_mem_factor,\n                time_hr = align_time_hr,\n                disk_factor = align_disk_factor,\n            }\n        }\n        File? bam_ = if has_output_of_align then bams[i] else align.bam\n\n        # mito only mapping to get frac mito qc\n        Boolean has_input_of_align_mito = has_input_of_align &&\n            defined(bowtie2_mito_idx_tar_)\n        if ( has_input_of_align_mito ) {\n            call align as align_mito { input :\n                fastqs_R1 = fastqs_R1[i],\n                fastqs_R2 = fastqs_R2[i],\n                adapter = adapter,\n                adapters_R1 = adapters_R1[i],\n                adapters_R2 = adapters_R2[i],\n                paired_end = paired_end_,\n                auto_detect_adapter = auto_detect_adapter,\n                cutadapt_param = cutadapt_param,\n\n                aligner = aligner_,\n                mito_chr_name = mito_chr_name_,\n                chrsz = chrsz_,\n                multimapping = multimapping,\n                idx_tar = bowtie2_mito_idx_tar_,\n                # resource\n                cpu = align_cpu,\n                mem_factor = align_mem_factor,\n                time_hr = align_time_hr,\n                disk_factor = align_disk_factor,\n            }\n        }\n\n        if ( defined(align.non_mito_samstat_qc) && defined(align_mito.samstat_qc) ) {\n            call frac_mito { input:\n                non_mito_samstat = align.non_mito_samstat_qc,\n                mito_samstat = align_mito.samstat_qc,\n            }\n        }\n\n        Boolean has_input_of_filter = has_output_of_align || defined(align.bam)\n        Boolean has_output_of_filter = i<length(nodup_bams) && defined(nodup_bams[i])\n        # skip if we already have output of this step\n        if ( has_input_of_filter && !has_output_of_filter ) {\n            call filter { input :\n                bam = bam_,\n                paired_end = paired_end_,\n                dup_marker = dup_marker,\n                mapq_thresh = mapq_thresh_,\n                filter_chrs = filter_chrs,\n                chrsz = chrsz_,\n                no_dup_removal = no_dup_removal,\n                multimapping = multimapping,\n                mito_chr_name = mito_chr_name_,\n\n                cpu = filter_cpu,\n                mem_factor = filter_mem_factor,\n                picard_java_heap = filter_picard_java_heap,\n                time_hr = filter_time_hr,\n                disk_factor = filter_disk_factor,\n            }\n        }\n        File? nodup_bam_ = if has_output_of_filter then nodup_bams[i] else filter.nodup_bam\n\n        Boolean has_input_of_bam2ta = has_output_of_filter || defined(filter.nodup_bam)\n        Boolean has_output_of_bam2ta = i<length(tas) && defined(tas[i])\n        if ( has_input_of_bam2ta && !has_output_of_bam2ta ) {\n            call bam2ta { input :\n                bam = nodup_bam_,\n                disable_tn5_shift = if pipeline_type=='atac' then false else true,\n                subsample = subsample_reads,\n                paired_end = paired_end_,\n                mito_chr_name = mito_chr_name_,\n\n                cpu = bam2ta_cpu,\n                mem_factor = bam2ta_mem_factor,\n                time_hr = bam2ta_time_hr,\n                disk_factor = bam2ta_disk_factor,\n            }\n        }\n        File? ta_ = if has_output_of_bam2ta then tas[i] else bam2ta.ta\n\n        Boolean has_input_of_xcor = has_output_of_align || defined(align.bam)\n        if ( has_input_of_xcor && enable_xcor ) {\n            call filter as filter_no_dedup { input :\n                bam = bam_,\n                paired_end = paired_end_,\n                dup_marker = dup_marker,\n                mapq_thresh = mapq_thresh_,\n                filter_chrs = filter_chrs,\n                chrsz = chrsz_,\n                no_dup_removal = true,\n                multimapping = multimapping,\n                mito_chr_name = mito_chr_name_,\n\n                cpu = filter_cpu,\n                mem_factor = filter_mem_factor,\n                picard_java_heap = filter_picard_java_heap,\n                time_hr = filter_time_hr,\n                disk_factor = filter_disk_factor,\n            }\n            call bam2ta as bam2ta_no_dedup { input :\n                bam = filter_no_dedup.nodup_bam,  # output name is nodup but it's not deduped\n                disable_tn5_shift = if pipeline_type=='atac' then false else true,\n                subsample = 0,\n                paired_end = paired_end_,\n                mito_chr_name = mito_chr_name_,\n\n                cpu = bam2ta_cpu,\n                mem_factor = bam2ta_mem_factor,\n                time_hr = bam2ta_time_hr,\n                disk_factor = bam2ta_disk_factor,\n            }\n            # subsample tagalign (non-mito) and cross-correlation analysis\n            call xcor { input :\n                ta = bam2ta_no_dedup.ta,\n                subsample = xcor_subsample_reads,\n                paired_end = paired_end_,\n                mito_chr_name = mito_chr_name_,\n\n                cpu = xcor_cpu,\n                mem_factor = xcor_mem_factor,\n                time_hr = xcor_time_hr,\n                disk_factor = xcor_disk_factor,\n            }\n        }\n\n        Boolean has_input_of_macs2_signal_track = has_output_of_bam2ta || defined(bam2ta.ta)\n        if ( has_input_of_macs2_signal_track ) {\n            # generate count signal track\n            call macs2_signal_track { input :\n                ta = ta_,\n                gensz = gensz_,\n                chrsz = chrsz_,\n                pval_thresh = pval_thresh,\n                smooth_win = smooth_win,\n\n                mem_factor = macs2_signal_track_mem_factor,\n                disk_factor = macs2_signal_track_disk_factor,\n                time_hr = macs2_signal_track_time_hr,\n            }\n        }\n\n        Boolean has_input_of_call_peak = has_output_of_bam2ta || defined(bam2ta.ta)\n        Boolean has_output_of_call_peak = i<length(peaks) && defined(peaks[i])\n        if ( has_input_of_call_peak && !has_output_of_call_peak && !align_only ) {\n            # call peaks on tagalign\n            call call_peak { input :\n                peak_caller = peak_caller_,\n                peak_type = peak_type_,\n                ta = ta_,\n                gensz = gensz_,\n                chrsz = chrsz_,\n                cap_num_peak = cap_num_peak_,\n                pval_thresh = pval_thresh,\n                smooth_win = smooth_win,\n                blacklist = blacklist_,\n                regex_bfilt_peak_chr_name = regex_bfilt_peak_chr_name_,\n\n                cpu = call_peak_cpu,\n                mem_factor = call_peak_mem_factor,\n                disk_factor = call_peak_disk_factor,\n                time_hr = call_peak_time_hr,\n            }\n        }\n        File? peak_ = if has_output_of_call_peak then peaks[i] else call_peak.peak\n\n        Boolean has_input_of_spr = has_output_of_bam2ta || defined(bam2ta.ta)\n        if ( has_input_of_spr && !align_only && !true_rep_only ) {\n            call spr { input :\n                ta = ta_,\n                paired_end = paired_end_,\n                pseudoreplication_random_seed = pseudoreplication_random_seed,\n                mem_factor = spr_mem_factor,\n                disk_factor = spr_disk_factor,\n            }\n        }\n\n        Boolean has_input_of_call_peak_pr1 = defined(spr.ta_pr1)\n        Boolean has_output_of_call_peak_pr1 = i<length(peaks_pr1) && defined(peaks_pr1[i])\n        if ( has_input_of_call_peak_pr1 && !has_output_of_call_peak_pr1 &&\n            !align_only && !true_rep_only ) {\n            # call peaks on 1st pseudo replicated tagalign \n            call call_peak as call_peak_pr1 { input :\n                peak_caller = peak_caller_,\n                peak_type = peak_type_,\n                ta = spr.ta_pr1,\n                gensz = gensz_,\n                chrsz = chrsz_,\n                cap_num_peak = cap_num_peak_,\n                pval_thresh = pval_thresh,\n                smooth_win = smooth_win,\n                blacklist = blacklist_,\n                regex_bfilt_peak_chr_name = regex_bfilt_peak_chr_name_,\n\n                cpu = call_peak_cpu,\n                mem_factor = call_peak_mem_factor,\n                disk_factor = call_peak_disk_factor,\n                time_hr = call_peak_time_hr,\n            }\n        }\n        File? peak_pr1_ = if has_output_of_call_peak_pr1 then peaks_pr1[i]\n            else call_peak_pr1.peak\n\n        Boolean has_input_of_call_peak_pr2 = defined(spr.ta_pr2)\n        Boolean has_output_of_call_peak_pr2 = i<length(peaks_pr2) && defined(peaks_pr2[i])\n        if ( has_input_of_call_peak_pr2 && !has_output_of_call_peak_pr2 &&\n            !align_only && !true_rep_only ) {\n            # call peaks on 2nd pseudo replicated tagalign \n            call call_peak as call_peak_pr2 { input :\n                peak_caller = peak_caller_,\n                peak_type = peak_type_,\n                ta = spr.ta_pr2,\n                gensz = gensz_,\n                chrsz = chrsz_,\n                cap_num_peak = cap_num_peak_,\n                pval_thresh = pval_thresh,\n                smooth_win = smooth_win,\n                blacklist = blacklist_,\n                regex_bfilt_peak_chr_name = regex_bfilt_peak_chr_name_,\n\n                cpu = call_peak_cpu,\n                mem_factor = call_peak_mem_factor,\n                disk_factor = call_peak_disk_factor,\n                time_hr = call_peak_time_hr,\n            }\n        }\n        File? peak_pr2_ = if has_output_of_call_peak_pr2 then peaks_pr2[i]\n            else call_peak_pr2.peak\n\n        Boolean has_input_of_count_signal_track = has_output_of_bam2ta || defined(bam2ta.ta)\n        if ( has_input_of_count_signal_track && enable_count_signal_track ) {\n            # generate count signal track\n            call count_signal_track { input :\n                ta = ta_,\n                chrsz = chrsz_,\n            }\n        }\n        # tasks factored out from ATAqC\n        Boolean has_input_of_tss_enrich = defined(nodup_bam_) && defined(tss_) && (\n            defined(align.read_len) || i<length(read_len) && defined(read_len[i]) )\n        if ( enable_tss_enrich && has_input_of_tss_enrich ) {\n            call tss_enrich { input :\n                read_len = if i<length(read_len) && defined(read_len[i]) then read_len[i]\n                    else align.read_len,\n                nodup_bam = nodup_bam_,\n                tss = tss_,\n                chrsz = chrsz_,\n            }\n        }\n        if ( enable_fraglen_stat && paired_end_ && defined(nodup_bam_) ) {\n            call fraglen_stat_pe { input :\n                nodup_bam = nodup_bam_,\n                picard_java_heap = fraglen_stat_picard_java_heap,\n            }\n        }\n        if ( enable_preseq && defined(bam_) ) {\n            call preseq { input :\n                bam = bam_,\n                paired_end = paired_end_,\n                mem_factor = preseq_mem_factor,\n                disk_factor = preseq_disk_factor,\n                picard_java_heap = preseq_picard_java_heap,\n            }\n        }\n        if ( enable_gc_bias && defined(nodup_bam_) && defined(ref_fa_) ) {\n            call gc_bias { input :\n                nodup_bam = nodup_bam_,\n                ref_fa = ref_fa_,\n                picard_java_heap = gc_bias_picard_java_heap,\n            }\n        }\n        if ( enable_annot_enrich && defined(ta_) && defined(blacklist_) && defined(dnase_) && defined(prom_) && defined(enh_) ) {\n            call annot_enrich { input :\n                ta = ta_,\n                blacklist = blacklist_,\n                dnase = dnase_,\n                prom = prom_,\n                enh = enh_,\n            }\n        }\n        if ( enable_compare_to_roadmap && defined(macs2_signal_track.pval_bw) &&\n             defined(reg2map_) && defined(roadmap_meta_) &&\n             ( defined(reg2map_bed_) || defined(dnase_) ) ) {\n            call compare_signal_to_roadmap { input :\n                pval_bw = macs2_signal_track.pval_bw,\n                dnase = dnase_,\n                reg2map_bed = reg2map_bed_,\n                reg2map = reg2map_,\n                roadmap_meta = roadmap_meta_,\n            }\n        }\n    }\n\n    # if there are TAs for ALL replicates then pool them\n    Boolean has_all_inputs_of_pool_ta = length(select_all(ta_))==num_rep\n    if ( has_all_inputs_of_pool_ta && num_rep>1 ) {\n        # pool tagaligns from true replicates\n        call pool_ta { input :\n            tas = ta_,\n            prefix = 'rep',\n        }\n    }\n\n    # if there are pr1 TAs for ALL replicates then pool them\n    Boolean has_all_inputs_of_pool_ta_pr1 = length(select_all(spr.ta_pr1))==num_rep\n    if ( has_all_inputs_of_pool_ta_pr1 && num_rep>1 && !align_only && !true_rep_only ) {\n        # pool tagaligns from pseudo replicate 1\n        call pool_ta as pool_ta_pr1 { input :\n            tas = spr.ta_pr1,\n            prefix = 'rep-pr1',\n        }\n    }\n\n    # if there are pr2 TAs for ALL replicates then pool them\n    Boolean has_all_inputs_of_pool_ta_pr2 = length(select_all(spr.ta_pr2))==num_rep\n    if ( has_all_inputs_of_pool_ta_pr1 && num_rep>1 && !align_only && !true_rep_only ) {\n        # pool tagaligns from pseudo replicate 2\n        call pool_ta as pool_ta_pr2 { input :\n            tas = spr.ta_pr2,\n            prefix = 'rep-pr2',\n        }\n    }\n\n    Boolean has_input_of_call_peak_pooled = defined(pool_ta.ta_pooled)\n    Boolean has_output_of_call_peak_pooled = defined(peak_pooled)\n    if ( has_input_of_call_peak_pooled && !has_output_of_call_peak_pooled &&\n        !align_only && num_rep>1 ) {\n        # call peaks on pooled replicate\n        call call_peak as call_peak_pooled { input :\n            peak_caller = peak_caller_,\n            peak_type = peak_type_,\n            ta = pool_ta.ta_pooled,\n            gensz = gensz_,\n            chrsz = chrsz_,\n            cap_num_peak = cap_num_peak_,\n            pval_thresh = pval_thresh,\n            smooth_win = smooth_win,\n            blacklist = blacklist_,\n            regex_bfilt_peak_chr_name = regex_bfilt_peak_chr_name_,\n\n            cpu = call_peak_cpu,\n            mem_factor = call_peak_mem_factor,\n            disk_factor = call_peak_disk_factor,\n            time_hr = call_peak_time_hr,\n        }\n    }\n    File? peak_pooled_ = if has_output_of_call_peak_pooled then peak_pooled\n        else call_peak_pooled.peak\n\n    Boolean has_input_of_count_signal_track_pooled = defined(pool_ta.ta_pooled)\n    if ( has_input_of_count_signal_track_pooled && enable_count_signal_track && num_rep>1 ) {\n        call count_signal_track as count_signal_track_pooled { input :\n            ta = pool_ta.ta_pooled,\n            chrsz = chrsz_,\n        }\n    }\n\n    Boolean has_input_of_macs2_signal_track_pooled = defined(pool_ta.ta_pooled)\n    if ( has_input_of_macs2_signal_track_pooled && num_rep>1 ) {\n        call macs2_signal_track as macs2_signal_track_pooled { input :\n            ta = pool_ta.ta_pooled,\n            gensz = gensz_,\n            chrsz = chrsz_,\n            pval_thresh = pval_thresh,\n            smooth_win = smooth_win,\n\n            mem_factor = macs2_signal_track_mem_factor,\n            disk_factor = macs2_signal_track_disk_factor,\n            time_hr = macs2_signal_track_time_hr,\n        }\n    }\n\n    Boolean has_input_of_jsd = defined(blacklist_) &&\n        length(select_all(nodup_bam_))==num_rep\n    if ( has_input_of_jsd && num_rep > 0 && enable_jsd ) {\n        # fingerprint and JS-distance plot\n        call jsd { input :\n            nodup_bams = nodup_bam_,\n            blacklist = blacklist_,\n            mapq_thresh = mapq_thresh_,\n\n            cpu = jsd_cpu,\n            mem_factor = jsd_mem_factor,\n            time_hr = jsd_time_hr,\n            disk_factor = jsd_disk_factor,\n        }\n    }\n\n    Boolean has_input_of_call_peak_ppr1 = defined(pool_ta_pr1.ta_pooled)\n    Boolean has_output_of_call_peak_ppr1 = defined(peak_ppr1)\n    if ( has_input_of_call_peak_ppr1 && !has_output_of_call_peak_ppr1 &&\n        !align_only && !true_rep_only && num_rep>1 ) {\n        # call peaks on 1st pooled pseudo replicates\n        call call_peak as call_peak_ppr1 { input :\n            peak_caller = peak_caller_,\n            peak_type = peak_type_,\n            ta = pool_ta_pr1.ta_pooled,\n            gensz = gensz_,\n            chrsz = chrsz_,\n            cap_num_peak = cap_num_peak_,\n            pval_thresh = pval_thresh,\n            smooth_win = smooth_win,\n            blacklist = blacklist_,\n            regex_bfilt_peak_chr_name = regex_bfilt_peak_chr_name_,\n\n            cpu = call_peak_cpu,\n            mem_factor = call_peak_mem_factor,\n            disk_factor = call_peak_disk_factor,\n            time_hr = call_peak_time_hr,\n        }\n    }\n    File? peak_ppr1_ = if has_output_of_call_peak_ppr1 then peak_ppr1\n        else call_peak_ppr1.peak\n\n    Boolean has_input_of_call_peak_ppr2 = defined(pool_ta_pr2.ta_pooled)\n    Boolean has_output_of_call_peak_ppr2 = defined(peak_ppr2)\n    if ( has_input_of_call_peak_ppr2 && !has_output_of_call_peak_ppr2 &&\n        !align_only && !true_rep_only && num_rep>1 ) {\n        # call peaks on 2nd pooled pseudo replicates\n        call call_peak as call_peak_ppr2 { input :\n            peak_caller = peak_caller_,\n            peak_type = peak_type_,\n            ta = pool_ta_pr2.ta_pooled,\n            gensz = gensz_,\n            chrsz = chrsz_,\n            cap_num_peak = cap_num_peak_,\n            pval_thresh = pval_thresh,\n            smooth_win = smooth_win,\n            blacklist = blacklist_,\n            regex_bfilt_peak_chr_name = regex_bfilt_peak_chr_name_,\n\n            cpu = call_peak_cpu,\n            mem_factor = call_peak_mem_factor,\n            disk_factor = call_peak_disk_factor,\n            time_hr = call_peak_time_hr,\n        }\n    }\n    File? peak_ppr2_ = if has_output_of_call_peak_ppr2 then peak_ppr2\n        else call_peak_ppr2.peak\n\n    # do IDR/overlap on all pairs of two replicates (i,j)\n    #    where i and j are zero-based indices and 0 <= i < j < num_rep\n    scatter( pair in cross(range(num_rep),range(num_rep)) ) {\n        File? peak1_ = peak_[pair.left]\n        File? peak2_ = peak_[pair.right]\n        if ( !align_only && pair.left<pair.right ) {\n            # pair.left = 0-based index of 1st replicate\n            # pair.right = 0-based index of 2nd replicate\n            # Naive overlap on every pair of true replicates\n            call overlap { input :\n                prefix = 'rep'+(pair.left+1)+'_vs_rep'+(pair.right+1),\n                peak1 = peak1_,\n                peak2 = peak2_,\n                peak_pooled = peak_pooled_,\n                peak_type = peak_type_,\n                blacklist = blacklist_,\n                chrsz = chrsz_,\n                regex_bfilt_peak_chr_name = regex_bfilt_peak_chr_name_,\n                ta = pool_ta.ta_pooled,\n            }\n        }\n        if ( enable_idr && !align_only && pair.left<pair.right ) {\n            # pair.left = 0-based index of 1st replicate\n            # pair.right = 0-based index of 2nd replicate\n            # IDR on every pair of true replicates\n            call idr { input :\n                prefix = 'rep'+(pair.left+1)+'_vs_rep'+(pair.right+1),\n                peak1 = peak1_,\n                peak2 = peak2_,\n                peak_pooled = peak_pooled_,\n                idr_thresh = idr_thresh,\n                peak_type = peak_type_,\n                rank = idr_rank_,\n                blacklist = blacklist_,\n                chrsz = chrsz_,\n                regex_bfilt_peak_chr_name = regex_bfilt_peak_chr_name_,\n                ta = pool_ta.ta_pooled,\n            }\n        }\n    }\n\n    # overlap on pseudo-replicates (pr1, pr2) for each true replicate\n    if ( !align_only && !true_rep_only ) {\n        scatter( i in range(num_rep) ) {\n            call overlap as overlap_pr { input :\n                prefix = 'rep'+(i+1)+'-pr1_vs_rep'+(i+1)+'-pr2',\n                peak1 = peak_pr1_[i],\n                peak2 = peak_pr2_[i],\n                peak_pooled = peak_[i],\n                peak_type = peak_type_,\n                blacklist = blacklist_,\n                chrsz = chrsz_,\n                regex_bfilt_peak_chr_name = regex_bfilt_peak_chr_name_,\n                ta = ta_[i],\n            }\n        }\n    }\n\n    if ( !align_only && !true_rep_only && enable_idr ) {\n        scatter( i in range(num_rep) ) {\n            # IDR on pseduo replicates\n            call idr as idr_pr { input :\n                prefix = 'rep'+(i+1)+'-pr1_vs_rep'+(i+1)+'-pr2',\n                peak1 = peak_pr1_[i],\n                peak2 = peak_pr2_[i],\n                peak_pooled = peak_[i],\n                idr_thresh = idr_thresh,\n                peak_type = peak_type_,\n                rank = idr_rank_,\n                blacklist = blacklist_,\n                chrsz = chrsz_,\n                regex_bfilt_peak_chr_name = regex_bfilt_peak_chr_name_,\n                ta = ta_[i],\n            }\n        }\n    }\n\n    if ( !align_only && !true_rep_only && num_rep>1 ) {\n        # Naive overlap on pooled pseudo replicates\n        call overlap as overlap_ppr { input :\n            prefix = 'pooled-pr1_vs_pooled-pr2',\n            peak1 = peak_ppr1_,\n            peak2 = peak_ppr2_,\n            peak_pooled = peak_pooled_,\n            peak_type = peak_type_,\n            blacklist = blacklist_,\n            chrsz = chrsz_,\n            regex_bfilt_peak_chr_name = regex_bfilt_peak_chr_name_,\n            ta = pool_ta.ta_pooled,\n        }\n    }\n\n    if ( !align_only && !true_rep_only && num_rep>1 ) {\n        # IDR on pooled pseduo replicates\n        call idr as idr_ppr { input :\n            prefix = 'pooled-pr1_vs_pooled-pr2',\n            peak1 = peak_ppr1_,\n            peak2 = peak_ppr2_,\n            peak_pooled = peak_pooled_,\n            idr_thresh = idr_thresh,\n            peak_type = peak_type_,\n            rank = idr_rank_,\n            blacklist = blacklist_,\n            chrsz = chrsz_,\n            regex_bfilt_peak_chr_name = regex_bfilt_peak_chr_name_,\n            ta = pool_ta.ta_pooled,\n        }\n    }\n\n    # reproducibility QC for overlap/IDR peaks\n    if ( !align_only && !true_rep_only && num_rep > 0 ) {\n        # reproducibility QC for overlapping peaks\n        call reproducibility as reproducibility_overlap { input :\n            prefix = 'overlap',\n            peaks = select_all(overlap.bfilt_overlap_peak),\n            peaks_pr = overlap_pr.bfilt_overlap_peak,\n            peak_ppr = overlap_ppr.bfilt_overlap_peak,\n            peak_type = peak_type_,\n            chrsz = chrsz_,\n        }\n    }\n\n    if ( !align_only && !true_rep_only && num_rep > 0 && enable_idr ) {\n        # reproducibility QC for IDR peaks\n        call reproducibility as reproducibility_idr { input :\n            prefix = 'idr',\n            peaks = select_all(idr.bfilt_idr_peak),\n            peaks_pr = idr_pr.bfilt_idr_peak,\n            peak_ppr = idr_ppr.bfilt_idr_peak,\n            peak_type = peak_type_,\n            chrsz = chrsz_,\n        }\n    }\n\n    # Generate final QC report and JSON\n    call qc_report { input :\n        pipeline_ver = pipeline_ver,\n        title = title,\n        description = description,\n        genome = genome_name_,\n        multimapping = multimapping,\n        paired_ends = paired_end_,\n        pipeline_type = pipeline_type,\n        aligner = aligner_,\n        peak_caller = peak_caller_,\n        cap_num_peak = cap_num_peak_,\n        idr_thresh = idr_thresh,\n        pval_thresh = pval_thresh,\n        xcor_subsample_reads = xcor_subsample_reads,\n\n        samstat_qcs = select_all(align.samstat_qc),\n        nodup_samstat_qcs = select_all(filter.samstat_qc),\n\n        frac_mito_qcs = select_all(frac_mito.frac_mito_qc),\n        dup_qcs = select_all(filter.dup_qc),\n        lib_complexity_qcs = select_all(filter.lib_complexity_qc),\n        xcor_plots = select_all(xcor.plot_png),\n        xcor_scores = select_all(xcor.score),\n\n        jsd_plot = jsd.plot,\n        jsd_qcs = jsd.jsd_qcs,\n\n        frip_qcs = select_all(call_peak.frip_qc),\n        frip_qcs_pr1 = select_all(call_peak_pr1.frip_qc),\n        frip_qcs_pr2 = select_all(call_peak_pr2.frip_qc),\n\n        frip_qc_pooled = call_peak_pooled.frip_qc,\n        frip_qc_ppr1 = call_peak_ppr1.frip_qc,\n        frip_qc_ppr2 = call_peak_ppr2.frip_qc,\n\n        idr_plots = select_all(idr.idr_plot),\n        idr_plots_pr = idr_pr.idr_plot,\n        idr_plot_ppr = idr_ppr.idr_plot,\n        frip_idr_qcs = select_all(idr.frip_qc),\n        frip_idr_qcs_pr = idr_pr.frip_qc,\n        frip_idr_qc_ppr = idr_ppr.frip_qc,\n        frip_overlap_qcs = select_all(overlap.frip_qc),\n        frip_overlap_qcs_pr = overlap_pr.frip_qc,\n        frip_overlap_qc_ppr = overlap_ppr.frip_qc,\n        idr_reproducibility_qc = reproducibility_idr.reproducibility_qc,\n        overlap_reproducibility_qc = reproducibility_overlap.reproducibility_qc,\n\n        annot_enrich_qcs = select_all(annot_enrich.annot_enrich_qc),\n        tss_enrich_qcs = select_all(tss_enrich.tss_enrich_qc),\n        tss_large_plots = select_all(tss_enrich.tss_large_plot),\n        roadmap_compare_plots = select_all(compare_signal_to_roadmap.roadmap_compare_plot),\n        fraglen_dist_plots = select_all(fraglen_stat_pe.fraglen_dist_plot),\n        fraglen_nucleosomal_qcs = select_all(fraglen_stat_pe.nucleosomal_qc),\n        gc_plots = select_all(gc_bias.gc_plot),\n        preseq_plots = select_all(preseq.preseq_plot),\n        picard_est_lib_size_qcs = select_all(preseq.picard_est_lib_size_qc),\n\n        peak_region_size_qcs = select_all(call_peak.peak_region_size_qc),\n        peak_region_size_plots = select_all(call_peak.peak_region_size_plot),\n        num_peak_qcs = select_all(call_peak.num_peak_qc),\n\n        idr_opt_peak_region_size_qc = reproducibility_idr.peak_region_size_qc,\n        idr_opt_peak_region_size_plot = reproducibility_overlap.peak_region_size_plot,\n        idr_opt_num_peak_qc = reproducibility_idr.num_peak_qc,\n\n        overlap_opt_peak_region_size_qc = reproducibility_overlap.peak_region_size_qc,\n        overlap_opt_peak_region_size_plot = reproducibility_overlap.peak_region_size_plot,\n        overlap_opt_num_peak_qc = reproducibility_overlap.num_peak_qc,\n    }\n\n    output {\n        File report = qc_report.report\n        File qc_json = qc_report.qc_json\n        Boolean qc_json_ref_match = qc_report.qc_json_ref_match\n    }\n}\n\ntask align {\n    input {\n        # for task trim_adapter\n        Array[File] fastqs_R1         # [merge_id]\n        Array[File] fastqs_R2\n\n        String? adapter     # adapter for all fastqs,\n                            #    this will override individual adapters in adapters_R1/R2\n        Array[String] adapters_R1\n        Array[String] adapters_R2\n        Boolean paired_end\n        Boolean auto_detect_adapter\n        String cutadapt_param\n\n        # for task align\n        String aligner\n        String mito_chr_name\n        File chrsz            # 2-col chromosome sizes file\n        File idx_tar        # reference index tar or tar.gz\n        Int multimapping\n\n        # resource\n        Int cpu\n        Float mem_factor\n        Int time_hr\n        Float disk_factor\n    }\n    Float input_file_size_gb = size(fastqs_R1, \"G\") + size(fastqs_R2, \"G\")\n    Float mem_gb = 5.0 + size(idx_tar, \"G\") + mem_factor * input_file_size_gb\n    Float samtools_mem_gb = 0.8 * mem_gb\n    Int disk_gb = round(40.0 + disk_factor * input_file_size_gb)\n\n    # tmp vars for task trim_adapter\n    Array[Array[File]] tmp_fastqs = if paired_end then transpose([fastqs_R1, fastqs_R2])\n                else transpose([fastqs_R1])\n    Array[Array[String]] tmp_adapters = if paired_end then transpose([adapters_R1, adapters_R2])\n                else transpose([adapters_R1])\n    command {\n        set -e\n\n        # check if pipeline dependencies can be found\n        if [[ -z \"$(which encode_task_trim_adapter.py 2> /dev/null || true)\" ]]\n        then\n          echo -e \"\\n* Error: pipeline dependencies not found.\" 1>&2\n          echo 'Conda users: Did you activate Conda environment (conda activate encode-atac-seq-pipeline)?' 1>&2\n          echo '    Or did you install Conda and environment correctly (bash scripts/install_conda_env.sh)?' 1>&2\n          echo 'GCP/AWS/Docker users: Did you add --docker flag to Caper command line arg?' 1>&2\n          echo 'Singularity users: Did you add --singularity flag to Caper command line arg?' 1>&2\n          echo -e \"\\n\" 1>&2\n          exit 3\n        fi\n\n        # trim adapter\n        python3 $(which encode_task_trim_adapter.py) \\\n            ${write_tsv(tmp_fastqs)} \\\n            ${'--adapter ' + adapter} \\\n            --adapters ${write_tsv(tmp_adapters)} \\\n            ${if paired_end then '--paired-end' else ''} \\\n            ${if auto_detect_adapter then '--auto-detect-adapter' else ''} \\\n            --cutadapt-param ' ${cutadapt_param}' \\\n            ${'--nth ' + cpu}\n\n        # align on trimmed/merged fastqs\n        if [ '${aligner}' == 'bowtie2' ]; then\n            python3 $(which encode_task_bowtie2.py) \\\n                ${idx_tar} \\\n                R1/*.fastq.gz \\\n                ${if paired_end then 'R2/*.fastq.gz' else ''} \\\n                ${if paired_end then '--paired-end' else ''} \\\n                ${'--multimapping ' + multimapping} \\\n                ${'--mem-gb ' + samtools_mem_gb} \\\n                ${'--nth ' + cpu}\n        fi\n\n        python3 $(which encode_task_post_align.py) \\\n            R1/*.fastq.gz $(ls *.bam) \\\n            ${'--mito-chr-name ' + mito_chr_name} \\\n            ${'--chrsz ' + chrsz} \\\n            ${'--mem-gb ' + samtools_mem_gb} \\\n            ${'--nth ' + cpu}\n        rm -rf R1 R2\n    }\n    output {\n        File bam = glob('*.bam')[0]\n        File bai = glob('*.bai')[0]\n        File samstat_qc = glob('*.samstats.qc')[0]\n        File non_mito_samstat_qc = glob('non_mito/*.samstats.qc')[0]\n        File read_len_log = glob('*.read_length.txt')[0]\n        Int read_len = read_int(read_len_log)\n    }\n    runtime {\n        cpu : cpu\n        memory : '${mem_gb} GB'\n        time : time_hr\n        disks : 'local-disk ${disk_gb} SSD'\n        preemptible: 0\n    }\n}\n\ntask frac_mito {\n    input {\n        File? non_mito_samstat\n        File? mito_samstat\n    }\n\n    command {\n        set -e\n        python3 $(which encode_task_frac_mito.py) \\\n            ${non_mito_samstat} ${mito_samstat}\n    }\n    output {\n        File frac_mito_qc = glob('*.frac_mito.qc')[0]\n    }\n    runtime {\n        cpu : 1\n        memory : '4 GB'\n        time : 1\n        disks : 'local-disk 10 SSD'\n    }\n}\n\ntask filter {\n    input {\n        File? bam\n        Boolean paired_end\n        Int multimapping\n        String dup_marker             # picard.jar MarkDuplicates (picard) or \n                                    # sambamba markdup (sambamba)\n        Int mapq_thresh                # threshold for low MAPQ reads removal\n        Array[String] filter_chrs     # chrs to be removed from final (nodup/filt) BAM\n        File chrsz                    # 2-col chromosome sizes file\n        Boolean no_dup_removal         # no dupe reads removal when filtering BAM\n        String mito_chr_name\n\n        Int cpu\n        Float mem_factor\n        String? picard_java_heap\n        Int time_hr\n        Float disk_factor\n    }\n    Float input_file_size_gb = size(bam, \"G\")\n    Float picard_java_heap_factor = 0.9\n    Float mem_gb = 6.0 + mem_factor * input_file_size_gb\n    Float samtools_mem_gb = 0.8 * mem_gb\n    Int disk_gb = round(20.0 + disk_factor * input_file_size_gb)\n\n    command {\n        set -e\n        python3 $(which encode_task_filter.py) \\\n            ${bam} \\\n            ${if paired_end then '--paired-end' else ''} \\\n            ${'--multimapping ' + multimapping} \\\n            ${'--dup-marker ' + dup_marker} \\\n            ${'--mapq-thresh ' + mapq_thresh} \\\n            --filter-chrs ${sep=' ' filter_chrs} \\\n            ${'--chrsz ' + chrsz} \\\n            ${if no_dup_removal then '--no-dup-removal' else ''} \\\n            ${'--mito-chr-name ' + mito_chr_name} \\\n            ${'--mem-gb ' + samtools_mem_gb} \\\n            ${'--nth ' + cpu} \\\n            ${'--picard-java-heap ' + if defined(picard_java_heap) then picard_java_heap else (round(mem_gb * picard_java_heap_factor) + 'G')}\n    }\n    output {\n        File nodup_bam = glob('*.bam')[0]\n        File nodup_bai = glob('*.bai')[0]\n        File samstat_qc = glob('*.samstats.qc')[0]\n        File dup_qc = glob('*.dup.qc')[0]\n        File lib_complexity_qc = glob('*.lib_complexity.qc')[0]\n    }\n    runtime {\n        cpu : cpu\n        memory : '${mem_gb} GB'\n        time : time_hr\n        disks : 'local-disk ${disk_gb} SSD'\n    }\n}\n\ntask bam2ta {\n    input {\n        File? bam\n        Boolean paired_end\n        Boolean disable_tn5_shift     # no tn5 shifting (it's for dnase-seq)\n        String mito_chr_name         # mito chromosome name\n        Int subsample                 # number of reads to subsample TAGALIGN\n                                    # this affects all downstream analysis\n        Int cpu\n        Float mem_factor\n        Int time_hr\n        Float disk_factor\n    }\n    Float input_file_size_gb = size(bam, \"G\")\n    Float mem_gb = 4.0 + mem_factor * input_file_size_gb\n    Float samtools_mem_gb = 0.8 * mem_gb\n    Int disk_gb = round(20.0 + disk_factor * input_file_size_gb)\n\n    command {\n        set -e\n        python3 $(which encode_task_bam2ta.py) \\\n            ${bam} \\\n            ${if paired_end then '--paired-end' else ''} \\\n            ${if disable_tn5_shift then '--disable-tn5-shift' else ''} \\\n            ${'--mito-chr-name ' + mito_chr_name} \\\n            ${'--subsample ' + subsample} \\\n            ${'--mem-gb ' + samtools_mem_gb} \\\n            ${'--nth ' + cpu}\n    }\n    output {\n        File ta = glob('*.tagAlign.gz')[0]\n    }\n    runtime {\n        cpu : cpu\n        memory : '${mem_gb} GB'\n        time : time_hr\n        disks : 'local-disk ${disk_gb} SSD'\n    }\n}\n\ntask spr {\n    input {\n        File? ta\n        Boolean paired_end\n        Int pseudoreplication_random_seed\n\n        Float mem_factor\n        Float disk_factor\n    }\n    Float input_file_size_gb = size(ta, \"G\")\n    Float mem_gb = 4.0 + mem_factor * input_file_size_gb\n    Int disk_gb = round(20.0 + disk_factor * input_file_size_gb)\n\n    command {\n        set -e\n        python3 $(which encode_task_spr.py) \\\n            ${ta} \\\n            ${'--pseudoreplication-random-seed ' + pseudoreplication_random_seed} \\\n            ${if paired_end then '--paired-end' else ''}\n    }\n    output {\n        File ta_pr1 = glob('*.pr1.tagAlign.gz')[0]\n        File ta_pr2 = glob('*.pr2.tagAlign.gz')[0]\n    }\n    runtime {\n        cpu : 1\n        memory : '${mem_gb} GB'\n        time : 1\n        disks : 'local-disk ${disk_gb} SSD'\n    }\n}\n\ntask pool_ta {\n    input {\n        Array[File?] tas     # TAG-ALIGNs to be merged\n        Int? col             # number of columns in pooled TA\n        String? prefix         # basename prefix\n    }\n    command {\n        set -e\n        python3 $(which encode_task_pool_ta.py) \\\n            ${sep=' ' select_all(tas)} \\\n            ${'--prefix ' + prefix} \\\n            ${'--col ' + col}\n    }\n    output {\n        File ta_pooled = glob('*.tagAlign.gz')[0]\n    }\n    runtime {\n        cpu : 1\n        memory : '8 GB'\n        time : 1\n        disks : 'local-disk 100 SSD'\n    }\n}\n\ntask xcor {\n    input {\n        File? ta\n        Boolean paired_end\n        String mito_chr_name\n        Int subsample  # number of reads to subsample TAGALIGN\n                    # this will be used for xcor only\n                    # will not affect any downstream analysis\n        Int cpu\n        Float mem_factor\n        Int time_hr\n        Float disk_factor\n    }\n    Float input_file_size_gb = size(ta, \"G\")\n    Float mem_gb = 8.0 + mem_factor * input_file_size_gb\n    Int disk_gb = round(20.0 + disk_factor * input_file_size_gb)\n\n    command {\n        set -e\n        python3 $(which encode_task_xcor.py) \\\n            ${ta} \\\n            ${if paired_end then '--paired-end' else ''} \\\n            ${'--mito-chr-name ' + mito_chr_name} \\\n            ${'--subsample ' + subsample} \\\n            --speak=0 \\\n            ${'--nth ' + cpu}\n    }\n    output {\n        File plot_pdf = glob('*.cc.plot.pdf')[0]\n        File plot_png = glob('*.cc.plot.png')[0]\n        File score = glob('*.cc.qc')[0]\n    }\n    runtime {\n        cpu : cpu\n        memory : '${mem_gb} GB'\n        time : time_hr\n        disks : 'local-disk ${disk_gb} SSD'\n    }\n}\n\ntask jsd {\n    input {\n        Array[File?] nodup_bams\n        File? blacklist\n        Int mapq_thresh\n\n        Int cpu\n        Float mem_factor\n        Int time_hr\n        Float disk_factor\n    }\n    Float input_file_size_gb = size(nodup_bams, \"G\")\n    Float mem_gb = 5.0 + mem_factor * input_file_size_gb\n    Int disk_gb = round(20.0 + disk_factor * input_file_size_gb)\n\n    command {\n        set -e\n        python3 $(which encode_task_jsd.py) \\\n            ${sep=' ' select_all(nodup_bams)} \\\n            ${'--mapq-thresh '+ mapq_thresh} \\\n            ${'--blacklist '+ blacklist} \\\n            ${'--nth ' + cpu}\n    }\n    output {\n        File plot = glob('*.png')[0]\n        Array[File] jsd_qcs = glob('*.jsd.qc')\n    }\n    runtime {\n        cpu : cpu\n        memory : '${mem_gb} GB'\n        time : time_hr\n        disks : 'local-disk ${disk_gb} SSD'\n    }\n}\n\ntask count_signal_track {\n    input {\n        File? ta             # tag-align\n        File chrsz            # 2-col chromosome sizes file\n    }\n    Float mem_gb = 8.0\n    command {\n        set -e\n        python3 $(which encode_task_count_signal_track.py) \\\n            ${ta} \\\n            ${'--chrsz ' + chrsz} \\\n            ${'--mem-gb ' + mem_gb}\n    }\n    output {\n        File pos_bw = glob('*.positive.bigwig')[0]\n        File neg_bw = glob('*.negative.bigwig')[0]\n    }\n    runtime {\n        cpu : 1\n        memory : '${mem_gb} GB'\n        time : 4\n        disks : 'local-disk 50 SSD'\n    }\n}\n\ntask call_peak {\n    input {\n        String peak_caller\n        String peak_type\n\n        File? ta\n        String gensz        # Genome size (sum of entries in 2nd column of \n                            # chr. sizes file, or hs for human, ms for mouse)\n        File chrsz            # 2-col chromosome sizes file\n        Int cap_num_peak    # cap number of raw peaks called from MACS2\n        Float pval_thresh      # p.value threshold\n        Int smooth_win         # size of smoothing window\n        File? blacklist     # blacklist BED to filter raw peaks\n        String? regex_bfilt_peak_chr_name\n\n        Int cpu\n        Float mem_factor\n        Int time_hr\n        Float disk_factor\n    }\n    Float input_file_size_gb = size(ta, \"G\")\n    Float mem_gb = 4.0 + mem_factor * input_file_size_gb\n    Int disk_gb = round(20.0 + disk_factor * input_file_size_gb)\n\n    command {\n        set -e\n\n        if [ '${peak_caller}' == 'macs2' ]; then\n            python3 $(which encode_task_macs2_atac.py) \\\n                ${ta} \\\n                ${'--gensz ' + gensz} \\\n                ${'--chrsz ' + chrsz} \\\n                ${'--cap-num-peak ' + cap_num_peak} \\\n                ${'--pval-thresh '+ pval_thresh} \\\n                ${'--smooth-win '+ smooth_win} \\\n                ${'--mem-gb ' + mem_gb}\n        fi\n\n        python3 $(which encode_task_post_call_peak_atac.py) \\\n            $(ls *Peak.gz) \\\n            ${'--ta ' + ta} \\\n            ${'--regex-bfilt-peak-chr-name \\'' + regex_bfilt_peak_chr_name + '\\''} \\\n            ${'--chrsz ' + chrsz} \\\n            ${'--peak-type ' + peak_type} \\\n            ${'--blacklist ' + blacklist}\n    }\n    output {\n        File peak = glob('*[!.][!b][!f][!i][!l][!t].'+peak_type+'.gz')[0]\n        # generated by post_call_peak py\n        File bfilt_peak = glob('*.bfilt.'+peak_type+'.gz')[0]\n        File bfilt_peak_bb = glob('*.bfilt.'+peak_type+'.bb')[0]\n        File bfilt_peak_starch = glob('*.bfilt.'+peak_type+'.starch')[0]\n        File bfilt_peak_hammock = glob('*.bfilt.'+peak_type+'.hammock.gz*')[0]\n        File bfilt_peak_hammock_tbi = glob('*.bfilt.'+peak_type+'.hammock.gz*')[1]\n        File frip_qc = glob('*.frip.qc')[0]\n        File peak_region_size_qc = glob('*.peak_region_size.qc')[0]\n        File peak_region_size_plot = glob('*.peak_region_size.png')[0]\n        File num_peak_qc = glob('*.num_peak.qc')[0]\n    }\n    runtime {\n        cpu : if peak_caller == 'macs2' then 1 else cpu\n        memory : '${mem_gb} GB'\n        time : time_hr\n        disks : 'local-disk ${disk_gb} SSD'\n        preemptible: 0\n    }\n}\n\ntask macs2_signal_track {\n    input {\n        File? ta\n        String gensz        # Genome size (sum of entries in 2nd column of \n                            # chr. sizes file, or hs for human, ms for mouse)\n        File chrsz            # 2-col chromosome sizes file\n        Float pval_thresh      # p.value threshold\n        Int smooth_win         # size of smoothing window\n\n        Float mem_factor\n        Int time_hr\n        Float disk_factor\n    }\n    Float input_file_size_gb = size(ta, \"G\")\n    Float mem_gb = 4.0 + mem_factor * input_file_size_gb\n    Int disk_gb = round(20.0 + disk_factor * input_file_size_gb)\n\n    command {\n        set -e\n        python3 $(which encode_task_macs2_signal_track_atac.py) \\\n            ${ta} \\\n            ${'--gensz '+ gensz} \\\n            ${'--chrsz ' + chrsz} \\\n            ${'--pval-thresh '+ pval_thresh} \\\n            ${'--smooth-win '+ smooth_win} \\\n            ${'--mem-gb ' + mem_gb}\n    }\n    output {\n        File pval_bw = glob('*.pval.signal.bigwig')[0]\n        File fc_bw = glob('*.fc.signal.bigwig')[0]\n    }\n    runtime {\n        cpu : 1\n        memory : '${mem_gb} GB'\n        time : time_hr\n        disks : 'local-disk ${disk_gb} SSD'\n        preemptible: 0\n    }\n}\n\ntask idr {\n    input {\n        String prefix         # prefix for IDR output file\n        File? peak1\n        File? peak2\n        File? peak_pooled\n        Float idr_thresh\n        File? blacklist     # blacklist BED to filter raw peaks\n        String regex_bfilt_peak_chr_name\n        # parameters to compute FRiP\n        File? ta            # to calculate FRiP\n        File chrsz            # 2-col chromosome sizes file\n        String peak_type\n        String rank\n    }\n    command {\n        set -e\n        touch null\n        python3 $(which encode_task_idr.py) \\\n            ${peak1} ${peak2} ${peak_pooled} \\\n            ${'--prefix ' + prefix} \\\n            ${'--idr-thresh ' + idr_thresh} \\\n            ${'--peak-type ' + peak_type} \\\n            --idr-rank ${rank} \\\n            ${'--chrsz ' + chrsz} \\\n            ${'--blacklist '+ blacklist} \\\n            ${'--regex-bfilt-peak-chr-name \\'' + regex_bfilt_peak_chr_name + '\\''} \\\n            ${'--ta ' + ta}\n    }\n    output {\n        File idr_peak = glob('*[!.][!b][!f][!i][!l][!t].'+peak_type+'.gz')[0]\n        File bfilt_idr_peak = glob('*.bfilt.'+peak_type+'.gz')[0]\n        File bfilt_idr_peak_bb = glob('*.bfilt.'+peak_type+'.bb')[0]\n        File bfilt_idr_peak_starch = glob('*.bfilt.'+peak_type+'.starch')[0]\n        File bfilt_idr_peak_hammock = glob('*.bfilt.'+peak_type+'.hammock.gz*')[0]\n        File bfilt_idr_peak_hammock_tbi = glob('*.bfilt.'+peak_type+'.hammock.gz*')[1]\n        File idr_plot = glob('*.txt.png')[0]\n        File idr_unthresholded_peak = glob('*.txt.gz')[0]\n        File idr_log = glob('*.idr*.log')[0]\n        File frip_qc = if defined(ta) then glob('*.frip.qc')[0] else glob('null')[0]\n    }\n    runtime {\n        cpu : 1\n        memory : '4 GB'\n        time : 1\n        disks : 'local-disk 500 SSD'\n    }\n}\n\ntask overlap {\n    input {\n        String prefix         # prefix for IDR output file\n        File? peak1\n        File? peak2\n        File? peak_pooled\n        File? blacklist     # blacklist BED to filter raw peaks\n        String regex_bfilt_peak_chr_name\n        File? ta        # to calculate FRiP\n        File chrsz            # 2-col chromosome sizes file\n        String peak_type\n    }\n    command {\n        set -e\n        touch null \n        python3 $(which encode_task_overlap.py) \\\n            ${peak1} ${peak2} ${peak_pooled} \\\n            ${'--prefix ' + prefix} \\\n            ${'--peak-type ' + peak_type} \\\n            ${'--chrsz ' + chrsz} \\\n            ${'--blacklist '+ blacklist} \\\n            --nonamecheck \\\n            ${'--regex-bfilt-peak-chr-name \\'' + regex_bfilt_peak_chr_name + '\\''} \\\n            ${'--ta ' + ta}\n    }\n    output {\n        File overlap_peak = glob('*[!.][!b][!f][!i][!l][!t].'+peak_type+'.gz')[0]\n        File bfilt_overlap_peak = glob('*.bfilt.'+peak_type+'.gz')[0]\n        File bfilt_overlap_peak_bb = glob('*.bfilt.'+peak_type+'.bb')[0]\n        File bfilt_overlap_peak_starch = glob('*.bfilt.'+peak_type+'.starch')[0]\n        File bfilt_overlap_peak_hammock = glob('*.bfilt.'+peak_type+'.hammock.gz*')[0]\n        File bfilt_overlap_peak_hammock_tbi = glob('*.bfilt.'+peak_type+'.hammock.gz*')[1]\n        File frip_qc = if defined(ta) then glob('*.frip.qc')[0] else glob('null')[0]\n    }\n    runtime {\n        cpu : 1\n        memory : '4 GB'\n        time : 1\n        disks : 'local-disk 500 SSD'\n    }\n}\n\ntask reproducibility {\n    input {\n        String prefix\n        Array[File] peaks # peak files from pair of true replicates\n                            # in a sorted order. for example of 4 replicates,\n                            # 1,2 1,3 1,4 2,3 2,4 3,4.\n                            # x,y means peak file from rep-x vs rep-y\n        Array[File]? peaks_pr    # peak files from pseudo replicates\n        File? peak_ppr            # Peak file from pooled pseudo replicate.\n        String peak_type\n        File chrsz            # 2-col chromosome sizes file\n    }\n    command {\n        set -e\n        python3 $(which encode_task_reproducibility.py) \\\n            ${sep=' ' peaks} \\\n            --peaks-pr ${sep=' ' peaks_pr} \\\n            ${'--peak-ppr '+ peak_ppr} \\\n            --prefix ${prefix} \\\n            ${'--peak-type ' + peak_type} \\\n            ${'--chrsz ' + chrsz}\n    }\n    output {\n        File optimal_peak = glob('*optimal_peak.*.gz')[0]\n        File optimal_peak_bb = glob('*optimal_peak.*.bb')[0]\n        File optimal_peak_starch = glob('*optimal_peak.*.starch')[0]\n        File optimal_peak_hammock = glob('*optimal_peak.*.hammock.gz*')[0]\n        File optimal_peak_hammock_tbi = glob('*optimal_peak.*.hammock.gz*')[1]\n        File conservative_peak = glob('*conservative_peak.*.gz')[0]\n        File conservative_peak_bb = glob('*conservative_peak.*.bb')[0]\n        File conservative_peak_starch = glob('*conservative_peak.*.starch')[0]\n        File conservative_peak_hammock = glob('*conservative_peak.*.hammock.gz*')[0]\n        File conservative_peak_hammock_tbi = glob('*conservative_peak.*.hammock.gz*')[1]\n        File reproducibility_qc = glob('*reproducibility.qc')[0]\n        # QC metrics for optimal peak\n        File peak_region_size_qc = glob('*.peak_region_size.qc')[0]\n        File peak_region_size_plot = glob('*.peak_region_size.png')[0]\n        File num_peak_qc = glob('*.num_peak.qc')[0]\n    }\n    runtime {\n        cpu : 1\n        memory : '4 GB'\n        time : 1\n        disks : 'local-disk 500 SSD'\n    }\n}\n\ntask preseq {\n    input {\n        File? bam\n        Boolean paired_end\n\n        Float mem_factor\n        Float disk_factor\n        String? picard_java_heap\n        File? null\n    }\n    Float input_file_size_gb = size(bam, \"G\")\n    Float mem_gb = 4.0 + mem_factor * input_file_size_gb\n    Float samtools_mem_gb = 0.8 * mem_gb\n    Int disk_gb = round(20.0 + disk_factor * input_file_size_gb)\n    Float picard_java_heap_factor = 0.9\n\n    command {\n        set -e\n        python3 $(which encode_task_preseq.py) \\\n            ${if paired_end then '--paired-end' else ''} \\\n            ${'--bam ' + bam} \\\n            ${'--mem-gb ' + samtools_mem_gb} \\\n            ${'--picard-java-heap ' + if defined(picard_java_heap) then picard_java_heap else (round(mem_gb * picard_java_heap_factor) + 'G')}\n        ${if !paired_end then 'touch null.picard_est_lib_size' else ''}\n    }\n    output {\n        File? picard_est_lib_size_qc = if paired_end then \n            glob('*.picard_est_lib_size.qc')[0] else null\n        File preseq_plot = glob('*.preseq.png')[0]\n        File preseq_log = glob('*.preseq.log')[0]\n    }\n    runtime {\n        cpu : 1\n        memory : '${mem_gb} GB'\n        time : 1\n        disks : 'local-disk ${disk_gb} SSD'\n    }\n}\n\ntask annot_enrich {\n    input {\n        # Fraction of Reads In Annotated Regions\n        File? ta\n        File? blacklist\n        File? dnase\n        File? prom\n        File? enh\n    }\n    command {\n        set -e\n        python3 $(which encode_task_annot_enrich.py) \\\n            ${'--ta ' + ta} \\\n            ${'--blacklist ' + blacklist} \\\n            ${'--dnase ' + dnase} \\\n            ${'--prom ' + prom} \\\n            ${'--enh ' + enh}\n    }\n    output {\n        File annot_enrich_qc = glob('*.annot_enrich.qc')[0]\n    }\n    runtime {\n        cpu : 1\n        memory : '8 GB'\n        time : 1\n        disks : 'local-disk 50 SSD'\n    }\n}\n\ntask tss_enrich {\n    input {\n        Int? read_len\n        File? nodup_bam\n        File? tss\n        File chrsz\n    }\n    command {\n        set -e\n        python2 $(which encode_task_tss_enrich.py) \\\n            ${'--read-len ' + read_len} \\\n            ${'--nodup-bam ' + nodup_bam} \\\n            ${'--chrsz ' + chrsz} \\\n            ${'--tss ' + tss}\n    }\n    output {\n        File tss_plot = glob('*.tss_enrich.png')[0]\n        File tss_large_plot = glob('*.large_tss_enrich.png')[0]\n        File tss_enrich_qc = glob('*.tss_enrich.qc')[0]\n        Float tss_enrich = read_float(tss_enrich_qc)\n    }\n    runtime {\n        cpu : 1\n        memory : '8 GB'\n        time : 1\n        disks : 'local-disk 500 SSD'\n    }\n}\n\ntask fraglen_stat_pe {\n    # for PE only\n    input {\n        File? nodup_bam\n        String? picard_java_heap\n    }\n    Float input_file_size_gb = size(nodup_bam, \"G\")\n    Float mem_gb = 8.0\n    Float picard_java_heap_factor = 0.9\n\n    command {\n        set -e\n        python3 $(which encode_task_fraglen_stat_pe.py) \\\n            ${'--nodup-bam ' + nodup_bam} \\\n            ${'--picard-java-heap ' + if defined(picard_java_heap) then picard_java_heap else (round(mem_gb * picard_java_heap_factor) + 'G')}\n    }\n    output {\n        File nucleosomal_qc = glob('*nucleosomal.qc')[0]\n        File fraglen_dist_plot = glob('*fraglen_dist.png')[0]\n    }\n    runtime {\n        cpu : 1\n        memory : '${mem_gb} GB'\n        time : 6\n        disks : 'local-disk 500 SSD'\n    }\n}\n\ntask gc_bias {\n    input {\n        File? nodup_bam\n        File ref_fa\n\n        String? picard_java_heap\n    }\n    Float mem_factor = 0.3\n    Float input_file_size_gb = size(nodup_bam, \"G\")\n    Float mem_gb = 4.0 + mem_factor * input_file_size_gb\n    Float picard_java_heap_factor = 0.9\n\n    command {\n        set -e\n        python3 $(which encode_task_gc_bias.py) \\\n            ${'--nodup-bam ' + nodup_bam} \\\n            ${'--ref-fa ' + ref_fa} \\\n            ${'--picard-java-heap ' + if defined(picard_java_heap) then picard_java_heap else (round(mem_gb * picard_java_heap_factor) + 'G')}\n    }\n    output {\n        File gc_plot = glob('*.gc_plot.png')[0]\n        File gc_log = glob('*.gc.txt')[0]\n    }\n    runtime {\n        cpu : 1\n        memory : '${mem_gb} GB'\n        time :6\n        disks : 'local-disk 500 SSD'\n    }\n}\n\ntask compare_signal_to_roadmap {\n    input {\n        File? pval_bw\n        File? dnase\n        File? reg2map_bed\n        File? reg2map\n        File? roadmap_meta\n    }\n    command {\n        set -e\n        python3 $(which encode_task_compare_signal_to_roadmap.py) \\\n            ${'--bigwig ' + pval_bw} \\\n            ${'--dnase ' + dnase} \\\n            ${'--reg2map-bed ' + reg2map_bed} \\\n            ${'--reg2map ' + reg2map} \\\n            ${'--roadmap-meta ' + roadmap_meta}\n    }\n    output {\n        File roadmap_compare_plot = glob('*roadmap_compare_plot.png')[0]\n        File roadmap_compare_log = glob('*roadmap_compare.log')[0]\n    }\n    runtime {\n        cpu : 1\n        memory : '8 GB'\n        time : 1\n        disks : 'local-disk 100 SSD'\n    }\n}\n\ntask qc_report {\n    input {\n        String pipeline_ver\n        String title\n        String description\n        String? genome\n        # workflow params\n        Int multimapping\n        Array[Boolean] paired_ends\n        String pipeline_type\n        String aligner\n        String peak_caller\n        Int cap_num_peak\n        Float idr_thresh\n        Float pval_thresh\n        Int xcor_subsample_reads\n        # QCs\n        Array[File] frac_mito_qcs\n        Array[File] samstat_qcs\n        Array[File] nodup_samstat_qcs\n        Array[File] dup_qcs\n        Array[File] lib_complexity_qcs\n        Array[File] xcor_plots\n        Array[File] xcor_scores\n        File? jsd_plot\n        Array[File]? jsd_qcs\n        Array[File] idr_plots\n        Array[File]? idr_plots_pr\n        File? idr_plot_ppr\n        Array[File] frip_qcs\n        Array[File] frip_qcs_pr1\n        Array[File] frip_qcs_pr2\n        File? frip_qc_pooled\n        File? frip_qc_ppr1\n        File? frip_qc_ppr2\n        Array[File] frip_idr_qcs\n        Array[File]? frip_idr_qcs_pr\n        File? frip_idr_qc_ppr\n        Array[File] frip_overlap_qcs\n        Array[File]? frip_overlap_qcs_pr\n        File? frip_overlap_qc_ppr\n        File? idr_reproducibility_qc\n        File? overlap_reproducibility_qc\n\n        Array[File] annot_enrich_qcs\n        Array[File] tss_enrich_qcs\n        Array[File] tss_large_plots\n        Array[File] roadmap_compare_plots\n        Array[File] fraglen_dist_plots\n        Array[File] fraglen_nucleosomal_qcs\n        Array[File] gc_plots\n        Array[File] preseq_plots\n        Array[File] picard_est_lib_size_qcs\n\n        Array[File] peak_region_size_qcs\n        Array[File] peak_region_size_plots\n        Array[File] num_peak_qcs\n\n        File? idr_opt_peak_region_size_qc\n        File? idr_opt_peak_region_size_plot\n        File? idr_opt_num_peak_qc\n\n        File? overlap_opt_peak_region_size_qc\n        File? overlap_opt_peak_region_size_plot\n        File? overlap_opt_num_peak_qc\n\n        File? qc_json_ref\n    }\n    command {\n        set -e\n        python3 $(which encode_task_qc_report.py) \\\n            ${'--pipeline-ver ' + pipeline_ver} \\\n            ${\"--title '\" + sub(title,\"'\",\"_\") + \"'\"} \\\n            ${\"--desc '\" + sub(description,\"'\",\"_\") + \"'\"} \\\n            ${'--genome ' + genome} \\\n            ${'--multimapping ' + multimapping} \\\n            --paired-ends ${sep=' ' paired_ends} \\\n            --pipeline-type ${pipeline_type} \\\n            --aligner ${aligner} \\\n            --peak-caller ${peak_caller} \\\n            ${'--cap-num-peak ' + cap_num_peak} \\\n            --idr-thresh ${idr_thresh} \\\n            --pval-thresh ${pval_thresh} \\\n            --xcor-subsample-reads ${xcor_subsample_reads} \\\n            --frac-mito-qcs ${sep='_:_' frac_mito_qcs} \\\n            --samstat-qcs ${sep='_:_' samstat_qcs} \\\n            --nodup-samstat-qcs ${sep='_:_' nodup_samstat_qcs} \\\n            --dup-qcs ${sep='_:_' dup_qcs} \\\n            --lib-complexity-qcs ${sep='_:_' lib_complexity_qcs} \\\n            --xcor-plots ${sep='_:_' xcor_plots} \\\n            --xcor-scores ${sep='_:_' xcor_scores} \\\n            --idr-plots ${sep='_:_' idr_plots} \\\n            --idr-plots-pr ${sep='_:_' idr_plots_pr} \\\n            ${'--jsd-plot ' + jsd_plot} \\\n            --jsd-qcs ${sep='_:_' jsd_qcs} \\\n            ${'--idr-plot-ppr ' + idr_plot_ppr} \\\n            --frip-qcs ${sep='_:_' frip_qcs} \\\n            --frip-qcs-pr1 ${sep='_:_' frip_qcs_pr1} \\\n            --frip-qcs-pr2 ${sep='_:_' frip_qcs_pr2} \\\n            ${'--frip-qc-pooled ' + frip_qc_pooled} \\\n            ${'--frip-qc-ppr1 ' + frip_qc_ppr1} \\\n            ${'--frip-qc-ppr2 ' + frip_qc_ppr2} \\\n            --frip-idr-qcs ${sep='_:_' frip_idr_qcs} \\\n            --frip-idr-qcs-pr ${sep='_:_' frip_idr_qcs_pr} \\\n            ${'--frip-idr-qc-ppr ' + frip_idr_qc_ppr} \\\n            --frip-overlap-qcs ${sep='_:_' frip_overlap_qcs} \\\n            --frip-overlap-qcs-pr ${sep='_:_' frip_overlap_qcs_pr} \\\n            ${'--frip-overlap-qc-ppr ' + frip_overlap_qc_ppr} \\\n            ${'--idr-reproducibility-qc ' + idr_reproducibility_qc} \\\n            ${'--overlap-reproducibility-qc ' + overlap_reproducibility_qc} \\\n            --annot-enrich-qcs ${sep='_:_' annot_enrich_qcs} \\\n            --tss-enrich-qcs ${sep='_:_' tss_enrich_qcs} \\\n            --tss-large-plots ${sep='_:_' tss_large_plots} \\\n            --roadmap-compare-plots ${sep='_:_' roadmap_compare_plots} \\\n            --fraglen-dist-plots ${sep='_:_' fraglen_dist_plots} \\\n            --fraglen-nucleosomal-qcs ${sep='_:_' fraglen_nucleosomal_qcs} \\\n            --gc-plots ${sep='_:_' gc_plots} \\\n            --preseq-plots ${sep='_:_' preseq_plots} \\\n            --picard-est-lib-size-qcs ${sep='_:_' picard_est_lib_size_qcs} \\\n            --peak-region-size-qcs ${sep='_:_' peak_region_size_qcs} \\\n            --peak-region-size-plots ${sep='_:_' peak_region_size_plots} \\\n            --num-peak-qcs ${sep='_:_' num_peak_qcs} \\\n            ${'--idr-opt-peak-region-size-qc ' + idr_opt_peak_region_size_qc} \\\n            ${'--idr-opt-peak-region-size-plot ' + idr_opt_peak_region_size_plot} \\\n            ${'--idr-opt-num-peak-qc ' + idr_opt_num_peak_qc} \\\n            ${'--overlap-opt-peak-region-size-qc ' + overlap_opt_peak_region_size_qc} \\\n            ${'--overlap-opt-peak-region-size-plot ' + overlap_opt_peak_region_size_plot} \\\n            ${'--overlap-opt-num-peak-qc ' + overlap_opt_num_peak_qc} \\\n            --out-qc-html qc.html \\\n            --out-qc-json qc.json \\\n            ${'--qc-json-ref ' + qc_json_ref}\n    }\n    output {\n        File report = glob('*qc.html')[0]\n        File qc_json = glob('*qc.json')[0]\n        Boolean qc_json_ref_match = read_string('qc_json_ref_match.txt')=='True'\n    }\n    runtime {\n        cpu : 1\n        memory : '4 GB'\n        time : 1\n        disks : 'local-disk 50 SSD'\n    }\n}\n\ntask read_genome_tsv {\n    input {\n        File? genome_tsv\n        String? null_s\n    }\n    command <<<\n        echo \"$(basename ~{genome_tsv})\" > genome_name\n        # create empty files for all entries\n        touch ref_fa bowtie2_idx_tar chrsz gensz blacklist blacklist2\n        touch ref_mito_fa\n        touch bowtie2_mito_idx_tar\n        touch tss tss_enrich # for backward compatibility\n        touch dnase prom enh reg2map reg2map_bed roadmap_meta\n        touch mito_chr_name\n        touch regex_bfilt_peak_chr_name\n\n        python <<CODE\n        import os\n        with open('~{genome_tsv}','r') as fp:\n            for line in fp:\n                arr = line.strip('\\n').split('\\t')\n                if arr:\n                    key, val = arr\n                    with open(key,'w') as fp2:\n                        fp2.write(val)\n        CODE\n    >>>\n    output {\n        String? genome_name = read_string('genome_name')\n        String? ref_fa = if size('ref_fa')==0 then null_s else read_string('ref_fa')\n        String? ref_mito_fa = if size('ref_mito_fa')==0 then null_s else read_string('ref_mito_fa')\n        String? bowtie2_idx_tar = if size('bowtie2_idx_tar')==0 then null_s else read_string('bowtie2_idx_tar')\n        String? bowtie2_mito_idx_tar = if size('bowtie2_mito_idx_tar')==0 then null_s else read_string('bowtie2_mito_idx_tar')\n        String? chrsz = if size('chrsz')==0 then null_s else read_string('chrsz')\n        String? gensz = if size('gensz')==0 then null_s else read_string('gensz')\n        String? blacklist = if size('blacklist')==0 then null_s else read_string('blacklist')\n        String? blacklist2 = if size('blacklist2')==0 then null_s else read_string('blacklist2')\n        String? mito_chr_name = if size('mito_chr_name')==0 then null_s else read_string('mito_chr_name')\n        String? regex_bfilt_peak_chr_name = if size('regex_bfilt_peak_chr_name')==0 then 'chr[\\\\dXY]+'\n            else read_string('regex_bfilt_peak_chr_name')\n        String? tss = if size('tss')!=0 then read_string('tss')\n            else if size('tss_enrich')!=0 then read_string('tss_enrich') else null_s\n        String? dnase = if size('dnase')==0 then null_s else read_string('dnase')\n        String? prom = if size('prom')==0 then null_s else read_string('prom')\n        String? enh = if size('enh')==0 then null_s else read_string('enh')\n        String? reg2map = if size('reg2map')==0 then null_s else read_string('reg2map')\n        String? reg2map_bed = if size('reg2map_bed')==0 then null_s else read_string('reg2map_bed')\n        String? roadmap_meta = if size('roadmap_meta')==0 then null_s else read_string('roadmap_meta')\n    }\n    runtime {\n        maxRetries : 0\n        cpu : 1\n        memory : '2 GB'\n        time : 1\n        disks : 'local-disk 10 SSD'\n    }\n}\n\ntask raise_exception {\n    input {\n        String msg\n    }\n    command {\n        echo -e \"\\n* Error: ${msg}\\n\" >&2\n        exit 2\n    }\n    output {\n        String error_msg = '${msg}'\n    }\n    runtime {\n        maxRetries : 0\n        cpu : 1\n        memory : '2 GB'\n        time : 1\n        disks : 'local-disk 10 SSD'\n    }\n}\n",
        "root": "",
        "options": "{\n  \"backend\": \"gcp\",\n  \"default_runtime_attributes\": {\n    \"docker\": \"encodedcc/atac-seq-pipeline:v1.10.0\",\n    \"maxRetries\": 1\n  },\n  \"monitoring_script\": \"gs://caper-data/scripts/resource_monitor/resource_monitor.sh\"\n}",
        "inputs": "{\"atac.genome_tsv\":\"gs://neuro-variants/data/pipeline_genome_data/hg19/hg19.tsv\",\"atac.paired_end\":true,\"atac.pipeline_type\":\"atac\",\"atac.tas\":[\"gs://neuro-variants/data/processed/domcke_2020/tagaligns/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.tagAlign.gz\"],\"atac.title\":\"domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells\"}",
        "workflowUrl": "",
        "labels": "{\n    \"caper-backend\": \"gcp\",\n    \"caper-str-label\": \"domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells\",\n    \"caper-user\": \"soumyak\"\n}"
    },
    "calls": {
        "atac.read_genome_tsv": [
            {
                "preemptible": false,
                "executionStatus": "Done",
                "stdout": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-read_genome_tsv/stdout",
                "backendStatus": "Success",
                "compressedDockerSize": 963996198,
                "commandLine": "echo \"$(basename /cromwell_root/neuro-variants/data/pipeline_genome_data/hg19/hg19.tsv)\" > genome_name\n# create empty files for all entries\ntouch ref_fa bowtie2_idx_tar chrsz gensz blacklist blacklist2\ntouch ref_mito_fa\ntouch bowtie2_mito_idx_tar\ntouch tss tss_enrich # for backward compatibility\ntouch dnase prom enh reg2map reg2map_bed roadmap_meta\ntouch mito_chr_name\ntouch regex_bfilt_peak_chr_name\n\npython <<CODE\nimport os\nwith open('/cromwell_root/neuro-variants/data/pipeline_genome_data/hg19/hg19.tsv','r') as fp:\n    for line in fp:\n        arr = line.strip('\\n').split('\\t')\n        if arr:\n            key, val = arr\n            with open(key,'w') as fp2:\n                fp2.write(val)\nCODE",
                "shardIndex": -1,
                "jes": {
                    "endpointUrl": "https://lifesciences.googleapis.com/",
                    "machineType": "custom-1-2048",
                    "googleProject": "hai-gcp-genomic",
                    "monitoringScript": "gs://caper-data/scripts/resource_monitor/resource_monitor.sh",
                    "executionBucket": "gs://neuro-variants/data/processed/atac_pipeline_outputs/",
                    "zone": "us-central1-b",
                    "instanceName": "google-pipelines-worker-f484565cb019fb67a75eb40ee7d9ac0b"
                },
                "outputs": {
                    "blacklist": "gs://neuro-variants/data/pipeline_genome_data/hg19/wgEncodeDacMapabilityConsensusExcludable.bed.gz",
                    "tss": "gs://neuro-variants/data/pipeline_genome_data/hg19/ataqc/hg19_gencode_tss_unique.bed.gz",
                    "enh": "gs://neuro-variants/data/pipeline_genome_data/hg19/ataqc/reg2map_honeybadger2_dnase_enh_p2.bed.gz",
                    "ref_mito_fa": "gs://neuro-variants/data/pipeline_genome_data/hg19/male.hg19.chrM.fa.gz",
                    "ref_fa": "gs://neuro-variants/data/pipeline_genome_data/hg19/male.hg19.fa.gz",
                    "reg2map": "gs://neuro-variants/data/pipeline_genome_data/hg19/ataqc/dnase_avgs_reg2map_p10_merged_named.pvals.gz",
                    "roadmap_meta": "gs://neuro-variants/data/pipeline_genome_data/hg19/ataqc/eid_to_mnemonic.txt",
                    "mito_chr_name": "chrM",
                    "chrsz": "gs://neuro-variants/data/pipeline_genome_data/hg19/hg19.chrom.sizes",
                    "bowtie2_idx_tar": "gs://neuro-variants/data/pipeline_genome_data/hg19/bowtie2_index/male.hg19.fa.tar",
                    "genome_name": "hg19",
                    "reg2map_bed": null,
                    "gensz": "hs",
                    "bowtie2_mito_idx_tar": "gs://neuro-variants/data/pipeline_genome_data/hg19/bowtie2_index/male.hg19.chrM.fa.tar",
                    "regex_bfilt_peak_chr_name": "chr[\\dXY]+",
                    "blacklist2": null,
                    "prom": "gs://neuro-variants/data/pipeline_genome_data/hg19/ataqc/reg2map_honeybadger2_dnase_prom_p2.bed.gz",
                    "dnase": "gs://neuro-variants/data/pipeline_genome_data/hg19/ataqc/reg2map_honeybadger2_dnase_all_p10_ucsc.bed.gz"
                },
                "runtimeAttributes": {
                    "preemptible": "0",
                    "failOnStderr": "false",
                    "bootDiskSizeGb": "10",
                    "disks": "local-disk 10 SSD",
                    "continueOnReturnCode": "0",
                    "docker": "encodedcc/atac-seq-pipeline:v1.10.0",
                    "maxRetries": "0",
                    "cpu": "1",
                    "cpuMin": "1",
                    "noAddress": "false",
                    "zones": "us-central1-b",
                    "memoryMin": "2 GB",
                    "memory": "2 GB"
                },
                "callCaching": {
                    "allowResultReuse": true,
                    "hit": false,
                    "result": "Cache Miss",
                    "hashes": {
                        "output count": "6F4922F45568161A8CDF4AD2299F6D23",
                        "runtime attribute": {
                            "failOnStderr": "68934A3E9455FA72420237EB05902327",
                            "docker": "B1F36DD8C0A09090242A283D75E4277C",
                            "continueOnReturnCode": "CFCD208495D565EF66E7DFF9F98764DA"
                        },
                        "output expression": {
                            "Optional(String) chrsz": "D4F18CDF90FCD98B1D444A137124EEFF",
                            "Optional(String) gensz": "4E9C991DACE79D32DC95E1786A251C28",
                            "Optional(String) bowtie2_idx_tar": "7002F9AE911D4075E4A0FB7FC2FBB1B0",
                            "Optional(String) reg2map_bed": "F4A65C2AF79D1EADC123E13AE4A2DAEF",
                            "Optional(String) genome_name": "7EC158EA4FE08BC5C050FCE05BB702F5",
                            "Optional(String) mito_chr_name": "95ACE380B920F62E8B4189B7BFA8DE5A",
                            "Optional(String) reg2map": "F3A19DABFBBDE1A0456ADC2AD4D974AA",
                            "Optional(String) roadmap_meta": "2EC581180DFACFCA320B109ABBE43F96",
                            "Optional(String) dnase": "1C6B72EE61E0869580852E9CE2D6F4CC",
                            "Optional(String) bowtie2_mito_idx_tar": "A851A256A62F876B6B5FDB933CB54A6A",
                            "Optional(String) prom": "D654CB0E9A6FCB9DB588508A6082633B",
                            "Optional(String) ref_fa": "FF4031A4B1F506164DB071652273A922",
                            "Optional(String) enh": "14BBB5AE5B3D132C0DE386E8395884D0",
                            "Optional(String) ref_mito_fa": "DD95E5A9E7E4DAAFC541BD9652ABA8BB",
                            "Optional(String) tss": "C683951EB65C940DEA3CD9CFC58DF75B",
                            "Optional(String) regex_bfilt_peak_chr_name": "A0964AEF638DE5FC78473C761B5B4B81",
                            "Optional(String) blacklist": "844E654445100F2887674F102FB5369F",
                            "Optional(String) blacklist2": "8B8D9781F2CFB8BF355C4AC17C0CCB14"
                        },
                        "input count": "C4CA4238A0B923820DCC509A6F75849B",
                        "backend name": "50F66ECBC45488EE5826941BFBC50411",
                        "command template": "06B49ACB263F83A66CBACD55FA078647",
                        "input": {
                            "File genome_tsv": "haJzMg=="
                        }
                    },
                    "effectiveCallCachingMode": "ReadAndWriteCache"
                },
                "inputs": {
                    "null_s": null,
                    "genome_tsv": "gs://neuro-variants/data/pipeline_genome_data/hg19/hg19.tsv"
                },
                "backendLabels": {
                    "wdl-task-name": "read-genome-tsv",
                    "cromwell-workflow-id": "cromwell-647e4f46-7583-4700-ba4e-bf59c94b2872"
                },
                "returnCode": 0,
                "labels": {
                    "cromwell-workflow-id": "cromwell-647e4f46-7583-4700-ba4e-bf59c94b2872",
                    "wdl-task-name": "read_genome_tsv"
                },
                "jobId": "projects/886987709752/locations/us-central1/operations/8580526588592831013",
                "monitoringLog": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-read_genome_tsv/monitoring.log",
                "backend": "gcp",
                "end": "2024-06-10T06:58:46.291Z",
                "dockerImageUsed": "encodedcc/atac-seq-pipeline@sha256:b29984294619e9c1a1a9814d6a37a375d51b05beba481302246698b4b903ee30",
                "stderr": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-read_genome_tsv/stderr",
                "callRoot": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-read_genome_tsv",
                "attempt": 1,
                "executionEvents": [
                    {
                        "startTime": "2024-06-10T06:56:39.434Z",
                        "endTime": "2024-06-10T06:58:43.554Z",
                        "description": "Complete in GCE / Cromwell Poll Interval"
                    },
                    {
                        "description": "Background",
                        "startTime": "2024-06-10T06:55:08.750Z",
                        "endTime": "2024-06-10T06:55:09.466Z"
                    },
                    {
                        "description": "Pulling \"encodedcc/atac-seq-pipeline@sha256:b29984294619e9c1a1a9814d6a37a375d51b05beba481302246698b4b903ee30\"",
                        "startTime": "2024-06-10T06:53:05.378Z",
                        "endTime": "2024-06-10T06:55:04.760Z"
                    },
                    {
                        "startTime": "2024-06-10T06:58:43.554Z",
                        "endTime": "2024-06-10T06:58:45.317Z",
                        "description": "UpdatingCallCache"
                    },
                    {
                        "endTime": "2024-06-10T06:32:10.726Z",
                        "description": "PreparingJob",
                        "startTime": "2024-06-10T06:32:10.350Z"
                    },
                    {
                        "startTime": "2024-06-10T06:58:45.317Z",
                        "endTime": "2024-06-10T06:58:46.291Z",
                        "description": "UpdatingJobStore"
                    },
                    {
                        "description": "UserAction",
                        "startTime": "2024-06-10T06:55:46.869Z",
                        "endTime": "2024-06-10T06:55:51.095Z"
                    },
                    {
                        "startTime": "2024-06-10T06:32:10.726Z",
                        "endTime": "2024-06-10T06:32:13.542Z",
                        "description": "CallCacheReading"
                    },
                    {
                        "description": "ContainerSetup",
                        "startTime": "2024-06-10T06:55:04.760Z",
                        "endTime": "2024-06-10T06:55:08.750Z"
                    },
                    {
                        "startTime": "2024-06-10T06:41:52.692Z",
                        "description": "Worker \"google-pipelines-worker-8e59cb3731aed06afb05b17a31d34056\" assigned in \"us-central1-b\" on a \"custom-1-2048\" machine",
                        "endTime": "2024-06-10T06:51:56.086Z"
                    },
                    {
                        "startTime": "2024-06-10T06:32:08.831Z",
                        "endTime": "2024-06-10T06:32:10.350Z",
                        "description": "RequestingExecutionToken"
                    },
                    {
                        "description": "Worker released",
                        "startTime": "2024-06-10T06:51:56.086Z",
                        "endTime": "2024-06-10T06:51:56.114Z"
                    },
                    {
                        "startTime": "2024-06-10T06:32:08.831Z",
                        "endTime": "2024-06-10T06:32:08.831Z",
                        "description": "Pending"
                    },
                    {
                        "description": "Delocalization",
                        "startTime": "2024-06-10T06:55:51.948Z",
                        "endTime": "2024-06-10T06:56:39.434Z"
                    },
                    {
                        "startTime": "2024-06-10T06:41:41.933Z",
                        "endTime": "2024-06-10T06:41:52.692Z",
                        "description": "waiting for quota"
                    },
                    {
                        "endTime": "2024-06-10T06:52:26.713Z",
                        "description": "Worker \"google-pipelines-worker-f484565cb019fb67a75eb40ee7d9ac0b\" assigned in \"us-central1-b\" on a \"custom-1-2048\" machine",
                        "startTime": "2024-06-10T06:51:56.114Z"
                    },
                    {
                        "startTime": "2024-06-10T06:32:13.542Z",
                        "endTime": "2024-06-10T06:41:41.933Z",
                        "description": "RunningJob"
                    },
                    {
                        "description": "Worker released",
                        "endTime": "2024-06-10T06:56:39.434Z",
                        "startTime": "2024-06-10T06:56:39.434Z"
                    },
                    {
                        "startTime": "2024-06-10T06:32:10.350Z",
                        "endTime": "2024-06-10T06:32:10.350Z",
                        "description": "WaitingForValueStore"
                    },
                    {
                        "description": "Pulling \"gcr.io/google.com/cloudsdktool/cloud-sdk:276.0.0-slim\"",
                        "startTime": "2024-06-10T06:52:26.713Z",
                        "endTime": "2024-06-10T06:53:05.378Z"
                    },
                    {
                        "description": "Localization",
                        "startTime": "2024-06-10T06:55:10.017Z",
                        "endTime": "2024-06-10T06:55:46.869Z"
                    }
                ],
                "backendLogs": {
                    "log": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-read_genome_tsv/read_genome_tsv.log"
                },
                "start": "2024-06-10T06:32:08.831Z"
            }
        ],
        "atac.idr_pr": [
            {
                "preemptible": false,
                "executionStatus": "Done",
                "stdout": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-idr_pr/shard-0/stdout",
                "backendStatus": "Success",
                "compressedDockerSize": 963996198,
                "commandLine": "set -e\ntouch null\npython3 $(which encode_task_idr.py) \\\n    /cromwell_root/neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak_pr1/shard-0/glob-254907fcd430d7e6c9bf67ac4585adb4/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pr1.pval0.01.300K.narrowPeak.gz /cromwell_root/neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak_pr2/shard-0/glob-254907fcd430d7e6c9bf67ac4585adb4/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pr2.pval0.01.300K.narrowPeak.gz /cromwell_root/neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak/shard-0/glob-254907fcd430d7e6c9bf67ac4585adb4/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pval0.01.300K.narrowPeak.gz \\\n    --prefix rep1-pr1_vs_rep1-pr2 \\\n    --idr-thresh 0.05 \\\n    --peak-type narrowPeak \\\n    --idr-rank p.value \\\n    --chrsz /cromwell_root/neuro-variants/data/pipeline_genome_data/hg19/hg19.chrom.sizes \\\n    --blacklist /cromwell_root/neuro-variants/data/pipeline_genome_data/hg19/wgEncodeDacMapabilityConsensusExcludable.bed.gz \\\n    --regex-bfilt-peak-chr-name 'chr[\\dXY]+' \\\n    --ta /cromwell_root/neuro-variants/data/processed/domcke_2020/tagaligns/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.tagAlign.gz",
                "shardIndex": 0,
                "jes": {
                    "endpointUrl": "https://lifesciences.googleapis.com/",
                    "machineType": "custom-1-4096",
                    "googleProject": "hai-gcp-genomic",
                    "monitoringScript": "gs://caper-data/scripts/resource_monitor/resource_monitor.sh",
                    "executionBucket": "gs://neuro-variants/data/processed/atac_pipeline_outputs/",
                    "zone": "us-central1-b",
                    "instanceName": "google-pipelines-worker-4e6da4fb40d598250302b50bb6c4e950"
                },
                "outputs": {
                    "bfilt_idr_peak_hammock": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-idr_pr/shard-0/glob-08ed81b9c4c9ccf6c3692d9ea29b11e0/rep1-pr1_vs_rep1-pr2.idr0.05.bfilt.narrowPeak.hammock.gz",
                    "bfilt_idr_peak_hammock_tbi": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-idr_pr/shard-0/glob-08ed81b9c4c9ccf6c3692d9ea29b11e0/rep1-pr1_vs_rep1-pr2.idr0.05.bfilt.narrowPeak.hammock.gz.tbi",
                    "idr_plot": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-idr_pr/shard-0/glob-8da83e7748d9e54f3e082eb4aa171757/rep1-pr1_vs_rep1-pr2.idr0.05.unthresholded-peaks.txt.png",
                    "idr_unthresholded_peak": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-idr_pr/shard-0/glob-b34256f7f8497ceb77fad19f39663af0/rep1-pr1_vs_rep1-pr2.idr0.05.unthresholded-peaks.txt.gz",
                    "frip_qc": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-idr_pr/shard-0/glob-156b027b56a0fc9230201b265d9f4bf4/rep1-pr1_vs_rep1-pr2.idr0.05.bfilt.frip.qc",
                    "idr_peak": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-idr_pr/shard-0/glob-254907fcd430d7e6c9bf67ac4585adb4/rep1-pr1_vs_rep1-pr2.idr0.05.narrowPeak.gz",
                    "bfilt_idr_peak": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-idr_pr/shard-0/glob-2e6c87fc90e45fa5dbda88934d454cd3/rep1-pr1_vs_rep1-pr2.idr0.05.bfilt.narrowPeak.gz",
                    "bfilt_idr_peak_starch": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-idr_pr/shard-0/glob-c803fbc8adf0005e2a0b14b4815c0106/rep1-pr1_vs_rep1-pr2.idr0.05.bfilt.narrowPeak.starch",
                    "idr_log": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-idr_pr/shard-0/glob-748df5c4b6fa48c407f98a93d42e64c6/rep1-pr1_vs_rep1-pr2.idr0.05.log",
                    "bfilt_idr_peak_bb": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-idr_pr/shard-0/glob-155eada107f68a2195912a39f5dee4bc/rep1-pr1_vs_rep1-pr2.idr0.05.bfilt.narrowPeak.bb"
                },
                "runtimeAttributes": {
                    "preemptible": "0",
                    "failOnStderr": "false",
                    "bootDiskSizeGb": "10",
                    "disks": "local-disk 500 SSD",
                    "continueOnReturnCode": "0",
                    "docker": "encodedcc/atac-seq-pipeline:v1.10.0",
                    "maxRetries": "1",
                    "cpu": "1",
                    "cpuMin": "1",
                    "noAddress": "false",
                    "zones": "us-central1-b",
                    "memoryMin": "2 GB",
                    "memory": "4 GB"
                },
                "callCaching": {
                    "allowResultReuse": true,
                    "hit": false,
                    "result": "Cache Miss",
                    "hashes": {
                        "output count": "D3D9446802A44259755D38E6D163E820",
                        "runtime attribute": {
                            "docker": "B1F36DD8C0A09090242A283D75E4277C",
                            "failOnStderr": "68934A3E9455FA72420237EB05902327",
                            "continueOnReturnCode": "CFCD208495D565EF66E7DFF9F98764DA"
                        },
                        "output expression": {
                            "File bfilt_idr_peak_bb": "548824A543F147DE9E2FDA4F0AEBA711",
                            "File idr_plot": "8C2A61B8475499D094401E71D10EF7A5",
                            "File bfilt_idr_peak_starch": "68A471BB69D3C769B6EFD75D8BA384BB",
                            "File idr_unthresholded_peak": "D5DE07DD7B75A43B0EC0E76E60230445",
                            "File frip_qc": "FFBDC0CF158D56A15AA0F87CB842D5C8",
                            "File bfilt_idr_peak_hammock": "00070404F73DBACD1B0710271BCB785E",
                            "File bfilt_idr_peak": "9AA37E04B33FA2979A74B09B286645DC",
                            "File idr_peak": "2B4C2D30823B687890B9ABBFA7507878",
                            "File idr_log": "C06EE2EDC26CEA6DB33221E9459818FE",
                            "File bfilt_idr_peak_hammock_tbi": "1D7A1D8E68AE180F84BF00427775A2B8"
                        },
                        "input count": "6512BD43D9CAA6E02C990B0A82652DCA",
                        "backend name": "50F66ECBC45488EE5826941BFBC50411",
                        "command template": "C5C3C2247F2FDBE8A7657F1A4299F1B2",
                        "input": {
                            "File peak2": "tWIM+A==",
                            "File blacklist": "an7FXQ==",
                            "File chrsz": "9qqSMA==",
                            "String rank": "B7A5B8CB6541B45E733BDF70EC2FD63D",
                            "String regex_bfilt_peak_chr_name": "C742E46BA2D35AFA2B5C0BBCB7D31CE7",
                            "File peak_pooled": "5dheoA==",
                            "File ta": "/AXxtQ==",
                            "Float idr_thresh": "B14399CBAAC6DA4B5B733B483106383F",
                            "String prefix": "D3B9D7856D560D6435DB69A1320959A6",
                            "String peak_type": "9F6EB79808F888389F5E27EE57FF2B53",
                            "File peak1": "7ASMKA=="
                        }
                    },
                    "effectiveCallCachingMode": "ReadAndWriteCache"
                },
                "inputs": {
                    "blacklist": "gs://neuro-variants/data/pipeline_genome_data/hg19/wgEncodeDacMapabilityConsensusExcludable.bed.gz",
                    "peak_type": "narrowPeak",
                    "ta": "gs://neuro-variants/data/processed/domcke_2020/tagaligns/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.tagAlign.gz",
                    "prefix": "rep1-pr1_vs_rep1-pr2",
                    "peak2": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak_pr2/shard-0/glob-254907fcd430d7e6c9bf67ac4585adb4/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pr2.pval0.01.300K.narrowPeak.gz",
                    "rank": "p.value",
                    "chrsz": "gs://neuro-variants/data/pipeline_genome_data/hg19/hg19.chrom.sizes",
                    "idr_thresh": 0.05,
                    "peak1": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak_pr1/shard-0/glob-254907fcd430d7e6c9bf67ac4585adb4/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pr1.pval0.01.300K.narrowPeak.gz",
                    "regex_bfilt_peak_chr_name": "chr[\\dXY]+",
                    "peak_pooled": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak/shard-0/glob-254907fcd430d7e6c9bf67ac4585adb4/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pval0.01.300K.narrowPeak.gz"
                },
                "backendLabels": {
                    "wdl-task-name": "idr",
                    "cromwell-workflow-id": "cromwell-647e4f46-7583-4700-ba4e-bf59c94b2872",
                    "wdl-call-alias": "idr-pr"
                },
                "returnCode": 0,
                "labels": {
                    "wdl-call-alias": "idr_pr",
                    "cromwell-workflow-id": "cromwell-647e4f46-7583-4700-ba4e-bf59c94b2872",
                    "wdl-task-name": "idr"
                },
                "jobId": "projects/886987709752/locations/us-central1/operations/1936868321054465454",
                "monitoringLog": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-idr_pr/shard-0/monitoring.log",
                "backend": "gcp",
                "end": "2024-06-10T07:22:25.318Z",
                "dockerImageUsed": "encodedcc/atac-seq-pipeline@sha256:b29984294619e9c1a1a9814d6a37a375d51b05beba481302246698b4b903ee30",
                "stderr": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-idr_pr/shard-0/stderr",
                "callRoot": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-idr_pr/shard-0",
                "attempt": 1,
                "executionEvents": [
                    {
                        "description": "Pulling \"encodedcc/atac-seq-pipeline@sha256:b29984294619e9c1a1a9814d6a37a375d51b05beba481302246698b4b903ee30\"",
                        "startTime": "2024-06-10T07:15:40.681Z",
                        "endTime": "2024-06-10T07:17:17.327Z"
                    },
                    {
                        "endTime": "2024-06-10T07:13:43.535Z",
                        "description": "CallCacheReading",
                        "startTime": "2024-06-10T07:13:40.353Z"
                    },
                    {
                        "description": "Background",
                        "startTime": "2024-06-10T07:17:21.718Z",
                        "endTime": "2024-06-10T07:17:22.704Z"
                    },
                    {
                        "description": "Localization",
                        "startTime": "2024-06-10T07:17:22.704Z",
                        "endTime": "2024-06-10T07:18:00.314Z"
                    },
                    {
                        "startTime": "2024-06-10T07:13:40.351Z",
                        "description": "PreparingJob",
                        "endTime": "2024-06-10T07:13:40.353Z"
                    },
                    {
                        "description": "Worker \"google-pipelines-worker-4e6da4fb40d598250302b50bb6c4e950\" assigned in \"us-central1-b\" on a \"custom-1-4096\" machine",
                        "endTime": "2024-06-10T07:15:02.385Z",
                        "startTime": "2024-06-10T07:14:10.821Z"
                    },
                    {
                        "startTime": "2024-06-10T07:21:08.093Z",
                        "description": "Worker released",
                        "endTime": "2024-06-10T07:21:08.093Z"
                    },
                    {
                        "startTime": "2024-06-10T07:21:08.093Z",
                        "description": "Complete in GCE / Cromwell Poll Interval",
                        "endTime": "2024-06-10T07:22:24.039Z"
                    },
                    {
                        "startTime": "2024-06-10T07:13:58.972Z",
                        "description": "waiting for quota",
                        "endTime": "2024-06-10T07:14:10.821Z"
                    },
                    {
                        "description": "ContainerSetup",
                        "startTime": "2024-06-10T07:17:17.327Z",
                        "endTime": "2024-06-10T07:17:21.404Z"
                    },
                    {
                        "description": "Delocalization",
                        "startTime": "2024-06-10T07:20:14.522Z",
                        "endTime": "2024-06-10T07:21:08.093Z"
                    },
                    {
                        "description": "UserAction",
                        "startTime": "2024-06-10T07:18:00.314Z",
                        "endTime": "2024-06-10T07:20:14.522Z"
                    },
                    {
                        "startTime": "2024-06-10T07:13:40.351Z",
                        "description": "WaitingForValueStore",
                        "endTime": "2024-06-10T07:13:40.351Z"
                    },
                    {
                        "startTime": "2024-06-10T07:13:43.535Z",
                        "description": "RunningJob",
                        "endTime": "2024-06-10T07:13:58.972Z"
                    },
                    {
                        "startTime": "2024-06-10T07:22:24.364Z",
                        "description": "UpdatingJobStore",
                        "endTime": "2024-06-10T07:22:25.318Z"
                    },
                    {
                        "description": "Pulling \"gcr.io/google.com/cloudsdktool/cloud-sdk:276.0.0-slim\"",
                        "startTime": "2024-06-10T07:15:02.385Z",
                        "endTime": "2024-06-10T07:15:40.681Z"
                    },
                    {
                        "startTime": "2024-06-10T07:13:35.871Z",
                        "description": "RequestingExecutionToken",
                        "endTime": "2024-06-10T07:13:40.351Z"
                    },
                    {
                        "startTime": "2024-06-10T07:22:24.039Z",
                        "description": "UpdatingCallCache",
                        "endTime": "2024-06-10T07:22:24.364Z"
                    },
                    {
                        "startTime": "2024-06-10T07:13:35.871Z",
                        "endTime": "2024-06-10T07:13:35.871Z",
                        "description": "Pending"
                    }
                ],
                "backendLogs": {
                    "log": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-idr_pr/shard-0/idr_pr-0.log"
                },
                "start": "2024-06-10T07:13:35.871Z"
            }
        ],
        "atac.annot_enrich": [
            {
                "preemptible": false,
                "executionStatus": "Done",
                "stdout": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-annot_enrich/shard-0/stdout",
                "backendStatus": "Success",
                "compressedDockerSize": 963996198,
                "commandLine": "set -e\npython3 $(which encode_task_annot_enrich.py) \\\n    --ta /cromwell_root/neuro-variants/data/processed/domcke_2020/tagaligns/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.tagAlign.gz \\\n    --blacklist /cromwell_root/neuro-variants/data/pipeline_genome_data/hg19/wgEncodeDacMapabilityConsensusExcludable.bed.gz \\\n    --dnase /cromwell_root/neuro-variants/data/pipeline_genome_data/hg19/ataqc/reg2map_honeybadger2_dnase_all_p10_ucsc.bed.gz \\\n    --prom /cromwell_root/neuro-variants/data/pipeline_genome_data/hg19/ataqc/reg2map_honeybadger2_dnase_prom_p2.bed.gz \\\n    --enh /cromwell_root/neuro-variants/data/pipeline_genome_data/hg19/ataqc/reg2map_honeybadger2_dnase_enh_p2.bed.gz",
                "shardIndex": 0,
                "jes": {
                    "endpointUrl": "https://lifesciences.googleapis.com/",
                    "machineType": "custom-2-8192",
                    "googleProject": "hai-gcp-genomic",
                    "monitoringScript": "gs://caper-data/scripts/resource_monitor/resource_monitor.sh",
                    "executionBucket": "gs://neuro-variants/data/processed/atac_pipeline_outputs/",
                    "zone": "us-central1-b",
                    "instanceName": "google-pipelines-worker-2582934785c864d2ec8bd2768a7c67f6"
                },
                "outputs": {
                    "annot_enrich_qc": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-annot_enrich/shard-0/glob-5dc2759e1f2ec1b9d52ef565e3202c4e/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.annot_enrich.qc"
                },
                "runtimeAttributes": {
                    "preemptible": "0",
                    "failOnStderr": "false",
                    "bootDiskSizeGb": "10",
                    "disks": "local-disk 50 SSD",
                    "continueOnReturnCode": "0",
                    "docker": "encodedcc/atac-seq-pipeline:v1.10.0",
                    "maxRetries": "1",
                    "cpu": "1",
                    "cpuMin": "1",
                    "noAddress": "false",
                    "zones": "us-central1-b",
                    "memoryMin": "2 GB",
                    "memory": "8 GB"
                },
                "callCaching": {
                    "allowResultReuse": true,
                    "hit": false,
                    "result": "Cache Miss",
                    "hashes": {
                        "output count": "C4CA4238A0B923820DCC509A6F75849B",
                        "runtime attribute": {
                            "docker": "B1F36DD8C0A09090242A283D75E4277C",
                            "failOnStderr": "68934A3E9455FA72420237EB05902327",
                            "continueOnReturnCode": "CFCD208495D565EF66E7DFF9F98764DA"
                        },
                        "output expression": {
                            "File annot_enrich_qc": "AF5D1EB7C4AFEB55E4082E50C1233E64"
                        },
                        "input count": "E4DA3B7FBBCE2345D7772B0674A318D5",
                        "backend name": "50F66ECBC45488EE5826941BFBC50411",
                        "command template": "D086A900BBF173342053BD66CCE61962",
                        "input": {
                            "File blacklist": "an7FXQ==",
                            "File dnase": "rH64Gg==",
                            "File ta": "/AXxtQ==",
                            "File enh": "ISMAng==",
                            "File prom": "49EYKA=="
                        }
                    },
                    "effectiveCallCachingMode": "ReadAndWriteCache"
                },
                "inputs": {
                    "blacklist": "gs://neuro-variants/data/pipeline_genome_data/hg19/wgEncodeDacMapabilityConsensusExcludable.bed.gz",
                    "enh": "gs://neuro-variants/data/pipeline_genome_data/hg19/ataqc/reg2map_honeybadger2_dnase_enh_p2.bed.gz",
                    "ta": "gs://neuro-variants/data/processed/domcke_2020/tagaligns/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.tagAlign.gz",
                    "prom": "gs://neuro-variants/data/pipeline_genome_data/hg19/ataqc/reg2map_honeybadger2_dnase_prom_p2.bed.gz",
                    "dnase": "gs://neuro-variants/data/pipeline_genome_data/hg19/ataqc/reg2map_honeybadger2_dnase_all_p10_ucsc.bed.gz"
                },
                "backendLabels": {
                    "cromwell-workflow-id": "cromwell-647e4f46-7583-4700-ba4e-bf59c94b2872",
                    "wdl-task-name": "annot-enrich"
                },
                "returnCode": 0,
                "labels": {
                    "cromwell-workflow-id": "cromwell-647e4f46-7583-4700-ba4e-bf59c94b2872",
                    "wdl-task-name": "annot_enrich"
                },
                "jobId": "projects/886987709752/locations/us-central1/operations/10067438776381732260",
                "monitoringLog": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-annot_enrich/shard-0/monitoring.log",
                "backend": "gcp",
                "end": "2024-06-10T07:10:46.276Z",
                "dockerImageUsed": "encodedcc/atac-seq-pipeline@sha256:b29984294619e9c1a1a9814d6a37a375d51b05beba481302246698b4b903ee30",
                "stderr": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-annot_enrich/shard-0/stderr",
                "callRoot": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-annot_enrich/shard-0",
                "attempt": 1,
                "executionEvents": [
                    {
                        "endTime": "2024-06-10T07:00:12.371Z",
                        "startTime": "2024-06-10T06:59:41.529Z",
                        "description": "Worker \"google-pipelines-worker-2582934785c864d2ec8bd2768a7c67f6\" assigned in \"us-central1-b\" on a \"custom-2-8192\" machine"
                    },
                    {
                        "description": "Pulling \"gcr.io/google.com/cloudsdktool/cloud-sdk:276.0.0-slim\"",
                        "startTime": "2024-06-10T07:00:12.371Z",
                        "endTime": "2024-06-10T07:00:56.909Z"
                    },
                    {
                        "startTime": "2024-06-10T06:59:00.352Z",
                        "description": "CallCacheReading",
                        "endTime": "2024-06-10T06:59:03.551Z"
                    },
                    {
                        "startTime": "2024-06-10T06:59:00.350Z",
                        "description": "WaitingForValueStore",
                        "endTime": "2024-06-10T06:59:00.350Z"
                    },
                    {
                        "description": "Worker released",
                        "endTime": "2024-06-10T07:08:19.828Z",
                        "startTime": "2024-06-10T07:08:19.828Z"
                    },
                    {
                        "startTime": "2024-06-10T06:59:30.705Z",
                        "endTime": "2024-06-10T06:59:41.529Z",
                        "description": "waiting for quota"
                    },
                    {
                        "description": "ContainerSetup",
                        "startTime": "2024-06-10T07:02:54.687Z",
                        "endTime": "2024-06-10T07:02:57.898Z"
                    },
                    {
                        "startTime": "2024-06-10T06:58:55.542Z",
                        "description": "RequestingExecutionToken",
                        "endTime": "2024-06-10T06:59:00.350Z"
                    },
                    {
                        "description": "UserAction",
                        "startTime": "2024-06-10T07:03:29.828Z",
                        "endTime": "2024-06-10T07:07:59.758Z"
                    },
                    {
                        "description": "Delocalization",
                        "startTime": "2024-06-10T07:07:59.758Z",
                        "endTime": "2024-06-10T07:08:19.828Z"
                    },
                    {
                        "description": "RunningJob",
                        "endTime": "2024-06-10T06:59:30.705Z",
                        "startTime": "2024-06-10T06:59:03.551Z"
                    },
                    {
                        "description": "Localization",
                        "startTime": "2024-06-10T07:02:58.813Z",
                        "endTime": "2024-06-10T07:03:29.828Z"
                    },
                    {
                        "description": "Pulling \"encodedcc/atac-seq-pipeline@sha256:b29984294619e9c1a1a9814d6a37a375d51b05beba481302246698b4b903ee30\"",
                        "startTime": "2024-06-10T07:00:56.909Z",
                        "endTime": "2024-06-10T07:02:54.687Z"
                    },
                    {
                        "startTime": "2024-06-10T06:59:00.350Z",
                        "description": "PreparingJob",
                        "endTime": "2024-06-10T06:59:00.352Z"
                    },
                    {
                        "startTime": "2024-06-10T06:58:55.542Z",
                        "description": "Pending",
                        "endTime": "2024-06-10T06:58:55.542Z"
                    },
                    {
                        "startTime": "2024-06-10T07:10:45.324Z",
                        "endTime": "2024-06-10T07:10:46.276Z",
                        "description": "UpdatingJobStore"
                    },
                    {
                        "startTime": "2024-06-10T07:10:43.595Z",
                        "endTime": "2024-06-10T07:10:45.324Z",
                        "description": "UpdatingCallCache"
                    },
                    {
                        "description": "Background",
                        "startTime": "2024-06-10T07:02:57.898Z",
                        "endTime": "2024-06-10T07:02:58.490Z"
                    },
                    {
                        "endTime": "2024-06-10T07:10:43.595Z",
                        "startTime": "2024-06-10T07:08:19.828Z",
                        "description": "Complete in GCE / Cromwell Poll Interval"
                    }
                ],
                "backendLogs": {
                    "log": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-annot_enrich/shard-0/annot_enrich-0.log"
                },
                "start": "2024-06-10T06:58:55.542Z"
            }
        ],
        "atac.overlap_pr": [
            {
                "preemptible": false,
                "executionStatus": "Done",
                "stdout": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-overlap_pr/shard-0/stdout",
                "backendStatus": "Success",
                "compressedDockerSize": 963996198,
                "commandLine": "set -e\ntouch null \npython3 $(which encode_task_overlap.py) \\\n    /cromwell_root/neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak_pr1/shard-0/glob-254907fcd430d7e6c9bf67ac4585adb4/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pr1.pval0.01.300K.narrowPeak.gz /cromwell_root/neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak_pr2/shard-0/glob-254907fcd430d7e6c9bf67ac4585adb4/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pr2.pval0.01.300K.narrowPeak.gz /cromwell_root/neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak/shard-0/glob-254907fcd430d7e6c9bf67ac4585adb4/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pval0.01.300K.narrowPeak.gz \\\n    --prefix rep1-pr1_vs_rep1-pr2 \\\n    --peak-type narrowPeak \\\n    --chrsz /cromwell_root/neuro-variants/data/pipeline_genome_data/hg19/hg19.chrom.sizes \\\n    --blacklist /cromwell_root/neuro-variants/data/pipeline_genome_data/hg19/wgEncodeDacMapabilityConsensusExcludable.bed.gz \\\n    --nonamecheck \\\n    --regex-bfilt-peak-chr-name 'chr[\\dXY]+' \\\n    --ta /cromwell_root/neuro-variants/data/processed/domcke_2020/tagaligns/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.tagAlign.gz",
                "shardIndex": 0,
                "jes": {
                    "endpointUrl": "https://lifesciences.googleapis.com/",
                    "machineType": "custom-1-4096",
                    "googleProject": "hai-gcp-genomic",
                    "monitoringScript": "gs://caper-data/scripts/resource_monitor/resource_monitor.sh",
                    "executionBucket": "gs://neuro-variants/data/processed/atac_pipeline_outputs/",
                    "zone": "us-central1-b",
                    "instanceName": "google-pipelines-worker-3ca82ec1b77ad8436f39d788c808e466"
                },
                "outputs": {
                    "bfilt_overlap_peak": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-overlap_pr/shard-0/glob-2e6c87fc90e45fa5dbda88934d454cd3/rep1-pr1_vs_rep1-pr2.overlap.bfilt.narrowPeak.gz",
                    "bfilt_overlap_peak_hammock": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-overlap_pr/shard-0/glob-08ed81b9c4c9ccf6c3692d9ea29b11e0/rep1-pr1_vs_rep1-pr2.overlap.bfilt.narrowPeak.hammock.gz",
                    "frip_qc": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-overlap_pr/shard-0/glob-156b027b56a0fc9230201b265d9f4bf4/rep1-pr1_vs_rep1-pr2.overlap.bfilt.frip.qc",
                    "bfilt_overlap_peak_starch": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-overlap_pr/shard-0/glob-c803fbc8adf0005e2a0b14b4815c0106/rep1-pr1_vs_rep1-pr2.overlap.bfilt.narrowPeak.starch",
                    "overlap_peak": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-overlap_pr/shard-0/glob-254907fcd430d7e6c9bf67ac4585adb4/rep1-pr1_vs_rep1-pr2.overlap.narrowPeak.gz",
                    "bfilt_overlap_peak_bb": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-overlap_pr/shard-0/glob-155eada107f68a2195912a39f5dee4bc/rep1-pr1_vs_rep1-pr2.overlap.bfilt.narrowPeak.bb",
                    "bfilt_overlap_peak_hammock_tbi": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-overlap_pr/shard-0/glob-08ed81b9c4c9ccf6c3692d9ea29b11e0/rep1-pr1_vs_rep1-pr2.overlap.bfilt.narrowPeak.hammock.gz.tbi"
                },
                "runtimeAttributes": {
                    "preemptible": "0",
                    "failOnStderr": "false",
                    "bootDiskSizeGb": "10",
                    "disks": "local-disk 500 SSD",
                    "continueOnReturnCode": "0",
                    "docker": "encodedcc/atac-seq-pipeline:v1.10.0",
                    "maxRetries": "1",
                    "cpu": "1",
                    "cpuMin": "1",
                    "noAddress": "false",
                    "zones": "us-central1-b",
                    "memoryMin": "2 GB",
                    "memory": "4 GB"
                },
                "callCaching": {
                    "allowResultReuse": true,
                    "hit": false,
                    "result": "Cache Miss",
                    "hashes": {
                        "output count": "8F14E45FCEEA167A5A36DEDD4BEA2543",
                        "runtime attribute": {
                            "failOnStderr": "68934A3E9455FA72420237EB05902327",
                            "docker": "B1F36DD8C0A09090242A283D75E4277C",
                            "continueOnReturnCode": "CFCD208495D565EF66E7DFF9F98764DA"
                        },
                        "output expression": {
                            "File bfilt_overlap_peak_starch": "68A471BB69D3C769B6EFD75D8BA384BB",
                            "File overlap_peak": "2B4C2D30823B687890B9ABBFA7507878",
                            "File frip_qc": "FFBDC0CF158D56A15AA0F87CB842D5C8",
                            "File bfilt_overlap_peak_hammock": "00070404F73DBACD1B0710271BCB785E",
                            "File bfilt_overlap_peak_bb": "548824A543F147DE9E2FDA4F0AEBA711",
                            "File bfilt_overlap_peak_hammock_tbi": "1D7A1D8E68AE180F84BF00427775A2B8",
                            "File bfilt_overlap_peak": "9AA37E04B33FA2979A74B09B286645DC"
                        },
                        "input count": "45C48CCE2E2D7FBDEA1AFC51C7C6AD26",
                        "backend name": "50F66ECBC45488EE5826941BFBC50411",
                        "command template": "32C016665A9D930125E090A2D2CE9F25",
                        "input": {
                            "File peak2": "tWIM+A==",
                            "File blacklist": "an7FXQ==",
                            "File chrsz": "9qqSMA==",
                            "String regex_bfilt_peak_chr_name": "C742E46BA2D35AFA2B5C0BBCB7D31CE7",
                            "File peak_pooled": "5dheoA==",
                            "File ta": "/AXxtQ==",
                            "String prefix": "D3B9D7856D560D6435DB69A1320959A6",
                            "String peak_type": "9F6EB79808F888389F5E27EE57FF2B53",
                            "File peak1": "7ASMKA=="
                        }
                    },
                    "effectiveCallCachingMode": "ReadAndWriteCache"
                },
                "inputs": {
                    "blacklist": "gs://neuro-variants/data/pipeline_genome_data/hg19/wgEncodeDacMapabilityConsensusExcludable.bed.gz",
                    "peak_type": "narrowPeak",
                    "ta": "gs://neuro-variants/data/processed/domcke_2020/tagaligns/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.tagAlign.gz",
                    "prefix": "rep1-pr1_vs_rep1-pr2",
                    "peak2": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak_pr2/shard-0/glob-254907fcd430d7e6c9bf67ac4585adb4/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pr2.pval0.01.300K.narrowPeak.gz",
                    "chrsz": "gs://neuro-variants/data/pipeline_genome_data/hg19/hg19.chrom.sizes",
                    "peak1": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak_pr1/shard-0/glob-254907fcd430d7e6c9bf67ac4585adb4/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pr1.pval0.01.300K.narrowPeak.gz",
                    "regex_bfilt_peak_chr_name": "chr[\\dXY]+",
                    "peak_pooled": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak/shard-0/glob-254907fcd430d7e6c9bf67ac4585adb4/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pval0.01.300K.narrowPeak.gz"
                },
                "backendLabels": {
                    "wdl-call-alias": "overlap-pr",
                    "wdl-task-name": "overlap",
                    "cromwell-workflow-id": "cromwell-647e4f46-7583-4700-ba4e-bf59c94b2872"
                },
                "returnCode": 0,
                "labels": {
                    "wdl-call-alias": "overlap_pr",
                    "wdl-task-name": "overlap",
                    "cromwell-workflow-id": "cromwell-647e4f46-7583-4700-ba4e-bf59c94b2872"
                },
                "jobId": "projects/886987709752/locations/us-central1/operations/11340646654347623834",
                "monitoringLog": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-overlap_pr/shard-0/monitoring.log",
                "backend": "gcp",
                "end": "2024-06-10T07:20:46.305Z",
                "dockerImageUsed": "encodedcc/atac-seq-pipeline@sha256:b29984294619e9c1a1a9814d6a37a375d51b05beba481302246698b4b903ee30",
                "stderr": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-overlap_pr/shard-0/stderr",
                "callRoot": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-overlap_pr/shard-0",
                "attempt": 1,
                "executionEvents": [
                    {
                        "startTime": "2024-06-10T07:20:43.855Z",
                        "description": "UpdatingCallCache",
                        "endTime": "2024-06-10T07:20:45.352Z"
                    },
                    {
                        "endTime": "2024-06-10T07:13:35.871Z",
                        "description": "Pending",
                        "startTime": "2024-06-10T07:13:35.871Z"
                    },
                    {
                        "description": "Background",
                        "startTime": "2024-06-10T07:17:06.330Z",
                        "endTime": "2024-06-10T07:17:06.828Z"
                    },
                    {
                        "startTime": "2024-06-10T07:13:58.975Z",
                        "description": "waiting for quota",
                        "endTime": "2024-06-10T07:14:10.821Z"
                    },
                    {
                        "description": "Delocalization",
                        "startTime": "2024-06-10T07:19:01.833Z",
                        "endTime": "2024-06-10T07:19:46.580Z"
                    },
                    {
                        "startTime": "2024-06-10T07:13:38.546Z",
                        "description": "RunningJob",
                        "endTime": "2024-06-10T07:13:58.975Z"
                    },
                    {
                        "startTime": "2024-06-10T07:20:45.352Z",
                        "description": "UpdatingJobStore",
                        "endTime": "2024-06-10T07:20:46.305Z"
                    },
                    {
                        "description": "Pulling \"encodedcc/atac-seq-pipeline@sha256:b29984294619e9c1a1a9814d6a37a375d51b05beba481302246698b4b903ee30\"",
                        "startTime": "2024-06-10T07:15:21.392Z",
                        "endTime": "2024-06-10T07:17:02.012Z"
                    },
                    {
                        "description": "Pulling \"gcr.io/google.com/cloudsdktool/cloud-sdk:276.0.0-slim\"",
                        "startTime": "2024-06-10T07:14:43.423Z",
                        "endTime": "2024-06-10T07:15:21.392Z"
                    },
                    {
                        "startTime": "2024-06-10T07:19:46.580Z",
                        "description": "Complete in GCE / Cromwell Poll Interval",
                        "endTime": "2024-06-10T07:20:43.855Z"
                    },
                    {
                        "description": "ContainerSetup",
                        "startTime": "2024-06-10T07:17:02.012Z",
                        "endTime": "2024-06-10T07:17:05.887Z"
                    },
                    {
                        "description": "Localization",
                        "startTime": "2024-06-10T07:17:07.389Z",
                        "endTime": "2024-06-10T07:17:46.781Z"
                    },
                    {
                        "startTime": "2024-06-10T07:13:38.350Z",
                        "description": "WaitingForValueStore",
                        "endTime": "2024-06-10T07:13:38.350Z"
                    },
                    {
                        "description": "Worker \"google-pipelines-worker-3ca82ec1b77ad8436f39d788c808e466\" assigned in \"us-central1-b\" on a \"custom-1-4096\" machine",
                        "endTime": "2024-06-10T07:14:43.423Z",
                        "startTime": "2024-06-10T07:14:10.821Z"
                    },
                    {
                        "endTime": "2024-06-10T07:13:38.546Z",
                        "description": "CallCacheReading",
                        "startTime": "2024-06-10T07:13:38.352Z"
                    },
                    {
                        "startTime": "2024-06-10T07:13:38.350Z",
                        "description": "PreparingJob",
                        "endTime": "2024-06-10T07:13:38.352Z"
                    },
                    {
                        "startTime": "2024-06-10T07:13:35.871Z",
                        "description": "RequestingExecutionToken",
                        "endTime": "2024-06-10T07:13:38.350Z"
                    },
                    {
                        "startTime": "2024-06-10T07:19:46.580Z",
                        "description": "Worker released",
                        "endTime": "2024-06-10T07:19:46.580Z"
                    },
                    {
                        "description": "UserAction",
                        "startTime": "2024-06-10T07:17:46.781Z",
                        "endTime": "2024-06-10T07:19:01.833Z"
                    }
                ],
                "backendLogs": {
                    "log": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-overlap_pr/shard-0/overlap_pr-0.log"
                },
                "start": "2024-06-10T07:13:35.871Z"
            }
        ],
        "atac.macs2_signal_track": [
            {
                "preemptible": false,
                "executionStatus": "Done",
                "stdout": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-macs2_signal_track/shard-0/stdout",
                "backendStatus": "Success",
                "compressedDockerSize": 963996198,
                "commandLine": "set -e\npython3 $(which encode_task_macs2_signal_track_atac.py) \\\n    /cromwell_root/neuro-variants/data/processed/domcke_2020/tagaligns/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.tagAlign.gz \\\n    --gensz hs \\\n    --chrsz /cromwell_root/neuro-variants/data/pipeline_genome_data/hg19/hg19.chrom.sizes \\\n    --pval-thresh 0.01 \\\n    --smooth-win 150 \\\n    --mem-gb 6.139801722019911",
                "shardIndex": 0,
                "jes": {
                    "endpointUrl": "https://lifesciences.googleapis.com/",
                    "machineType": "custom-1-6400",
                    "googleProject": "hai-gcp-genomic",
                    "monitoringScript": "gs://caper-data/scripts/resource_monitor/resource_monitor.sh",
                    "executionBucket": "gs://neuro-variants/data/processed/atac_pipeline_outputs/",
                    "zone": "us-central1-b",
                    "instanceName": "google-pipelines-worker-9a96677b1c3134f6d7ad986fbff54c47"
                },
                "outputs": {
                    "pval_bw": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-macs2_signal_track/shard-0/glob-7ab0340dfeb10ca109917cbdcc568548/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pval.signal.bigwig",
                    "fc_bw": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-macs2_signal_track/shard-0/glob-8876d8ced974dc46a0c7a4fac20a3a95/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.fc.signal.bigwig"
                },
                "runtimeAttributes": {
                    "preemptible": "0",
                    "failOnStderr": "false",
                    "bootDiskSizeGb": "10",
                    "disks": "local-disk 34 SSD",
                    "continueOnReturnCode": "0",
                    "docker": "encodedcc/atac-seq-pipeline:v1.10.0",
                    "maxRetries": "1",
                    "cpu": "1",
                    "cpuMin": "1",
                    "noAddress": "false",
                    "zones": "us-central1-b",
                    "memoryMin": "2 GB",
                    "memory": "6.139801722019911 GB"
                },
                "callCaching": {
                    "allowResultReuse": true,
                    "hit": false,
                    "result": "Cache Miss",
                    "hashes": {
                        "output count": "C81E728D9D4C2F636F067F89CC14862C",
                        "runtime attribute": {
                            "failOnStderr": "68934A3E9455FA72420237EB05902327",
                            "docker": "B1F36DD8C0A09090242A283D75E4277C",
                            "continueOnReturnCode": "CFCD208495D565EF66E7DFF9F98764DA"
                        },
                        "output expression": {
                            "File fc_bw": "30CA1AC0155EEF77A0D24129EB93BDE2",
                            "File pval_bw": "7F77D035692813E00FB136E1FC27603B"
                        },
                        "input count": "6512BD43D9CAA6E02C990B0A82652DCA",
                        "backend name": "50F66ECBC45488EE5826941BFBC50411",
                        "command template": "335A6B91D20A78105BF0CB53A675CB57",
                        "input": {
                            "Float pval_thresh": "04817EFD11C15364A6EC239780038862",
                            "Int time_hr": "1FF1DE774005F8DA13F42943881C655F",
                            "Float input_file_size_gb": "6BCF452ABBF4E62C086CE4EB45A2F6D1",
                            "Float disk_factor": "8EE5D21B272D43A875504F3E5845E141",
                            "File chrsz": "9qqSMA==",
                            "Float mem_factor": "195863009FFA903E83AD7FD7E7DB63B1",
                            "Float mem_gb": "550EBAA73FBEFC98938587A47FCA34F1",
                            "File ta": "/AXxtQ==",
                            "String gensz": "9D9DC598642ACC744E92C2B722799B98",
                            "Int smooth_win": "7EF605FC8DBA5425D6965FBD4C8FBE1F",
                            "Int disk_gb": "E369853DF766FA44E1ED0FF613F563BD"
                        }
                    },
                    "effectiveCallCachingMode": "ReadAndWriteCache"
                },
                "inputs": {
                    "ta": "gs://neuro-variants/data/processed/domcke_2020/tagaligns/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.tagAlign.gz",
                    "mem_factor": 12.0,
                    "input_file_size_gb": 0.1783168101683259,
                    "time_hr": 24,
                    "pval_thresh": 0.01,
                    "chrsz": "gs://neuro-variants/data/pipeline_genome_data/hg19/hg19.chrom.sizes",
                    "disk_factor": 80.0,
                    "disk_gb": 34,
                    "gensz": "hs",
                    "mem_gb": 6.139801722019911,
                    "smooth_win": 150
                },
                "backendLabels": {
                    "wdl-task-name": "macs2-signal-track",
                    "cromwell-workflow-id": "cromwell-647e4f46-7583-4700-ba4e-bf59c94b2872"
                },
                "returnCode": 0,
                "labels": {
                    "cromwell-workflow-id": "cromwell-647e4f46-7583-4700-ba4e-bf59c94b2872",
                    "wdl-task-name": "macs2_signal_track"
                },
                "jobId": "projects/886987709752/locations/us-central1/operations/11841276526886986871",
                "monitoringLog": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-macs2_signal_track/shard-0/monitoring.log",
                "backend": "gcp",
                "end": "2024-06-10T07:40:16.268Z",
                "dockerImageUsed": "encodedcc/atac-seq-pipeline@sha256:b29984294619e9c1a1a9814d6a37a375d51b05beba481302246698b4b903ee30",
                "stderr": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-macs2_signal_track/shard-0/stderr",
                "callRoot": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-macs2_signal_track/shard-0",
                "attempt": 1,
                "executionEvents": [
                    {
                        "description": "Pulling \"gcr.io/google.com/cloudsdktool/cloud-sdk:276.0.0-slim\"",
                        "startTime": "2024-06-10T07:00:26.792Z",
                        "endTime": "2024-06-10T07:01:05.782Z"
                    },
                    {
                        "startTime": "2024-06-10T07:39:47.544Z",
                        "description": "Worker released",
                        "endTime": "2024-06-10T07:39:47.544Z"
                    },
                    {
                        "description": "Pulling \"encodedcc/atac-seq-pipeline@sha256:b29984294619e9c1a1a9814d6a37a375d51b05beba481302246698b4b903ee30\"",
                        "startTime": "2024-06-10T07:01:05.782Z",
                        "endTime": "2024-06-10T07:02:47.685Z"
                    },
                    {
                        "description": "UpdatingJobStore",
                        "endTime": "2024-06-10T07:40:16.268Z",
                        "startTime": "2024-06-10T07:40:15.303Z"
                    },
                    {
                        "endTime": "2024-06-10T06:58:53.532Z",
                        "startTime": "2024-06-10T06:58:53.530Z",
                        "description": "CallCacheReading"
                    },
                    {
                        "startTime": "2024-06-10T06:58:50.350Z",
                        "description": "WaitingForValueStore",
                        "endTime": "2024-06-10T06:58:50.350Z"
                    },
                    {
                        "startTime": "2024-06-10T06:58:49.422Z",
                        "description": "RequestingExecutionToken",
                        "endTime": "2024-06-10T06:58:50.350Z"
                    },
                    {
                        "description": "Delocalization",
                        "startTime": "2024-06-10T07:39:02.653Z",
                        "endTime": "2024-06-10T07:39:47.544Z"
                    },
                    {
                        "description": "Localization",
                        "startTime": "2024-06-10T07:02:53.308Z",
                        "endTime": "2024-06-10T07:03:26.396Z"
                    },
                    {
                        "startTime": "2024-06-10T06:58:50.350Z",
                        "description": "PreparingJob",
                        "endTime": "2024-06-10T06:58:53.530Z"
                    },
                    {
                        "description": "ContainerSetup",
                        "startTime": "2024-06-10T07:02:47.685Z",
                        "endTime": "2024-06-10T07:02:51.770Z"
                    },
                    {
                        "startTime": "2024-06-10T06:58:53.532Z",
                        "description": "RunningJob",
                        "endTime": "2024-06-10T06:58:57.305Z"
                    },
                    {
                        "description": "UserAction",
                        "startTime": "2024-06-10T07:03:26.396Z",
                        "endTime": "2024-06-10T07:39:02.653Z"
                    },
                    {
                        "startTime": "2024-06-10T06:58:57.305Z",
                        "description": "waiting for quota",
                        "endTime": "2024-06-10T06:59:07.503Z"
                    },
                    {
                        "startTime": "2024-06-10T07:40:13.663Z",
                        "description": "UpdatingCallCache",
                        "endTime": "2024-06-10T07:40:15.303Z"
                    },
                    {
                        "startTime": "2024-06-10T07:39:47.544Z",
                        "description": "Complete in GCE / Cromwell Poll Interval",
                        "endTime": "2024-06-10T07:40:13.663Z"
                    },
                    {
                        "startTime": "2024-06-10T06:58:49.422Z",
                        "endTime": "2024-06-10T06:58:49.422Z",
                        "description": "Pending"
                    },
                    {
                        "description": "Worker \"google-pipelines-worker-9a96677b1c3134f6d7ad986fbff54c47\" assigned in \"us-central1-b\" on a \"custom-1-6400\" machine",
                        "endTime": "2024-06-10T07:00:26.792Z",
                        "startTime": "2024-06-10T06:59:07.503Z"
                    },
                    {
                        "description": "Background",
                        "startTime": "2024-06-10T07:02:51.770Z",
                        "endTime": "2024-06-10T07:02:53.308Z"
                    }
                ],
                "backendLogs": {
                    "log": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-macs2_signal_track/shard-0/macs2_signal_track-0.log"
                },
                "start": "2024-06-10T06:58:49.422Z"
            }
        ],
        "atac.call_peak_pr1": [
            {
                "preemptible": false,
                "executionStatus": "Done",
                "stdout": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak_pr1/shard-0/stdout",
                "backendStatus": "Success",
                "compressedDockerSize": 963996198,
                "commandLine": "set -e\n\nif [ 'macs2' == 'macs2' ]; then\n    python3 $(which encode_task_macs2_atac.py) \\\n        /cromwell_root/neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-spr/shard-0/glob-478c0ad30d0d033ce59a75ef84dab32e/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pr1.tagAlign.gz \\\n        --gensz hs \\\n        --chrsz /cromwell_root/neuro-variants/data/pipeline_genome_data/hg19/hg19.chrom.sizes \\\n        --cap-num-peak 300000 \\\n        --pval-thresh 0.01 \\\n        --smooth-win 150 \\\n        --mem-gb 4.348339203745127\nfi\n\npython3 $(which encode_task_post_call_peak_atac.py) \\\n    $(ls *Peak.gz) \\\n    --ta /cromwell_root/neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-spr/shard-0/glob-478c0ad30d0d033ce59a75ef84dab32e/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pr1.tagAlign.gz \\\n    --regex-bfilt-peak-chr-name 'chr[\\dXY]+' \\\n    --chrsz /cromwell_root/neuro-variants/data/pipeline_genome_data/hg19/hg19.chrom.sizes \\\n    --peak-type narrowPeak \\\n    --blacklist /cromwell_root/neuro-variants/data/pipeline_genome_data/hg19/wgEncodeDacMapabilityConsensusExcludable.bed.gz",
                "shardIndex": 0,
                "jes": {
                    "endpointUrl": "https://lifesciences.googleapis.com/",
                    "machineType": "custom-1-4608",
                    "googleProject": "hai-gcp-genomic",
                    "monitoringScript": "gs://caper-data/scripts/resource_monitor/resource_monitor.sh",
                    "executionBucket": "gs://neuro-variants/data/processed/atac_pipeline_outputs/",
                    "zone": "us-central1-b",
                    "instanceName": "google-pipelines-worker-bc3def102d0b0362d8c67a9e85da1284"
                },
                "outputs": {
                    "peak_region_size_plot": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak_pr1/shard-0/glob-e2c73ffa35e91a202da536e2007c07a4/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pr1.pval0.01.300K.bfilt.peak_region_size.png",
                    "bfilt_peak": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak_pr1/shard-0/glob-2e6c87fc90e45fa5dbda88934d454cd3/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pr1.pval0.01.300K.bfilt.narrowPeak.gz",
                    "peak_region_size_qc": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak_pr1/shard-0/glob-9826117ee260a5b864d958fe9ca989b0/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pr1.pval0.01.300K.bfilt.peak_region_size.qc",
                    "bfilt_peak_hammock": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak_pr1/shard-0/glob-08ed81b9c4c9ccf6c3692d9ea29b11e0/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pr1.pval0.01.300K.bfilt.narrowPeak.hammock.gz",
                    "bfilt_peak_bb": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak_pr1/shard-0/glob-155eada107f68a2195912a39f5dee4bc/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pr1.pval0.01.300K.bfilt.narrowPeak.bb",
                    "peak": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak_pr1/shard-0/glob-254907fcd430d7e6c9bf67ac4585adb4/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pr1.pval0.01.300K.narrowPeak.gz",
                    "bfilt_peak_starch": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak_pr1/shard-0/glob-c803fbc8adf0005e2a0b14b4815c0106/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pr1.pval0.01.300K.bfilt.narrowPeak.starch",
                    "frip_qc": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak_pr1/shard-0/glob-156b027b56a0fc9230201b265d9f4bf4/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pr1.pval0.01.300K.bfilt.frip.qc",
                    "num_peak_qc": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak_pr1/shard-0/glob-3b1229fa29433fa118c2c80578c3259b/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pr1.pval0.01.300K.bfilt.num_peak.qc",
                    "bfilt_peak_hammock_tbi": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak_pr1/shard-0/glob-08ed81b9c4c9ccf6c3692d9ea29b11e0/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pr1.pval0.01.300K.bfilt.narrowPeak.hammock.gz.tbi"
                },
                "runtimeAttributes": {
                    "preemptible": "0",
                    "failOnStderr": "false",
                    "bootDiskSizeGb": "10",
                    "disks": "local-disk 23 SSD",
                    "continueOnReturnCode": "0",
                    "docker": "encodedcc/atac-seq-pipeline:v1.10.0",
                    "maxRetries": "1",
                    "cpu": "1",
                    "cpuMin": "1",
                    "noAddress": "false",
                    "zones": "us-central1-b",
                    "memoryMin": "2 GB",
                    "memory": "4.348339203745127 GB"
                },
                "callCaching": {
                    "allowResultReuse": true,
                    "hit": false,
                    "result": "Cache Miss",
                    "hashes": {
                        "output count": "D3D9446802A44259755D38E6D163E820",
                        "runtime attribute": {
                            "docker": "B1F36DD8C0A09090242A283D75E4277C",
                            "failOnStderr": "68934A3E9455FA72420237EB05902327",
                            "continueOnReturnCode": "CFCD208495D565EF66E7DFF9F98764DA"
                        },
                        "output expression": {
                            "File bfilt_peak_hammock_tbi": "1D7A1D8E68AE180F84BF00427775A2B8",
                            "File peak_region_size_qc": "720E1A212D4BA14147030C0D6DD8F364",
                            "File bfilt_peak_bb": "548824A543F147DE9E2FDA4F0AEBA711",
                            "File bfilt_peak_hammock": "00070404F73DBACD1B0710271BCB785E",
                            "File bfilt_peak_starch": "68A471BB69D3C769B6EFD75D8BA384BB",
                            "File peak": "2B4C2D30823B687890B9ABBFA7507878",
                            "File frip_qc": "0F4D312A3A9795A96AFD8EE944F523D5",
                            "File peak_region_size_plot": "E22900E42131389FEE2B1E7D06CFCD6B",
                            "File bfilt_peak": "9AA37E04B33FA2979A74B09B286645DC",
                            "File num_peak_qc": "73034CF133263C952B8B89C85DDF60CC"
                        },
                        "input count": "70EFDF2EC9B086079795C442636B55FB",
                        "backend name": "50F66ECBC45488EE5826941BFBC50411",
                        "command template": "55BB5A4C04179BC1D5EAC6990BA1EBE4",
                        "input": {
                            "Float pval_thresh": "04817EFD11C15364A6EC239780038862",
                            "File blacklist": "an7FXQ==",
                            "Int time_hr": "1FF1DE774005F8DA13F42943881C655F",
                            "Float input_file_size_gb": "DBE3BB73A469918CA0258F1EE29D9A09",
                            "Float disk_factor": "5BA1DE412E01037F8843D097DCFAF28A",
                            "File chrsz": "9qqSMA==",
                            "Float mem_factor": "07078A97D66756F213DBCA3E379BF084",
                            "Int cpu": "C81E728D9D4C2F636F067F89CC14862C",
                            "Float mem_gb": "92F62536D4DD65400AD1AA88B4EE330F",
                            "String regex_bfilt_peak_chr_name": "C742E46BA2D35AFA2B5C0BBCB7D31CE7",
                            "File ta": "XKRrsg==",
                            "String gensz": "9D9DC598642ACC744E92C2B722799B98",
                            "String peak_caller": "92FD39F2D5A89AF59D0CC6A6D3E98FE9",
                            "Int smooth_win": "7EF605FC8DBA5425D6965FBD4C8FBE1F",
                            "Int disk_gb": "37693CFC748049E45D87B8C7D8B9AACD",
                            "Int cap_num_peak": "1DED704CE9BA546ACC563F4C9EF0EB52",
                            "String peak_type": "9F6EB79808F888389F5E27EE57FF2B53"
                        }
                    },
                    "effectiveCallCachingMode": "ReadAndWriteCache"
                },
                "inputs": {
                    "blacklist": "gs://neuro-variants/data/pipeline_genome_data/hg19/wgEncodeDacMapabilityConsensusExcludable.bed.gz",
                    "peak_type": "narrowPeak",
                    "ta": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-spr/shard-0/glob-478c0ad30d0d033ce59a75ef84dab32e/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pr1.tagAlign.gz",
                    "mem_factor": 4.0,
                    "cap_num_peak": 300000,
                    "input_file_size_gb": 0.08708480093628168,
                    "time_hr": 24,
                    "pval_thresh": 0.01,
                    "chrsz": "gs://neuro-variants/data/pipeline_genome_data/hg19/hg19.chrom.sizes",
                    "disk_factor": 30.0,
                    "disk_gb": 23,
                    "gensz": "hs",
                    "regex_bfilt_peak_chr_name": "chr[\\dXY]+",
                    "cpu": 2,
                    "mem_gb": 4.348339203745127,
                    "peak_caller": "macs2",
                    "smooth_win": 150
                },
                "backendLabels": {
                    "wdl-task-name": "call-peak",
                    "cromwell-workflow-id": "cromwell-647e4f46-7583-4700-ba4e-bf59c94b2872",
                    "wdl-call-alias": "call-peak-pr1"
                },
                "returnCode": 0,
                "labels": {
                    "cromwell-workflow-id": "cromwell-647e4f46-7583-4700-ba4e-bf59c94b2872",
                    "wdl-task-name": "call_peak",
                    "wdl-call-alias": "call_peak_pr1"
                },
                "jobId": "projects/886987709752/locations/us-central1/operations/12700464030680219883",
                "monitoringLog": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak_pr1/shard-0/monitoring.log",
                "backend": "gcp",
                "end": "2024-06-10T07:09:37.284Z",
                "dockerImageUsed": "encodedcc/atac-seq-pipeline@sha256:b29984294619e9c1a1a9814d6a37a375d51b05beba481302246698b4b903ee30",
                "stderr": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak_pr1/shard-0/stderr",
                "callRoot": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak_pr1/shard-0",
                "attempt": 1,
                "executionEvents": [
                    {
                        "description": "Pulling \"gcr.io/google.com/cloudsdktool/cloud-sdk:276.0.0-slim\"",
                        "startTime": "2024-06-10T07:00:14.394Z",
                        "endTime": "2024-06-10T07:00:55.998Z"
                    },
                    {
                        "startTime": "2024-06-10T06:58:58.511Z",
                        "description": "RunningJob",
                        "endTime": "2024-06-10T06:59:30.704Z"
                    },
                    {
                        "description": "Pulling \"encodedcc/atac-seq-pipeline@sha256:b29984294619e9c1a1a9814d6a37a375d51b05beba481302246698b4b903ee30\"",
                        "startTime": "2024-06-10T07:00:55.998Z",
                        "endTime": "2024-06-10T07:02:38.183Z"
                    },
                    {
                        "startTime": "2024-06-10T07:09:08.160Z",
                        "description": "Complete in GCE / Cromwell Poll Interval",
                        "endTime": "2024-06-10T07:09:34.103Z"
                    },
                    {
                        "startTime": "2024-06-10T07:09:34.103Z",
                        "description": "UpdatingCallCache",
                        "endTime": "2024-06-10T07:09:36.321Z"
                    },
                    {
                        "description": "UserAction",
                        "startTime": "2024-06-10T07:03:18.920Z",
                        "endTime": "2024-06-10T07:08:13.604Z"
                    },
                    {
                        "startTime": "2024-06-10T07:09:36.321Z",
                        "description": "UpdatingJobStore",
                        "endTime": "2024-06-10T07:09:37.284Z"
                    },
                    {
                        "description": "Background",
                        "startTime": "2024-06-10T07:02:42.897Z",
                        "endTime": "2024-06-10T07:02:44.092Z"
                    },
                    {
                        "description": "Localization",
                        "startTime": "2024-06-10T07:02:44.092Z",
                        "endTime": "2024-06-10T07:03:18.920Z"
                    },
                    {
                        "startTime": "2024-06-10T06:58:54.350Z",
                        "description": "WaitingForValueStore",
                        "endTime": "2024-06-10T06:58:54.350Z"
                    },
                    {
                        "startTime": "2024-06-10T07:09:08.160Z",
                        "description": "Worker released",
                        "endTime": "2024-06-10T07:09:08.160Z"
                    },
                    {
                        "description": "PreparingJob",
                        "endTime": "2024-06-10T06:58:58.509Z",
                        "startTime": "2024-06-10T06:58:54.350Z"
                    },
                    {
                        "endTime": "2024-06-10T06:58:58.511Z",
                        "startTime": "2024-06-10T06:58:58.509Z",
                        "description": "CallCacheReading"
                    },
                    {
                        "description": "ContainerSetup",
                        "startTime": "2024-06-10T07:02:38.183Z",
                        "endTime": "2024-06-10T07:02:42.595Z"
                    },
                    {
                        "startTime": "2024-06-10T06:59:41.529Z",
                        "description": "Worker \"google-pipelines-worker-bc3def102d0b0362d8c67a9e85da1284\" assigned in \"us-central1-b\" on a \"custom-1-4608\" machine",
                        "endTime": "2024-06-10T07:00:14.394Z"
                    },
                    {
                        "startTime": "2024-06-10T06:59:30.704Z",
                        "description": "waiting for quota",
                        "endTime": "2024-06-10T06:59:41.529Z"
                    },
                    {
                        "description": "Delocalization",
                        "startTime": "2024-06-10T07:08:13.604Z",
                        "endTime": "2024-06-10T07:09:08.160Z"
                    },
                    {
                        "startTime": "2024-06-10T06:58:53.502Z",
                        "description": "Pending",
                        "endTime": "2024-06-10T06:58:53.502Z"
                    },
                    {
                        "startTime": "2024-06-10T06:58:53.502Z",
                        "description": "RequestingExecutionToken",
                        "endTime": "2024-06-10T06:58:54.350Z"
                    }
                ],
                "backendLogs": {
                    "log": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak_pr1/shard-0/call_peak_pr1-0.log"
                },
                "start": "2024-06-10T06:58:53.501Z"
            }
        ],
        "atac.call_peak": [
            {
                "preemptible": false,
                "executionStatus": "Done",
                "stdout": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak/shard-0/stdout",
                "backendStatus": "Success",
                "compressedDockerSize": 963996198,
                "commandLine": "set -e\n\nif [ 'macs2' == 'macs2' ]; then\n    python3 $(which encode_task_macs2_atac.py) \\\n        /cromwell_root/neuro-variants/data/processed/domcke_2020/tagaligns/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.tagAlign.gz \\\n        --gensz hs \\\n        --chrsz /cromwell_root/neuro-variants/data/pipeline_genome_data/hg19/hg19.chrom.sizes \\\n        --cap-num-peak 300000 \\\n        --pval-thresh 0.01 \\\n        --smooth-win 150 \\\n        --mem-gb 4.713267240673304\nfi\n\npython3 $(which encode_task_post_call_peak_atac.py) \\\n    $(ls *Peak.gz) \\\n    --ta /cromwell_root/neuro-variants/data/processed/domcke_2020/tagaligns/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.tagAlign.gz \\\n    --regex-bfilt-peak-chr-name 'chr[\\dXY]+' \\\n    --chrsz /cromwell_root/neuro-variants/data/pipeline_genome_data/hg19/hg19.chrom.sizes \\\n    --peak-type narrowPeak \\\n    --blacklist /cromwell_root/neuro-variants/data/pipeline_genome_data/hg19/wgEncodeDacMapabilityConsensusExcludable.bed.gz",
                "shardIndex": 0,
                "jes": {
                    "endpointUrl": "https://lifesciences.googleapis.com/",
                    "machineType": "custom-1-4864",
                    "googleProject": "hai-gcp-genomic",
                    "monitoringScript": "gs://caper-data/scripts/resource_monitor/resource_monitor.sh",
                    "executionBucket": "gs://neuro-variants/data/processed/atac_pipeline_outputs/",
                    "zone": "us-central1-b",
                    "instanceName": "google-pipelines-worker-9c7f98910e8ae0a592927400eefcc50e"
                },
                "outputs": {
                    "peak_region_size_plot": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak/shard-0/glob-e2c73ffa35e91a202da536e2007c07a4/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pval0.01.300K.bfilt.peak_region_size.png",
                    "bfilt_peak": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak/shard-0/glob-2e6c87fc90e45fa5dbda88934d454cd3/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pval0.01.300K.bfilt.narrowPeak.gz",
                    "peak_region_size_qc": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak/shard-0/glob-9826117ee260a5b864d958fe9ca989b0/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pval0.01.300K.bfilt.peak_region_size.qc",
                    "bfilt_peak_hammock": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak/shard-0/glob-08ed81b9c4c9ccf6c3692d9ea29b11e0/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pval0.01.300K.bfilt.narrowPeak.hammock.gz",
                    "bfilt_peak_bb": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak/shard-0/glob-155eada107f68a2195912a39f5dee4bc/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pval0.01.300K.bfilt.narrowPeak.bb",
                    "peak": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak/shard-0/glob-254907fcd430d7e6c9bf67ac4585adb4/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pval0.01.300K.narrowPeak.gz",
                    "bfilt_peak_starch": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak/shard-0/glob-c803fbc8adf0005e2a0b14b4815c0106/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pval0.01.300K.bfilt.narrowPeak.starch",
                    "frip_qc": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak/shard-0/glob-156b027b56a0fc9230201b265d9f4bf4/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pval0.01.300K.bfilt.frip.qc",
                    "num_peak_qc": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak/shard-0/glob-3b1229fa29433fa118c2c80578c3259b/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pval0.01.300K.bfilt.num_peak.qc",
                    "bfilt_peak_hammock_tbi": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak/shard-0/glob-08ed81b9c4c9ccf6c3692d9ea29b11e0/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pval0.01.300K.bfilt.narrowPeak.hammock.gz.tbi"
                },
                "runtimeAttributes": {
                    "preemptible": "0",
                    "failOnStderr": "false",
                    "bootDiskSizeGb": "10",
                    "disks": "local-disk 25 SSD",
                    "continueOnReturnCode": "0",
                    "docker": "encodedcc/atac-seq-pipeline:v1.10.0",
                    "maxRetries": "1",
                    "cpu": "1",
                    "cpuMin": "1",
                    "noAddress": "false",
                    "zones": "us-central1-b",
                    "memoryMin": "2 GB",
                    "memory": "4.713267240673304 GB"
                },
                "callCaching": {
                    "allowResultReuse": true,
                    "hit": false,
                    "result": "Cache Miss",
                    "hashes": {
                        "output count": "D3D9446802A44259755D38E6D163E820",
                        "runtime attribute": {
                            "failOnStderr": "68934A3E9455FA72420237EB05902327",
                            "docker": "B1F36DD8C0A09090242A283D75E4277C",
                            "continueOnReturnCode": "CFCD208495D565EF66E7DFF9F98764DA"
                        },
                        "output expression": {
                            "File bfilt_peak_hammock_tbi": "1D7A1D8E68AE180F84BF00427775A2B8",
                            "File peak_region_size_qc": "720E1A212D4BA14147030C0D6DD8F364",
                            "File bfilt_peak_bb": "548824A543F147DE9E2FDA4F0AEBA711",
                            "File bfilt_peak_hammock": "00070404F73DBACD1B0710271BCB785E",
                            "File bfilt_peak_starch": "68A471BB69D3C769B6EFD75D8BA384BB",
                            "File peak": "2B4C2D30823B687890B9ABBFA7507878",
                            "File frip_qc": "0F4D312A3A9795A96AFD8EE944F523D5",
                            "File peak_region_size_plot": "E22900E42131389FEE2B1E7D06CFCD6B",
                            "File bfilt_peak": "9AA37E04B33FA2979A74B09B286645DC",
                            "File num_peak_qc": "73034CF133263C952B8B89C85DDF60CC"
                        },
                        "input count": "70EFDF2EC9B086079795C442636B55FB",
                        "backend name": "50F66ECBC45488EE5826941BFBC50411",
                        "command template": "55BB5A4C04179BC1D5EAC6990BA1EBE4",
                        "input": {
                            "Float pval_thresh": "04817EFD11C15364A6EC239780038862",
                            "File blacklist": "an7FXQ==",
                            "Int time_hr": "1FF1DE774005F8DA13F42943881C655F",
                            "Float input_file_size_gb": "6BCF452ABBF4E62C086CE4EB45A2F6D1",
                            "Float disk_factor": "5BA1DE412E01037F8843D097DCFAF28A",
                            "File chrsz": "9qqSMA==",
                            "Float mem_factor": "07078A97D66756F213DBCA3E379BF084",
                            "Int cpu": "C81E728D9D4C2F636F067F89CC14862C",
                            "Float mem_gb": "AB06D00BFBCFC777D4822DB3B40F689C",
                            "String regex_bfilt_peak_chr_name": "C742E46BA2D35AFA2B5C0BBCB7D31CE7",
                            "File ta": "/AXxtQ==",
                            "String gensz": "9D9DC598642ACC744E92C2B722799B98",
                            "String peak_caller": "92FD39F2D5A89AF59D0CC6A6D3E98FE9",
                            "Int smooth_win": "7EF605FC8DBA5425D6965FBD4C8FBE1F",
                            "Int disk_gb": "8E296A067A37563370DED05F5A3BF3EC",
                            "Int cap_num_peak": "1DED704CE9BA546ACC563F4C9EF0EB52",
                            "String peak_type": "9F6EB79808F888389F5E27EE57FF2B53"
                        }
                    },
                    "effectiveCallCachingMode": "ReadAndWriteCache"
                },
                "inputs": {
                    "blacklist": "gs://neuro-variants/data/pipeline_genome_data/hg19/wgEncodeDacMapabilityConsensusExcludable.bed.gz",
                    "peak_type": "narrowPeak",
                    "ta": "gs://neuro-variants/data/processed/domcke_2020/tagaligns/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.tagAlign.gz",
                    "mem_factor": 4.0,
                    "cap_num_peak": 300000,
                    "input_file_size_gb": 0.1783168101683259,
                    "time_hr": 24,
                    "pval_thresh": 0.01,
                    "chrsz": "gs://neuro-variants/data/pipeline_genome_data/hg19/hg19.chrom.sizes",
                    "disk_factor": 30.0,
                    "disk_gb": 25,
                    "gensz": "hs",
                    "regex_bfilt_peak_chr_name": "chr[\\dXY]+",
                    "cpu": 2,
                    "mem_gb": 4.713267240673304,
                    "peak_caller": "macs2",
                    "smooth_win": 150
                },
                "backendLabels": {
                    "wdl-task-name": "call-peak",
                    "cromwell-workflow-id": "cromwell-647e4f46-7583-4700-ba4e-bf59c94b2872"
                },
                "returnCode": 0,
                "labels": {
                    "wdl-task-name": "call_peak",
                    "cromwell-workflow-id": "cromwell-647e4f46-7583-4700-ba4e-bf59c94b2872"
                },
                "jobId": "projects/886987709752/locations/us-central1/operations/2939772632389899683",
                "monitoringLog": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak/shard-0/monitoring.log",
                "backend": "gcp",
                "end": "2024-06-10T07:13:31.296Z",
                "dockerImageUsed": "encodedcc/atac-seq-pipeline@sha256:b29984294619e9c1a1a9814d6a37a375d51b05beba481302246698b4b903ee30",
                "stderr": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak/shard-0/stderr",
                "callRoot": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak/shard-0",
                "attempt": 1,
                "executionEvents": [
                    {
                        "endTime": "2024-06-10T07:00:12.303Z",
                        "startTime": "2024-06-10T06:59:41.529Z",
                        "description": "Worker \"google-pipelines-worker-9c7f98910e8ae0a592927400eefcc50e\" assigned in \"us-central1-b\" on a \"custom-1-4864\" machine"
                    },
                    {
                        "startTime": "2024-06-10T06:58:58.513Z",
                        "description": "RunningJob",
                        "endTime": "2024-06-10T06:59:30.703Z"
                    },
                    {
                        "description": "ContainerSetup",
                        "startTime": "2024-06-10T07:02:26.656Z",
                        "endTime": "2024-06-10T07:02:30.497Z"
                    },
                    {
                        "endTime": "2024-06-10T06:58:58.513Z",
                        "description": "CallCacheReading",
                        "startTime": "2024-06-10T06:58:58.512Z"
                    },
                    {
                        "startTime": "2024-06-10T06:58:53.502Z",
                        "description": "RequestingExecutionToken",
                        "endTime": "2024-06-10T06:58:56.350Z"
                    },
                    {
                        "startTime": "2024-06-10T06:58:56.350Z",
                        "description": "WaitingForValueStore",
                        "endTime": "2024-06-10T06:58:56.350Z"
                    },
                    {
                        "startTime": "2024-06-10T07:13:30.332Z",
                        "description": "UpdatingJobStore",
                        "endTime": "2024-06-10T07:13:31.296Z"
                    },
                    {
                        "startTime": "2024-06-10T07:13:29.008Z",
                        "description": "UpdatingCallCache",
                        "endTime": "2024-06-10T07:13:30.332Z"
                    },
                    {
                        "startTime": "2024-06-10T07:11:34.142Z",
                        "description": "Worker released",
                        "endTime": "2024-06-10T07:11:34.142Z"
                    },
                    {
                        "description": "Delocalization",
                        "startTime": "2024-06-10T07:10:42.562Z",
                        "endTime": "2024-06-10T07:11:34.142Z"
                    },
                    {
                        "description": "Pulling \"gcr.io/google.com/cloudsdktool/cloud-sdk:276.0.0-slim\"",
                        "startTime": "2024-06-10T07:00:12.303Z",
                        "endTime": "2024-06-10T07:00:49.880Z"
                    },
                    {
                        "endTime": "2024-06-10T07:13:29.008Z",
                        "startTime": "2024-06-10T07:11:34.142Z",
                        "description": "Complete in GCE / Cromwell Poll Interval"
                    },
                    {
                        "startTime": "2024-06-10T06:58:56.350Z",
                        "description": "PreparingJob",
                        "endTime": "2024-06-10T06:58:58.512Z"
                    },
                    {
                        "startTime": "2024-06-10T06:58:53.502Z",
                        "endTime": "2024-06-10T06:58:53.502Z",
                        "description": "Pending"
                    },
                    {
                        "description": "UserAction",
                        "startTime": "2024-06-10T07:03:05.223Z",
                        "endTime": "2024-06-10T07:10:42.562Z"
                    },
                    {
                        "startTime": "2024-06-10T06:59:30.703Z",
                        "description": "waiting for quota",
                        "endTime": "2024-06-10T06:59:41.529Z"
                    },
                    {
                        "description": "Pulling \"encodedcc/atac-seq-pipeline@sha256:b29984294619e9c1a1a9814d6a37a375d51b05beba481302246698b4b903ee30\"",
                        "startTime": "2024-06-10T07:00:49.880Z",
                        "endTime": "2024-06-10T07:02:26.656Z"
                    },
                    {
                        "description": "Background",
                        "startTime": "2024-06-10T07:02:30.748Z",
                        "endTime": "2024-06-10T07:02:31.716Z"
                    },
                    {
                        "description": "Localization",
                        "startTime": "2024-06-10T07:02:31.716Z",
                        "endTime": "2024-06-10T07:03:05.223Z"
                    }
                ],
                "backendLogs": {
                    "log": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak/shard-0/call_peak-0.log"
                },
                "start": "2024-06-10T06:58:53.502Z"
            }
        ],
        "atac.reproducibility_overlap": [
            {
                "preemptible": false,
                "executionStatus": "Done",
                "stdout": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_overlap/stdout",
                "backendStatus": "Success",
                "compressedDockerSize": 963996198,
                "commandLine": "set -e\npython3 $(which encode_task_reproducibility.py) \\\n     \\\n    --peaks-pr /cromwell_root/neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-overlap_pr/shard-0/glob-2e6c87fc90e45fa5dbda88934d454cd3/rep1-pr1_vs_rep1-pr2.overlap.bfilt.narrowPeak.gz \\\n     \\\n    --prefix overlap \\\n    --peak-type narrowPeak \\\n    --chrsz /cromwell_root/neuro-variants/data/pipeline_genome_data/hg19/hg19.chrom.sizes",
                "shardIndex": -1,
                "jes": {
                    "endpointUrl": "https://lifesciences.googleapis.com/",
                    "machineType": "custom-1-4096",
                    "googleProject": "hai-gcp-genomic",
                    "monitoringScript": "gs://caper-data/scripts/resource_monitor/resource_monitor.sh",
                    "executionBucket": "gs://neuro-variants/data/processed/atac_pipeline_outputs/",
                    "zone": "us-central1-b",
                    "instanceName": "google-pipelines-worker-df8b8bee174ec9d664da5c61094289bf"
                },
                "outputs": {
                    "optimal_peak_starch": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_overlap/glob-5b2709e8fa4f20cca33c67c963268b8c/overlap.optimal_peak.narrowPeak.starch",
                    "conservative_peak_starch": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_overlap/glob-48f968fdbba07264a36ef0e5e4ad9da3/overlap.conservative_peak.narrowPeak.starch",
                    "peak_region_size_plot": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_overlap/glob-e2c73ffa35e91a202da536e2007c07a4/overlap.optimal_peak.peak_region_size.png",
                    "peak_region_size_qc": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_overlap/glob-9826117ee260a5b864d958fe9ca989b0/overlap.optimal_peak.peak_region_size.qc",
                    "conservative_peak_bb": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_overlap/glob-f628f97804061610489fb3df14b8b3f0/overlap.conservative_peak.narrowPeak.bb",
                    "optimal_peak_bb": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_overlap/glob-240c97f2273cc92383b551c4d2655be9/overlap.optimal_peak.narrowPeak.bb",
                    "conservative_peak": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_overlap/glob-aae3f88ec555ee05b83e37921e9eb318/overlap.conservative_peak.narrowPeak.gz",
                    "conservative_peak_hammock": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_overlap/glob-29708b5a00e414f63a187d12af34d0d2/overlap.conservative_peak.narrowPeak.hammock.gz",
                    "optimal_peak": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_overlap/glob-1b1244d5baf1a7d98d4b7b76d79e43bf/overlap.optimal_peak.narrowPeak.gz",
                    "optimal_peak_hammock": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_overlap/glob-fe7dae7ccfff8f80b0a121847139e130/overlap.optimal_peak.narrowPeak.hammock.gz",
                    "reproducibility_qc": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_overlap/glob-2e0755477c7b64fb4cd35cd75c0b0f2a/overlap.reproducibility.qc",
                    "conservative_peak_hammock_tbi": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_overlap/glob-29708b5a00e414f63a187d12af34d0d2/overlap.conservative_peak.narrowPeak.hammock.gz.tbi",
                    "optimal_peak_hammock_tbi": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_overlap/glob-fe7dae7ccfff8f80b0a121847139e130/overlap.optimal_peak.narrowPeak.hammock.gz.tbi",
                    "num_peak_qc": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_overlap/glob-3b1229fa29433fa118c2c80578c3259b/overlap.optimal_peak.num_peak.qc"
                },
                "runtimeAttributes": {
                    "preemptible": "0",
                    "failOnStderr": "false",
                    "bootDiskSizeGb": "10",
                    "disks": "local-disk 500 SSD",
                    "continueOnReturnCode": "0",
                    "docker": "encodedcc/atac-seq-pipeline:v1.10.0",
                    "maxRetries": "1",
                    "cpu": "1",
                    "cpuMin": "1",
                    "noAddress": "false",
                    "zones": "us-central1-b",
                    "memoryMin": "2 GB",
                    "memory": "4 GB"
                },
                "callCaching": {
                    "allowResultReuse": true,
                    "hit": false,
                    "result": "Cache Miss",
                    "hashes": {
                        "output count": "AAB3238922BCC25A6F606EB525FFDC56",
                        "runtime attribute": {
                            "docker": "B1F36DD8C0A09090242A283D75E4277C",
                            "failOnStderr": "68934A3E9455FA72420237EB05902327",
                            "continueOnReturnCode": "CFCD208495D565EF66E7DFF9F98764DA"
                        },
                        "output expression": {
                            "File peak_region_size_qc": "720E1A212D4BA14147030C0D6DD8F364",
                            "File optimal_peak_hammock": "A2A50211B8F499FD036014D7316B856B",
                            "File optimal_peak": "E792AE7653F51CFF383E0F129F147864",
                            "File reproducibility_qc": "B87E093D4BF0AFD96E5223A38499136D",
                            "File optimal_peak_starch": "0E1B2521DD5C24A9D648480B4EB82D8B",
                            "File optimal_peak_hammock_tbi": "C54AABF460BC1E1FD78FF87DE6EC69EA",
                            "File conservative_peak_hammock": "0B8BF86DFAB8E61D244BD03F77DA71E9",
                            "File peak_region_size_plot": "E22900E42131389FEE2B1E7D06CFCD6B",
                            "File conservative_peak_bb": "332821BB2A6A72161F97B63734680D94",
                            "File optimal_peak_bb": "760B26357255ABABCD779BB08AF52E8D",
                            "File conservative_peak_hammock_tbi": "408FB3573092D50CF4BF2994BBC0C10A",
                            "File conservative_peak_starch": "27D39928056E3A887F4D8766A2C345FE",
                            "File conservative_peak": "60F094243A793EE426AB64A114FDCB78",
                            "File num_peak_qc": "73034CF133263C952B8B89C85DDF60CC"
                        },
                        "input count": "A87FF679A2F3E71D9181A67B7542122C",
                        "backend name": "50F66ECBC45488EE5826941BFBC50411",
                        "command template": "CB6E3FE90C8B21140E5D7392D2A413CB",
                        "input": {
                            "String prefix": "A841E79414CB09388E49E356A980B6DD",
                            "File peaks_pr": [
                                "+eXEaw=="
                            ],
                            "String peak_type": "9F6EB79808F888389F5E27EE57FF2B53",
                            "File chrsz": "9qqSMA=="
                        }
                    },
                    "effectiveCallCachingMode": "ReadAndWriteCache"
                },
                "inputs": {
                    "peak_type": "narrowPeak",
                    "peaks_pr": [
                        "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-overlap_pr/shard-0/glob-2e6c87fc90e45fa5dbda88934d454cd3/rep1-pr1_vs_rep1-pr2.overlap.bfilt.narrowPeak.gz"
                    ],
                    "prefix": "overlap",
                    "chrsz": "gs://neuro-variants/data/pipeline_genome_data/hg19/hg19.chrom.sizes",
                    "peak_ppr": null,
                    "peaks": []
                },
                "backendLabels": {
                    "cromwell-workflow-id": "cromwell-647e4f46-7583-4700-ba4e-bf59c94b2872",
                    "wdl-call-alias": "reproducibility-overlap",
                    "wdl-task-name": "reproducibility"
                },
                "returnCode": 0,
                "labels": {
                    "wdl-task-name": "reproducibility",
                    "wdl-call-alias": "reproducibility_overlap",
                    "cromwell-workflow-id": "cromwell-647e4f46-7583-4700-ba4e-bf59c94b2872"
                },
                "jobId": "projects/886987709752/locations/us-central1/operations/11224464512314320193",
                "monitoringLog": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_overlap/monitoring.log",
                "backend": "gcp",
                "end": "2024-06-10T07:27:25.287Z",
                "dockerImageUsed": "encodedcc/atac-seq-pipeline@sha256:b29984294619e9c1a1a9814d6a37a375d51b05beba481302246698b4b903ee30",
                "stderr": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_overlap/stderr",
                "callRoot": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_overlap",
                "attempt": 1,
                "executionEvents": [
                    {
                        "endTime": "2024-06-10T07:21:23.742Z",
                        "description": "waiting for quota",
                        "startTime": "2024-06-10T07:21:13.099Z"
                    },
                    {
                        "description": "PreparingJob",
                        "startTime": "2024-06-10T07:20:50.351Z",
                        "endTime": "2024-06-10T07:20:50.352Z"
                    },
                    {
                        "startTime": "2024-06-10T07:27:24.210Z",
                        "description": "UpdatingCallCache",
                        "endTime": "2024-06-10T07:27:24.312Z"
                    },
                    {
                        "startTime": "2024-06-10T07:20:50.351Z",
                        "description": "WaitingForValueStore",
                        "endTime": "2024-06-10T07:20:50.351Z"
                    },
                    {
                        "description": "Pulling \"gcr.io/google.com/cloudsdktool/cloud-sdk:276.0.0-slim\"",
                        "startTime": "2024-06-10T07:22:13.810Z",
                        "endTime": "2024-06-10T07:22:49.806Z"
                    },
                    {
                        "description": "Delocalization",
                        "startTime": "2024-06-10T07:25:14.981Z",
                        "endTime": "2024-06-10T07:26:27.604Z"
                    },
                    {
                        "description": "Pulling \"encodedcc/atac-seq-pipeline@sha256:b29984294619e9c1a1a9814d6a37a375d51b05beba481302246698b4b903ee30\"",
                        "startTime": "2024-06-10T07:22:49.806Z",
                        "endTime": "2024-06-10T07:24:22.061Z"
                    },
                    {
                        "startTime": "2024-06-10T07:20:50.352Z",
                        "description": "CallCacheReading",
                        "endTime": "2024-06-10T07:20:53.660Z"
                    },
                    {
                        "description": "UserAction",
                        "startTime": "2024-06-10T07:24:55.562Z",
                        "endTime": "2024-06-10T07:25:14.017Z"
                    },
                    {
                        "description": "Localization",
                        "startTime": "2024-06-10T07:24:27.148Z",
                        "endTime": "2024-06-10T07:24:55.562Z"
                    },
                    {
                        "description": "ContainerSetup",
                        "startTime": "2024-06-10T07:24:22.061Z",
                        "endTime": "2024-06-10T07:24:25.851Z"
                    },
                    {
                        "description": "Background",
                        "startTime": "2024-06-10T07:24:25.851Z",
                        "endTime": "2024-06-10T07:24:26.584Z"
                    },
                    {
                        "description": "Pending",
                        "endTime": "2024-06-10T07:20:49.372Z",
                        "startTime": "2024-06-10T07:20:49.371Z"
                    },
                    {
                        "description": "UpdatingJobStore",
                        "endTime": "2024-06-10T07:27:25.287Z",
                        "startTime": "2024-06-10T07:27:24.312Z"
                    },
                    {
                        "startTime": "2024-06-10T07:26:27.604Z",
                        "description": "Complete in GCE / Cromwell Poll Interval",
                        "endTime": "2024-06-10T07:27:24.210Z"
                    },
                    {
                        "startTime": "2024-06-10T07:20:53.660Z",
                        "description": "RunningJob",
                        "endTime": "2024-06-10T07:21:13.099Z"
                    },
                    {
                        "startTime": "2024-06-10T07:21:23.742Z",
                        "description": "Worker \"google-pipelines-worker-df8b8bee174ec9d664da5c61094289bf\" assigned in \"us-central1-b\" on a \"custom-1-4096\" machine",
                        "endTime": "2024-06-10T07:22:13.810Z"
                    },
                    {
                        "startTime": "2024-06-10T07:26:27.604Z",
                        "description": "Worker released",
                        "endTime": "2024-06-10T07:26:27.604Z"
                    },
                    {
                        "endTime": "2024-06-10T07:20:50.351Z",
                        "description": "RequestingExecutionToken",
                        "startTime": "2024-06-10T07:20:49.372Z"
                    }
                ],
                "backendLogs": {
                    "log": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_overlap/reproducibility_overlap.log"
                },
                "start": "2024-06-10T07:20:49.371Z"
            }
        ],
        "atac.qc_report": [
            {
                "preemptible": false,
                "executionStatus": "Done",
                "stdout": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-qc_report/stdout",
                "backendStatus": "Success",
                "compressedDockerSize": 963996198,
                "commandLine": "set -e\npython3 $(which encode_task_qc_report.py) \\\n    --pipeline-ver v1.10.0 \\\n    --title 'domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells' \\\n    --desc 'No description' \\\n    --genome hg19 \\\n    --multimapping 4 \\\n    --paired-ends true \\\n    --pipeline-type atac \\\n    --aligner bowtie2 \\\n    --peak-caller macs2 \\\n    --cap-num-peak 300000 \\\n    --idr-thresh 0.05 \\\n    --pval-thresh 0.01 \\\n    --xcor-subsample-reads 25000000 \\\n    --frac-mito-qcs  \\\n    --samstat-qcs  \\\n    --nodup-samstat-qcs  \\\n    --dup-qcs  \\\n    --lib-complexity-qcs  \\\n    --xcor-plots  \\\n    --xcor-scores  \\\n    --idr-plots  \\\n    --idr-plots-pr /cromwell_root/neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-idr_pr/shard-0/glob-8da83e7748d9e54f3e082eb4aa171757/rep1-pr1_vs_rep1-pr2.idr0.05.unthresholded-peaks.txt.png \\\n     \\\n    --jsd-qcs  \\\n     \\\n    --frip-qcs /cromwell_root/neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak/shard-0/glob-156b027b56a0fc9230201b265d9f4bf4/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pval0.01.300K.bfilt.frip.qc \\\n    --frip-qcs-pr1 /cromwell_root/neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak_pr1/shard-0/glob-156b027b56a0fc9230201b265d9f4bf4/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pr1.pval0.01.300K.bfilt.frip.qc \\\n    --frip-qcs-pr2 /cromwell_root/neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak_pr2/shard-0/glob-156b027b56a0fc9230201b265d9f4bf4/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pr2.pval0.01.300K.bfilt.frip.qc \\\n     \\\n     \\\n     \\\n    --frip-idr-qcs  \\\n    --frip-idr-qcs-pr /cromwell_root/neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-idr_pr/shard-0/glob-156b027b56a0fc9230201b265d9f4bf4/rep1-pr1_vs_rep1-pr2.idr0.05.bfilt.frip.qc \\\n     \\\n    --frip-overlap-qcs  \\\n    --frip-overlap-qcs-pr /cromwell_root/neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-overlap_pr/shard-0/glob-156b027b56a0fc9230201b265d9f4bf4/rep1-pr1_vs_rep1-pr2.overlap.bfilt.frip.qc \\\n     \\\n    --idr-reproducibility-qc /cromwell_root/neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_idr/glob-2e0755477c7b64fb4cd35cd75c0b0f2a/idr.reproducibility.qc \\\n    --overlap-reproducibility-qc /cromwell_root/neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_overlap/glob-2e0755477c7b64fb4cd35cd75c0b0f2a/overlap.reproducibility.qc \\\n    --annot-enrich-qcs /cromwell_root/neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-annot_enrich/shard-0/glob-5dc2759e1f2ec1b9d52ef565e3202c4e/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.annot_enrich.qc \\\n    --tss-enrich-qcs  \\\n    --tss-large-plots  \\\n    --roadmap-compare-plots  \\\n    --fraglen-dist-plots  \\\n    --fraglen-nucleosomal-qcs  \\\n    --gc-plots  \\\n    --preseq-plots  \\\n    --picard-est-lib-size-qcs  \\\n    --peak-region-size-qcs /cromwell_root/neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak/shard-0/glob-9826117ee260a5b864d958fe9ca989b0/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pval0.01.300K.bfilt.peak_region_size.qc \\\n    --peak-region-size-plots /cromwell_root/neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak/shard-0/glob-e2c73ffa35e91a202da536e2007c07a4/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pval0.01.300K.bfilt.peak_region_size.png \\\n    --num-peak-qcs /cromwell_root/neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak/shard-0/glob-3b1229fa29433fa118c2c80578c3259b/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pval0.01.300K.bfilt.num_peak.qc \\\n    --idr-opt-peak-region-size-qc /cromwell_root/neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_idr/glob-9826117ee260a5b864d958fe9ca989b0/idr.optimal_peak.peak_region_size.qc \\\n    --idr-opt-peak-region-size-plot /cromwell_root/neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_overlap/glob-e2c73ffa35e91a202da536e2007c07a4/overlap.optimal_peak.peak_region_size.png \\\n    --idr-opt-num-peak-qc /cromwell_root/neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_idr/glob-3b1229fa29433fa118c2c80578c3259b/idr.optimal_peak.num_peak.qc \\\n    --overlap-opt-peak-region-size-qc /cromwell_root/neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_overlap/glob-9826117ee260a5b864d958fe9ca989b0/overlap.optimal_peak.peak_region_size.qc \\\n    --overlap-opt-peak-region-size-plot /cromwell_root/neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_overlap/glob-e2c73ffa35e91a202da536e2007c07a4/overlap.optimal_peak.peak_region_size.png \\\n    --overlap-opt-num-peak-qc /cromwell_root/neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_overlap/glob-3b1229fa29433fa118c2c80578c3259b/overlap.optimal_peak.num_peak.qc \\\n    --out-qc-html qc.html \\\n    --out-qc-json qc.json \\",
                "shardIndex": -1,
                "jes": {
                    "endpointUrl": "https://lifesciences.googleapis.com/",
                    "machineType": "custom-1-4096",
                    "googleProject": "hai-gcp-genomic",
                    "monitoringScript": "gs://caper-data/scripts/resource_monitor/resource_monitor.sh",
                    "executionBucket": "gs://neuro-variants/data/processed/atac_pipeline_outputs/",
                    "zone": "us-central1-b",
                    "instanceName": "google-pipelines-worker-1511d5065207f589b621142095c27610"
                },
                "outputs": {
                    "qc_json": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-qc_report/glob-3440f922973abb7a616aaf203e0db08b/qc.json",
                    "qc_json_ref_match": false,
                    "report": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-qc_report/glob-eae855c82d0f7e2185388856e7b2cc7b/qc.html"
                },
                "runtimeAttributes": {
                    "preemptible": "0",
                    "failOnStderr": "false",
                    "bootDiskSizeGb": "10",
                    "disks": "local-disk 50 SSD",
                    "continueOnReturnCode": "0",
                    "docker": "encodedcc/atac-seq-pipeline:v1.10.0",
                    "maxRetries": "1",
                    "cpu": "1",
                    "cpuMin": "1",
                    "noAddress": "false",
                    "zones": "us-central1-b",
                    "memoryMin": "2 GB",
                    "memory": "4 GB"
                },
                "callCaching": {
                    "allowResultReuse": true,
                    "hit": false,
                    "result": "Cache Miss",
                    "hashes": {
                        "output count": "ECCBC87E4B5CE2FE28308FD9F2A7BAF3",
                        "runtime attribute": {
                            "failOnStderr": "68934A3E9455FA72420237EB05902327",
                            "docker": "B1F36DD8C0A09090242A283D75E4277C",
                            "continueOnReturnCode": "CFCD208495D565EF66E7DFF9F98764DA"
                        },
                        "output expression": {
                            "Boolean qc_json_ref_match": "070CCE87817E8CFB3CC26C02A6EB3E68",
                            "File report": "476581E48A7B9418343B0C14208E7F7A",
                            "File qc_json": "04041B797125F8B7B65E20307A0A15FA"
                        },
                        "input count": "C16A5320FA475530D9583C34FD356EF5",
                        "backend name": "50F66ECBC45488EE5826941BFBC50411",
                        "command template": "9A54839A5DDF62401FE31399F697E4FC",
                        "input": {
                            "File frip_qcs_pr1": [
                                "fbAPbQ=="
                            ],
                            "Float pval_thresh": "04817EFD11C15364A6EC239780038862",
                            "File frip_qcs": [
                                "97NP9Q=="
                            ],
                            "File peak_region_size_plots": [
                                "at1IZg=="
                            ],
                            "File idr_opt_peak_region_size_qc": "9Fc7EA==",
                            "File overlap_opt_peak_region_size_qc": "AuINxw==",
                            "File frip_idr_qcs_pr": [
                                "SRb1+A=="
                            ],
                            "File peak_region_size_qcs": [
                                "XAQTkw=="
                            ],
                            "File frip_qcs_pr2": [
                                "D3OxLw=="
                            ],
                            "String title": "87C4AB3C5F2E77F106639B8D18126A07",
                            "File overlap_opt_num_peak_qc": "C9s6xQ==",
                            "Boolean paired_ends": [
                                "B326B5062B2F0E69046810717534CB09"
                            ],
                            "File num_peak_qcs": [
                                "2dFyIg=="
                            ],
                            "File idr_opt_peak_region_size_plot": "f6C8hA==",
                            "File annot_enrich_qcs": [
                                "bEOzhg=="
                            ],
                            "File idr_opt_num_peak_qc": "vboTcw==",
                            "File frip_overlap_qcs_pr": [
                                "CoDooA=="
                            ],
                            "Int xcor_subsample_reads": "F9637C816DE716B54C5B24B56F189714",
                            "String pipeline_ver": "223970819D49110B7F8B4F573C69717A",
                            "String genome": "D5F9BCDE0A5E02F84707007929C76F35",
                            "Float idr_thresh": "B14399CBAAC6DA4B5B733B483106383F",
                            "File idr_plots_pr": [
                                "How3dA=="
                            ],
                            "String pipeline_type": "74D2E2801AEA539F80E62C8501E5E679",
                            "String peak_caller": "92FD39F2D5A89AF59D0CC6A6D3E98FE9",
                            "File overlap_opt_peak_region_size_plot": "f6C8hA==",
                            "Int multimapping": "A87FF679A2F3E71D9181A67B7542122C",
                            "File idr_reproducibility_qc": "LDwmfA==",
                            "String aligner": "99E6A6AC2CD2C1E66B6C4CA6FE0D3837",
                            "Int cap_num_peak": "1DED704CE9BA546ACC563F4C9EF0EB52",
                            "File overlap_reproducibility_qc": "bmAK+Q==",
                            "String description": "41323C1F5B54F4861F936EEA80787C9F"
                        }
                    },
                    "effectiveCallCachingMode": "ReadAndWriteCache"
                },
                "inputs": {
                    "frip_qc_ppr1": null,
                    "peak_region_size_qcs": [
                        "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak/shard-0/glob-9826117ee260a5b864d958fe9ca989b0/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pval0.01.300K.bfilt.peak_region_size.qc"
                    ],
                    "frip_qcs_pr1": [
                        "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak_pr1/shard-0/glob-156b027b56a0fc9230201b265d9f4bf4/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pr1.pval0.01.300K.bfilt.frip.qc"
                    ],
                    "fraglen_dist_plots": [],
                    "overlap_reproducibility_qc": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_overlap/glob-2e0755477c7b64fb4cd35cd75c0b0f2a/overlap.reproducibility.qc",
                    "frip_overlap_qcs": [],
                    "frip_idr_qcs_pr": [
                        "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-idr_pr/shard-0/glob-156b027b56a0fc9230201b265d9f4bf4/rep1-pr1_vs_rep1-pr2.idr0.05.bfilt.frip.qc"
                    ],
                    "frip_qc_pooled": null,
                    "jsd_qcs": null,
                    "cap_num_peak": 300000,
                    "idr_opt_num_peak_qc": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_idr/glob-3b1229fa29433fa118c2c80578c3259b/idr.optimal_peak.num_peak.qc",
                    "picard_est_lib_size_qcs": [],
                    "frip_idr_qc_ppr": null,
                    "pipeline_ver": "v1.10.0",
                    "idr_reproducibility_qc": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_idr/glob-2e0755477c7b64fb4cd35cd75c0b0f2a/idr.reproducibility.qc",
                    "multimapping": 4,
                    "description": "No description",
                    "pipeline_type": "atac",
                    "lib_complexity_qcs": [],
                    "idr_plot_ppr": null,
                    "peak_region_size_plots": [
                        "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak/shard-0/glob-e2c73ffa35e91a202da536e2007c07a4/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pval0.01.300K.bfilt.peak_region_size.png"
                    ],
                    "pval_thresh": 0.01,
                    "dup_qcs": [],
                    "overlap_opt_num_peak_qc": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_overlap/glob-3b1229fa29433fa118c2c80578c3259b/overlap.optimal_peak.num_peak.qc",
                    "idr_thresh": 0.05,
                    "idr_opt_peak_region_size_qc": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_idr/glob-9826117ee260a5b864d958fe9ca989b0/idr.optimal_peak.peak_region_size.qc",
                    "xcor_subsample_reads": 25000000,
                    "roadmap_compare_plots": [],
                    "qc_json_ref": null,
                    "annot_enrich_qcs": [
                        "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-annot_enrich/shard-0/glob-5dc2759e1f2ec1b9d52ef565e3202c4e/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.annot_enrich.qc"
                    ],
                    "xcor_scores": [],
                    "gc_plots": [],
                    "frip_qc_ppr2": null,
                    "frip_overlap_qc_ppr": null,
                    "nodup_samstat_qcs": [],
                    "aligner": "bowtie2",
                    "genome": "hg19",
                    "xcor_plots": [],
                    "num_peak_qcs": [
                        "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak/shard-0/glob-3b1229fa29433fa118c2c80578c3259b/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pval0.01.300K.bfilt.num_peak.qc"
                    ],
                    "samstat_qcs": [],
                    "idr_plots_pr": [
                        "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-idr_pr/shard-0/glob-8da83e7748d9e54f3e082eb4aa171757/rep1-pr1_vs_rep1-pr2.idr0.05.unthresholded-peaks.txt.png"
                    ],
                    "frip_overlap_qcs_pr": [
                        "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-overlap_pr/shard-0/glob-156b027b56a0fc9230201b265d9f4bf4/rep1-pr1_vs_rep1-pr2.overlap.bfilt.frip.qc"
                    ],
                    "frip_qcs_pr2": [
                        "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak_pr2/shard-0/glob-156b027b56a0fc9230201b265d9f4bf4/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pr2.pval0.01.300K.bfilt.frip.qc"
                    ],
                    "title": "domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells",
                    "frip_qcs": [
                        "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak/shard-0/glob-156b027b56a0fc9230201b265d9f4bf4/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pval0.01.300K.bfilt.frip.qc"
                    ],
                    "preseq_plots": [],
                    "peak_caller": "macs2",
                    "idr_opt_peak_region_size_plot": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_overlap/glob-e2c73ffa35e91a202da536e2007c07a4/overlap.optimal_peak.peak_region_size.png",
                    "fraglen_nucleosomal_qcs": [],
                    "overlap_opt_peak_region_size_qc": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_overlap/glob-9826117ee260a5b864d958fe9ca989b0/overlap.optimal_peak.peak_region_size.qc",
                    "frac_mito_qcs": [],
                    "jsd_plot": null,
                    "tss_large_plots": [],
                    "overlap_opt_peak_region_size_plot": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_overlap/glob-e2c73ffa35e91a202da536e2007c07a4/overlap.optimal_peak.peak_region_size.png",
                    "frip_idr_qcs": [],
                    "paired_ends": [
                        true
                    ],
                    "tss_enrich_qcs": [],
                    "idr_plots": []
                },
                "backendLabels": {
                    "wdl-task-name": "qc-report",
                    "cromwell-workflow-id": "cromwell-647e4f46-7583-4700-ba4e-bf59c94b2872"
                },
                "returnCode": 0,
                "labels": {
                    "wdl-task-name": "qc_report",
                    "cromwell-workflow-id": "cromwell-647e4f46-7583-4700-ba4e-bf59c94b2872"
                },
                "jobId": "projects/886987709752/locations/us-central1/operations/17489332151494681449",
                "monitoringLog": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-qc_report/monitoring.log",
                "backend": "gcp",
                "end": "2024-06-10T07:47:25.286Z",
                "dockerImageUsed": "encodedcc/atac-seq-pipeline@sha256:b29984294619e9c1a1a9814d6a37a375d51b05beba481302246698b4b903ee30",
                "stderr": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-qc_report/stderr",
                "callRoot": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-qc_report",
                "attempt": 1,
                "executionEvents": [
                    {
                        "endTime": "2024-06-10T07:40:26.350Z",
                        "description": "RequestingExecutionToken",
                        "startTime": "2024-06-10T07:40:22.372Z"
                    },
                    {
                        "description": "Pulling \"gcr.io/google.com/cloudsdktool/cloud-sdk:276.0.0-slim\"",
                        "startTime": "2024-06-10T07:41:26.069Z",
                        "endTime": "2024-06-10T07:42:03.621Z"
                    },
                    {
                        "startTime": "2024-06-10T07:45:22.406Z",
                        "description": "Worker released",
                        "endTime": "2024-06-10T07:45:22.406Z"
                    },
                    {
                        "startTime": "2024-06-10T07:40:26.355Z",
                        "endTime": "2024-06-10T07:40:41.918Z",
                        "description": "RunningJob"
                    },
                    {
                        "description": "Localization",
                        "startTime": "2024-06-10T07:43:46.384Z",
                        "endTime": "2024-06-10T07:44:39.040Z"
                    },
                    {
                        "description": "Pulling \"encodedcc/atac-seq-pipeline@sha256:b29984294619e9c1a1a9814d6a37a375d51b05beba481302246698b4b903ee30\"",
                        "startTime": "2024-06-10T07:42:03.621Z",
                        "endTime": "2024-06-10T07:43:40.956Z"
                    },
                    {
                        "description": "Delocalization",
                        "startTime": "2024-06-10T07:44:43.344Z",
                        "endTime": "2024-06-10T07:45:22.406Z"
                    },
                    {
                        "description": "UserAction",
                        "startTime": "2024-06-10T07:44:39.930Z",
                        "endTime": "2024-06-10T07:44:43.344Z"
                    },
                    {
                        "endTime": "2024-06-10T07:40:26.355Z",
                        "startTime": "2024-06-10T07:40:26.353Z",
                        "description": "CallCacheReading"
                    },
                    {
                        "description": "ContainerSetup",
                        "startTime": "2024-06-10T07:43:40.956Z",
                        "endTime": "2024-06-10T07:43:45.003Z"
                    },
                    {
                        "description": "Background",
                        "startTime": "2024-06-10T07:43:45.003Z",
                        "endTime": "2024-06-10T07:43:45.239Z"
                    },
                    {
                        "startTime": "2024-06-10T07:40:53.453Z",
                        "description": "Worker \"google-pipelines-worker-1511d5065207f589b621142095c27610\" assigned in \"us-central1-b\" on a \"custom-1-4096\" machine",
                        "endTime": "2024-06-10T07:41:26.069Z"
                    },
                    {
                        "startTime": "2024-06-10T07:47:23.684Z",
                        "endTime": "2024-06-10T07:47:24.319Z",
                        "description": "UpdatingCallCache"
                    },
                    {
                        "startTime": "2024-06-10T07:40:41.918Z",
                        "description": "waiting for quota",
                        "endTime": "2024-06-10T07:40:53.453Z"
                    },
                    {
                        "startTime": "2024-06-10T07:40:22.372Z",
                        "description": "Pending",
                        "endTime": "2024-06-10T07:40:22.372Z"
                    },
                    {
                        "startTime": "2024-06-10T07:40:26.351Z",
                        "description": "PreparingJob",
                        "endTime": "2024-06-10T07:40:26.353Z"
                    },
                    {
                        "startTime": "2024-06-10T07:47:24.319Z",
                        "endTime": "2024-06-10T07:47:25.286Z",
                        "description": "UpdatingJobStore"
                    },
                    {
                        "description": "Complete in GCE / Cromwell Poll Interval",
                        "startTime": "2024-06-10T07:45:22.406Z",
                        "endTime": "2024-06-10T07:47:23.684Z"
                    },
                    {
                        "startTime": "2024-06-10T07:40:26.350Z",
                        "description": "WaitingForValueStore",
                        "endTime": "2024-06-10T07:40:26.351Z"
                    }
                ],
                "backendLogs": {
                    "log": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-qc_report/qc_report.log"
                },
                "start": "2024-06-10T07:40:22.372Z"
            }
        ],
        "atac.reproducibility_idr": [
            {
                "preemptible": false,
                "executionStatus": "Done",
                "stdout": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_idr/stdout",
                "backendStatus": "Success",
                "compressedDockerSize": 963996198,
                "commandLine": "set -e\npython3 $(which encode_task_reproducibility.py) \\\n     \\\n    --peaks-pr /cromwell_root/neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-idr_pr/shard-0/glob-2e6c87fc90e45fa5dbda88934d454cd3/rep1-pr1_vs_rep1-pr2.idr0.05.bfilt.narrowPeak.gz \\\n     \\\n    --prefix idr \\\n    --peak-type narrowPeak \\\n    --chrsz /cromwell_root/neuro-variants/data/pipeline_genome_data/hg19/hg19.chrom.sizes",
                "shardIndex": -1,
                "jes": {
                    "endpointUrl": "https://lifesciences.googleapis.com/",
                    "machineType": "custom-1-4096",
                    "googleProject": "hai-gcp-genomic",
                    "monitoringScript": "gs://caper-data/scripts/resource_monitor/resource_monitor.sh",
                    "executionBucket": "gs://neuro-variants/data/processed/atac_pipeline_outputs/",
                    "zone": "us-central1-b",
                    "instanceName": "google-pipelines-worker-8ee1781d4bdcfebbc7e494d0866f34bc"
                },
                "outputs": {
                    "optimal_peak_starch": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_idr/glob-5b2709e8fa4f20cca33c67c963268b8c/idr.optimal_peak.narrowPeak.starch",
                    "conservative_peak_starch": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_idr/glob-48f968fdbba07264a36ef0e5e4ad9da3/idr.conservative_peak.narrowPeak.starch",
                    "peak_region_size_plot": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_idr/glob-e2c73ffa35e91a202da536e2007c07a4/idr.optimal_peak.peak_region_size.png",
                    "peak_region_size_qc": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_idr/glob-9826117ee260a5b864d958fe9ca989b0/idr.optimal_peak.peak_region_size.qc",
                    "conservative_peak_bb": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_idr/glob-f628f97804061610489fb3df14b8b3f0/idr.conservative_peak.narrowPeak.bb",
                    "optimal_peak_bb": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_idr/glob-240c97f2273cc92383b551c4d2655be9/idr.optimal_peak.narrowPeak.bb",
                    "conservative_peak": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_idr/glob-aae3f88ec555ee05b83e37921e9eb318/idr.conservative_peak.narrowPeak.gz",
                    "conservative_peak_hammock": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_idr/glob-29708b5a00e414f63a187d12af34d0d2/idr.conservative_peak.narrowPeak.hammock.gz",
                    "optimal_peak": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_idr/glob-1b1244d5baf1a7d98d4b7b76d79e43bf/idr.optimal_peak.narrowPeak.gz",
                    "optimal_peak_hammock": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_idr/glob-fe7dae7ccfff8f80b0a121847139e130/idr.optimal_peak.narrowPeak.hammock.gz",
                    "reproducibility_qc": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_idr/glob-2e0755477c7b64fb4cd35cd75c0b0f2a/idr.reproducibility.qc",
                    "conservative_peak_hammock_tbi": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_idr/glob-29708b5a00e414f63a187d12af34d0d2/idr.conservative_peak.narrowPeak.hammock.gz.tbi",
                    "optimal_peak_hammock_tbi": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_idr/glob-fe7dae7ccfff8f80b0a121847139e130/idr.optimal_peak.narrowPeak.hammock.gz.tbi",
                    "num_peak_qc": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_idr/glob-3b1229fa29433fa118c2c80578c3259b/idr.optimal_peak.num_peak.qc"
                },
                "runtimeAttributes": {
                    "preemptible": "0",
                    "failOnStderr": "false",
                    "bootDiskSizeGb": "10",
                    "disks": "local-disk 500 SSD",
                    "continueOnReturnCode": "0",
                    "docker": "encodedcc/atac-seq-pipeline:v1.10.0",
                    "maxRetries": "1",
                    "cpu": "1",
                    "cpuMin": "1",
                    "noAddress": "false",
                    "zones": "us-central1-b",
                    "memoryMin": "2 GB",
                    "memory": "4 GB"
                },
                "callCaching": {
                    "allowResultReuse": true,
                    "hit": false,
                    "result": "Cache Miss",
                    "hashes": {
                        "output count": "AAB3238922BCC25A6F606EB525FFDC56",
                        "runtime attribute": {
                            "docker": "B1F36DD8C0A09090242A283D75E4277C",
                            "failOnStderr": "68934A3E9455FA72420237EB05902327",
                            "continueOnReturnCode": "CFCD208495D565EF66E7DFF9F98764DA"
                        },
                        "output expression": {
                            "File peak_region_size_qc": "720E1A212D4BA14147030C0D6DD8F364",
                            "File optimal_peak_hammock": "A2A50211B8F499FD036014D7316B856B",
                            "File optimal_peak": "E792AE7653F51CFF383E0F129F147864",
                            "File reproducibility_qc": "B87E093D4BF0AFD96E5223A38499136D",
                            "File optimal_peak_starch": "0E1B2521DD5C24A9D648480B4EB82D8B",
                            "File optimal_peak_hammock_tbi": "C54AABF460BC1E1FD78FF87DE6EC69EA",
                            "File conservative_peak_hammock": "0B8BF86DFAB8E61D244BD03F77DA71E9",
                            "File peak_region_size_plot": "E22900E42131389FEE2B1E7D06CFCD6B",
                            "File conservative_peak_bb": "332821BB2A6A72161F97B63734680D94",
                            "File optimal_peak_bb": "760B26357255ABABCD779BB08AF52E8D",
                            "File conservative_peak_hammock_tbi": "408FB3573092D50CF4BF2994BBC0C10A",
                            "File conservative_peak_starch": "27D39928056E3A887F4D8766A2C345FE",
                            "File conservative_peak": "60F094243A793EE426AB64A114FDCB78",
                            "File num_peak_qc": "73034CF133263C952B8B89C85DDF60CC"
                        },
                        "input count": "A87FF679A2F3E71D9181A67B7542122C",
                        "backend name": "50F66ECBC45488EE5826941BFBC50411",
                        "command template": "CB6E3FE90C8B21140E5D7392D2A413CB",
                        "input": {
                            "File peaks_pr": [
                                "1d/c3Q=="
                            ],
                            "String prefix": "DF5EC21900D5A81E4C10CB16B6D1EC50",
                            "File chrsz": "9qqSMA==",
                            "String peak_type": "9F6EB79808F888389F5E27EE57FF2B53"
                        }
                    },
                    "effectiveCallCachingMode": "ReadAndWriteCache"
                },
                "inputs": {
                    "peak_type": "narrowPeak",
                    "peaks_pr": [
                        "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-idr_pr/shard-0/glob-2e6c87fc90e45fa5dbda88934d454cd3/rep1-pr1_vs_rep1-pr2.idr0.05.bfilt.narrowPeak.gz"
                    ],
                    "prefix": "idr",
                    "chrsz": "gs://neuro-variants/data/pipeline_genome_data/hg19/hg19.chrom.sizes",
                    "peak_ppr": null,
                    "peaks": []
                },
                "backendLabels": {
                    "wdl-task-name": "reproducibility",
                    "cromwell-workflow-id": "cromwell-647e4f46-7583-4700-ba4e-bf59c94b2872",
                    "wdl-call-alias": "reproducibility-idr"
                },
                "returnCode": 0,
                "labels": {
                    "wdl-call-alias": "reproducibility_idr",
                    "wdl-task-name": "reproducibility",
                    "cromwell-workflow-id": "cromwell-647e4f46-7583-4700-ba4e-bf59c94b2872"
                },
                "jobId": "projects/886987709752/locations/us-central1/operations/15302917515734536086",
                "monitoringLog": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_idr/monitoring.log",
                "backend": "gcp",
                "end": "2024-06-10T07:28:31.316Z",
                "dockerImageUsed": "encodedcc/atac-seq-pipeline@sha256:b29984294619e9c1a1a9814d6a37a375d51b05beba481302246698b4b903ee30",
                "stderr": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_idr/stderr",
                "callRoot": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_idr",
                "attempt": 1,
                "executionEvents": [
                    {
                        "startTime": "2024-06-10T07:22:32.352Z",
                        "description": "CallCacheReading",
                        "endTime": "2024-06-10T07:22:33.541Z"
                    },
                    {
                        "startTime": "2024-06-10T07:22:33.541Z",
                        "description": "RunningJob",
                        "endTime": "2024-06-10T07:22:53.354Z"
                    },
                    {
                        "description": "Delocalization",
                        "startTime": "2024-06-10T07:26:14.781Z",
                        "endTime": "2024-06-10T07:27:00.789Z"
                    },
                    {
                        "description": "Background",
                        "startTime": "2024-06-10T07:25:37.505Z",
                        "endTime": "2024-06-10T07:25:38.384Z"
                    },
                    {
                        "description": "waiting for quota",
                        "endTime": "2024-06-10T07:23:04.322Z",
                        "startTime": "2024-06-10T07:22:53.354Z"
                    },
                    {
                        "description": "Pulling \"gcr.io/google.com/cloudsdktool/cloud-sdk:276.0.0-slim\"",
                        "startTime": "2024-06-10T07:23:55.464Z",
                        "endTime": "2024-06-10T07:24:23.453Z"
                    },
                    {
                        "endTime": "2024-06-10T07:23:55.464Z",
                        "startTime": "2024-06-10T07:23:04.322Z",
                        "description": "Worker \"google-pipelines-worker-8ee1781d4bdcfebbc7e494d0866f34bc\" assigned in \"us-central1-b\" on a \"custom-1-4096\" machine"
                    },
                    {
                        "description": "ContainerSetup",
                        "startTime": "2024-06-10T07:25:34.489Z",
                        "endTime": "2024-06-10T07:25:37.505Z"
                    },
                    {
                        "description": "Localization",
                        "startTime": "2024-06-10T07:25:38.384Z",
                        "endTime": "2024-06-10T07:25:57.981Z"
                    },
                    {
                        "description": "Worker released",
                        "startTime": "2024-06-10T07:27:00.789Z",
                        "endTime": "2024-06-10T07:27:00.789Z"
                    },
                    {
                        "startTime": "2024-06-10T07:22:32.350Z",
                        "description": "WaitingForValueStore",
                        "endTime": "2024-06-10T07:22:32.350Z"
                    },
                    {
                        "endTime": "2024-06-10T07:28:29.134Z",
                        "description": "Complete in GCE / Cromwell Poll Interval",
                        "startTime": "2024-06-10T07:27:00.789Z"
                    },
                    {
                        "description": "UserAction",
                        "startTime": "2024-06-10T07:25:57.981Z",
                        "endTime": "2024-06-10T07:26:14.108Z"
                    },
                    {
                        "endTime": "2024-06-10T07:22:32.350Z",
                        "description": "RequestingExecutionToken",
                        "startTime": "2024-06-10T07:22:29.332Z"
                    },
                    {
                        "startTime": "2024-06-10T07:22:29.332Z",
                        "endTime": "2024-06-10T07:22:29.332Z",
                        "description": "Pending"
                    },
                    {
                        "startTime": "2024-06-10T07:22:32.350Z",
                        "description": "PreparingJob",
                        "endTime": "2024-06-10T07:22:32.352Z"
                    },
                    {
                        "startTime": "2024-06-10T07:28:29.134Z",
                        "description": "UpdatingCallCache",
                        "endTime": "2024-06-10T07:28:30.376Z"
                    },
                    {
                        "description": "UpdatingJobStore",
                        "startTime": "2024-06-10T07:28:30.376Z",
                        "endTime": "2024-06-10T07:28:31.316Z"
                    },
                    {
                        "description": "Pulling \"encodedcc/atac-seq-pipeline@sha256:b29984294619e9c1a1a9814d6a37a375d51b05beba481302246698b4b903ee30\"",
                        "startTime": "2024-06-10T07:24:23.453Z",
                        "endTime": "2024-06-10T07:25:34.489Z"
                    }
                ],
                "backendLogs": {
                    "log": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-reproducibility_idr/reproducibility_idr.log"
                },
                "start": "2024-06-10T07:22:29.332Z"
            }
        ],
        "atac.call_peak_pr2": [
            {
                "preemptible": false,
                "executionStatus": "Done",
                "stdout": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak_pr2/shard-0/stdout",
                "backendStatus": "Success",
                "compressedDockerSize": 963996198,
                "commandLine": "set -e\n\nif [ 'macs2' == 'macs2' ]; then\n    python3 $(which encode_task_macs2_atac.py) \\\n        /cromwell_root/neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-spr/shard-0/glob-a7cc663e5a8a49cc3d9bc036f4370f1c/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pr2.tagAlign.gz \\\n        --gensz hs \\\n        --chrsz /cromwell_root/neuro-variants/data/pipeline_genome_data/hg19/hg19.chrom.sizes \\\n        --cap-num-peak 300000 \\\n        --pval-thresh 0.01 \\\n        --smooth-win 150 \\\n        --mem-gb 4.348349191248417\nfi\n\npython3 $(which encode_task_post_call_peak_atac.py) \\\n    $(ls *Peak.gz) \\\n    --ta /cromwell_root/neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-spr/shard-0/glob-a7cc663e5a8a49cc3d9bc036f4370f1c/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pr2.tagAlign.gz \\\n    --regex-bfilt-peak-chr-name 'chr[\\dXY]+' \\\n    --chrsz /cromwell_root/neuro-variants/data/pipeline_genome_data/hg19/hg19.chrom.sizes \\\n    --peak-type narrowPeak \\\n    --blacklist /cromwell_root/neuro-variants/data/pipeline_genome_data/hg19/wgEncodeDacMapabilityConsensusExcludable.bed.gz",
                "shardIndex": 0,
                "jes": {
                    "endpointUrl": "https://lifesciences.googleapis.com/",
                    "machineType": "custom-1-4608",
                    "googleProject": "hai-gcp-genomic",
                    "monitoringScript": "gs://caper-data/scripts/resource_monitor/resource_monitor.sh",
                    "executionBucket": "gs://neuro-variants/data/processed/atac_pipeline_outputs/",
                    "zone": "us-central1-b",
                    "instanceName": "google-pipelines-worker-1cfb0758b17303e4f7c6eaf4da9823ad"
                },
                "outputs": {
                    "peak_region_size_plot": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak_pr2/shard-0/glob-e2c73ffa35e91a202da536e2007c07a4/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pr2.pval0.01.300K.bfilt.peak_region_size.png",
                    "bfilt_peak": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak_pr2/shard-0/glob-2e6c87fc90e45fa5dbda88934d454cd3/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pr2.pval0.01.300K.bfilt.narrowPeak.gz",
                    "peak_region_size_qc": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak_pr2/shard-0/glob-9826117ee260a5b864d958fe9ca989b0/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pr2.pval0.01.300K.bfilt.peak_region_size.qc",
                    "bfilt_peak_hammock": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak_pr2/shard-0/glob-08ed81b9c4c9ccf6c3692d9ea29b11e0/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pr2.pval0.01.300K.bfilt.narrowPeak.hammock.gz",
                    "bfilt_peak_bb": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak_pr2/shard-0/glob-155eada107f68a2195912a39f5dee4bc/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pr2.pval0.01.300K.bfilt.narrowPeak.bb",
                    "peak": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak_pr2/shard-0/glob-254907fcd430d7e6c9bf67ac4585adb4/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pr2.pval0.01.300K.narrowPeak.gz",
                    "bfilt_peak_starch": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak_pr2/shard-0/glob-c803fbc8adf0005e2a0b14b4815c0106/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pr2.pval0.01.300K.bfilt.narrowPeak.starch",
                    "frip_qc": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak_pr2/shard-0/glob-156b027b56a0fc9230201b265d9f4bf4/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pr2.pval0.01.300K.bfilt.frip.qc",
                    "num_peak_qc": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak_pr2/shard-0/glob-3b1229fa29433fa118c2c80578c3259b/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pr2.pval0.01.300K.bfilt.num_peak.qc",
                    "bfilt_peak_hammock_tbi": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak_pr2/shard-0/glob-08ed81b9c4c9ccf6c3692d9ea29b11e0/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pr2.pval0.01.300K.bfilt.narrowPeak.hammock.gz.tbi"
                },
                "runtimeAttributes": {
                    "preemptible": "0",
                    "failOnStderr": "false",
                    "bootDiskSizeGb": "10",
                    "disks": "local-disk 23 SSD",
                    "continueOnReturnCode": "0",
                    "docker": "encodedcc/atac-seq-pipeline:v1.10.0",
                    "maxRetries": "1",
                    "cpu": "1",
                    "cpuMin": "1",
                    "noAddress": "false",
                    "zones": "us-central1-b",
                    "memoryMin": "2 GB",
                    "memory": "4.348349191248417 GB"
                },
                "callCaching": {
                    "allowResultReuse": true,
                    "hit": false,
                    "result": "Cache Miss",
                    "hashes": {
                        "output count": "D3D9446802A44259755D38E6D163E820",
                        "runtime attribute": {
                            "failOnStderr": "68934A3E9455FA72420237EB05902327",
                            "docker": "B1F36DD8C0A09090242A283D75E4277C",
                            "continueOnReturnCode": "CFCD208495D565EF66E7DFF9F98764DA"
                        },
                        "output expression": {
                            "File bfilt_peak_hammock_tbi": "1D7A1D8E68AE180F84BF00427775A2B8",
                            "File peak_region_size_qc": "720E1A212D4BA14147030C0D6DD8F364",
                            "File bfilt_peak_bb": "548824A543F147DE9E2FDA4F0AEBA711",
                            "File bfilt_peak_hammock": "00070404F73DBACD1B0710271BCB785E",
                            "File bfilt_peak_starch": "68A471BB69D3C769B6EFD75D8BA384BB",
                            "File peak": "2B4C2D30823B687890B9ABBFA7507878",
                            "File frip_qc": "0F4D312A3A9795A96AFD8EE944F523D5",
                            "File peak_region_size_plot": "E22900E42131389FEE2B1E7D06CFCD6B",
                            "File bfilt_peak": "9AA37E04B33FA2979A74B09B286645DC",
                            "File num_peak_qc": "73034CF133263C952B8B89C85DDF60CC"
                        },
                        "input count": "70EFDF2EC9B086079795C442636B55FB",
                        "backend name": "50F66ECBC45488EE5826941BFBC50411",
                        "command template": "55BB5A4C04179BC1D5EAC6990BA1EBE4",
                        "input": {
                            "Float pval_thresh": "04817EFD11C15364A6EC239780038862",
                            "File blacklist": "an7FXQ==",
                            "Int time_hr": "1FF1DE774005F8DA13F42943881C655F",
                            "Float input_file_size_gb": "FF12F00CCF305365B1F28BBE436CD19D",
                            "Float disk_factor": "5BA1DE412E01037F8843D097DCFAF28A",
                            "File chrsz": "9qqSMA==",
                            "Float mem_factor": "07078A97D66756F213DBCA3E379BF084",
                            "Int cpu": "C81E728D9D4C2F636F067F89CC14862C",
                            "Float mem_gb": "0923CCA11CA4B98BCF053C3BDD80D3D6",
                            "String regex_bfilt_peak_chr_name": "C742E46BA2D35AFA2B5C0BBCB7D31CE7",
                            "File ta": "03fVag==",
                            "String gensz": "9D9DC598642ACC744E92C2B722799B98",
                            "String peak_caller": "92FD39F2D5A89AF59D0CC6A6D3E98FE9",
                            "Int smooth_win": "7EF605FC8DBA5425D6965FBD4C8FBE1F",
                            "Int disk_gb": "37693CFC748049E45D87B8C7D8B9AACD",
                            "Int cap_num_peak": "1DED704CE9BA546ACC563F4C9EF0EB52",
                            "String peak_type": "9F6EB79808F888389F5E27EE57FF2B53"
                        }
                    },
                    "effectiveCallCachingMode": "ReadAndWriteCache"
                },
                "inputs": {
                    "blacklist": "gs://neuro-variants/data/pipeline_genome_data/hg19/wgEncodeDacMapabilityConsensusExcludable.bed.gz",
                    "peak_type": "narrowPeak",
                    "ta": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-spr/shard-0/glob-a7cc663e5a8a49cc3d9bc036f4370f1c/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pr2.tagAlign.gz",
                    "mem_factor": 4.0,
                    "cap_num_peak": 300000,
                    "input_file_size_gb": 0.08708729781210423,
                    "time_hr": 24,
                    "pval_thresh": 0.01,
                    "chrsz": "gs://neuro-variants/data/pipeline_genome_data/hg19/hg19.chrom.sizes",
                    "disk_factor": 30.0,
                    "disk_gb": 23,
                    "gensz": "hs",
                    "regex_bfilt_peak_chr_name": "chr[\\dXY]+",
                    "cpu": 2,
                    "mem_gb": 4.348349191248417,
                    "peak_caller": "macs2",
                    "smooth_win": 150
                },
                "backendLabels": {
                    "wdl-task-name": "call-peak",
                    "cromwell-workflow-id": "cromwell-647e4f46-7583-4700-ba4e-bf59c94b2872",
                    "wdl-call-alias": "call-peak-pr2"
                },
                "returnCode": 0,
                "labels": {
                    "wdl-call-alias": "call_peak_pr2",
                    "cromwell-workflow-id": "cromwell-647e4f46-7583-4700-ba4e-bf59c94b2872",
                    "wdl-task-name": "call_peak"
                },
                "jobId": "projects/886987709752/locations/us-central1/operations/1398040888998240325",
                "monitoringLog": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak_pr2/shard-0/monitoring.log",
                "backend": "gcp",
                "end": "2024-06-10T07:10:10.309Z",
                "dockerImageUsed": "encodedcc/atac-seq-pipeline@sha256:b29984294619e9c1a1a9814d6a37a375d51b05beba481302246698b4b903ee30",
                "stderr": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak_pr2/shard-0/stderr",
                "callRoot": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak_pr2/shard-0",
                "attempt": 1,
                "executionEvents": [
                    {
                        "startTime": "2024-06-10T07:09:20.956Z",
                        "description": "Worker released",
                        "endTime": "2024-06-10T07:09:20.956Z"
                    },
                    {
                        "startTime": "2024-06-10T06:58:58.512Z",
                        "description": "RunningJob",
                        "endTime": "2024-06-10T06:59:30.706Z"
                    },
                    {
                        "startTime": "2024-06-10T07:10:09.365Z",
                        "description": "UpdatingJobStore",
                        "endTime": "2024-06-10T07:10:10.309Z"
                    },
                    {
                        "endTime": "2024-06-10T07:10:09.027Z",
                        "description": "Complete in GCE / Cromwell Poll Interval",
                        "startTime": "2024-06-10T07:09:20.956Z"
                    },
                    {
                        "startTime": "2024-06-10T06:58:58.350Z",
                        "description": "WaitingForValueStore",
                        "endTime": "2024-06-10T06:58:58.351Z"
                    },
                    {
                        "description": "Worker \"google-pipelines-worker-1cfb0758b17303e4f7c6eaf4da9823ad\" assigned in \"us-central1-b\" on a \"custom-1-4608\" machine",
                        "endTime": "2024-06-10T07:00:34.238Z",
                        "startTime": "2024-06-10T06:59:41.529Z"
                    },
                    {
                        "description": "Background",
                        "startTime": "2024-06-10T07:02:57.956Z",
                        "endTime": "2024-06-10T07:02:59.606Z"
                    },
                    {
                        "description": "UserAction",
                        "startTime": "2024-06-10T07:03:32.876Z",
                        "endTime": "2024-06-10T07:08:25.539Z"
                    },
                    {
                        "endTime": "2024-06-10T06:58:58.512Z",
                        "description": "CallCacheReading",
                        "startTime": "2024-06-10T06:58:58.510Z"
                    },
                    {
                        "startTime": "2024-06-10T06:59:30.706Z",
                        "description": "waiting for quota",
                        "endTime": "2024-06-10T06:59:41.529Z"
                    },
                    {
                        "description": "Pulling \"gcr.io/google.com/cloudsdktool/cloud-sdk:276.0.0-slim\"",
                        "startTime": "2024-06-10T07:00:34.238Z",
                        "endTime": "2024-06-10T07:01:14.176Z"
                    },
                    {
                        "startTime": "2024-06-10T07:10:09.027Z",
                        "description": "UpdatingCallCache",
                        "endTime": "2024-06-10T07:10:09.365Z"
                    },
                    {
                        "description": "ContainerSetup",
                        "startTime": "2024-06-10T07:02:53.624Z",
                        "endTime": "2024-06-10T07:02:57.956Z"
                    },
                    {
                        "description": "Delocalization",
                        "startTime": "2024-06-10T07:08:25.539Z",
                        "endTime": "2024-06-10T07:09:20.956Z"
                    },
                    {
                        "endTime": "2024-06-10T06:58:53.502Z",
                        "description": "Pending",
                        "startTime": "2024-06-10T06:58:53.502Z"
                    },
                    {
                        "description": "Pulling \"encodedcc/atac-seq-pipeline@sha256:b29984294619e9c1a1a9814d6a37a375d51b05beba481302246698b4b903ee30\"",
                        "startTime": "2024-06-10T07:01:14.176Z",
                        "endTime": "2024-06-10T07:02:53.624Z"
                    },
                    {
                        "startTime": "2024-06-10T06:58:53.502Z",
                        "description": "RequestingExecutionToken",
                        "endTime": "2024-06-10T06:58:58.350Z"
                    },
                    {
                        "startTime": "2024-06-10T06:58:58.351Z",
                        "description": "PreparingJob",
                        "endTime": "2024-06-10T06:58:58.510Z"
                    },
                    {
                        "description": "Localization",
                        "startTime": "2024-06-10T07:02:59.606Z",
                        "endTime": "2024-06-10T07:03:32.876Z"
                    }
                ],
                "backendLogs": {
                    "log": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-call_peak_pr2/shard-0/call_peak_pr2-0.log"
                },
                "start": "2024-06-10T06:58:53.502Z"
            }
        ],
        "atac.spr": [
            {
                "preemptible": false,
                "executionStatus": "Done",
                "stdout": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-spr/shard-0/stdout",
                "backendStatus": "Success",
                "compressedDockerSize": 963996198,
                "commandLine": "set -e\npython3 $(which encode_task_spr.py) \\\n    /cromwell_root/neuro-variants/data/processed/domcke_2020/tagaligns/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.tagAlign.gz \\\n    --pseudoreplication-random-seed 0 \\\n    --paired-end",
                "shardIndex": 0,
                "jes": {
                    "endpointUrl": "https://lifesciences.googleapis.com/",
                    "machineType": "custom-1-6656",
                    "googleProject": "hai-gcp-genomic",
                    "monitoringScript": "gs://caper-data/scripts/resource_monitor/resource_monitor.sh",
                    "executionBucket": "gs://neuro-variants/data/processed/atac_pipeline_outputs/",
                    "zone": "us-central1-b",
                    "instanceName": "google-pipelines-worker-88ce9cf80906a39a80e5672b858a56ca"
                },
                "outputs": {
                    "ta_pr1": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-spr/shard-0/glob-478c0ad30d0d033ce59a75ef84dab32e/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pr1.tagAlign.gz",
                    "ta_pr2": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-spr/shard-0/glob-a7cc663e5a8a49cc3d9bc036f4370f1c/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.pr2.tagAlign.gz"
                },
                "runtimeAttributes": {
                    "preemptible": "0",
                    "failOnStderr": "false",
                    "bootDiskSizeGb": "10",
                    "disks": "local-disk 23 SSD",
                    "continueOnReturnCode": "0",
                    "docker": "encodedcc/atac-seq-pipeline:v1.10.0",
                    "maxRetries": "1",
                    "cpu": "1",
                    "cpuMin": "1",
                    "noAddress": "false",
                    "zones": "us-central1-b",
                    "memoryMin": "2 GB",
                    "memory": "6.4072769372724 GB"
                },
                "callCaching": {
                    "allowResultReuse": true,
                    "hit": false,
                    "result": "Cache Miss",
                    "hashes": {
                        "output count": "C81E728D9D4C2F636F067F89CC14862C",
                        "runtime attribute": {
                            "docker": "B1F36DD8C0A09090242A283D75E4277C",
                            "failOnStderr": "68934A3E9455FA72420237EB05902327",
                            "continueOnReturnCode": "CFCD208495D565EF66E7DFF9F98764DA"
                        },
                        "output expression": {
                            "File ta_pr2": "0251A947B16C8348441745FD01BF184B",
                            "File ta_pr1": "919B10E5D6DDA1C2C67A06AEE1236F8A"
                        },
                        "input count": "C9F0F895FB98AB9159F51FD0297E236D",
                        "backend name": "50F66ECBC45488EE5826941BFBC50411",
                        "command template": "11ECA02A896E7E806820836214A8A9D8",
                        "input": {
                            "Boolean paired_end": "B326B5062B2F0E69046810717534CB09",
                            "Float input_file_size_gb": "6BCF452ABBF4E62C086CE4EB45A2F6D1",
                            "Float disk_factor": "125DCAF4533B218D3C5DFE19E4AA8A35",
                            "Float mem_factor": "E83ACBFC1FA90DB7C5825218823298D3",
                            "Float mem_gb": "A6AE72B7AAC783A90CC1F51DD56F6139",
                            "File ta": "/AXxtQ==",
                            "Int pseudoreplication_random_seed": "CFCD208495D565EF66E7DFF9F98764DA",
                            "Int disk_gb": "37693CFC748049E45D87B8C7D8B9AACD"
                        }
                    },
                    "effectiveCallCachingMode": "ReadAndWriteCache"
                },
                "inputs": {
                    "ta": "gs://neuro-variants/data/processed/domcke_2020/tagaligns/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.tagAlign.gz",
                    "mem_factor": 13.5,
                    "input_file_size_gb": 0.1783168101683259,
                    "disk_factor": 18.0,
                    "disk_gb": 23,
                    "pseudoreplication_random_seed": 0,
                    "paired_end": true,
                    "mem_gb": 6.4072769372724
                },
                "backendLabels": {
                    "wdl-task-name": "spr",
                    "cromwell-workflow-id": "cromwell-647e4f46-7583-4700-ba4e-bf59c94b2872"
                },
                "returnCode": 0,
                "labels": {
                    "cromwell-workflow-id": "cromwell-647e4f46-7583-4700-ba4e-bf59c94b2872",
                    "wdl-task-name": "spr"
                },
                "jobId": "projects/886987709752/locations/us-central1/operations/16486109435003080755",
                "monitoringLog": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-spr/shard-0/monitoring.log",
                "backend": "gcp",
                "end": "2024-06-10T06:40:07.269Z",
                "dockerImageUsed": "encodedcc/atac-seq-pipeline@sha256:b29984294619e9c1a1a9814d6a37a375d51b05beba481302246698b4b903ee30",
                "stderr": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-spr/shard-0/stderr",
                "callRoot": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-spr/shard-0",
                "attempt": 1,
                "executionEvents": [
                    {
                        "startTime": "2024-06-10T06:32:47.623Z",
                        "description": "waiting for quota",
                        "endTime": "2024-06-10T06:32:58.575Z"
                    },
                    {
                        "startTime": "2024-06-10T06:40:06.301Z",
                        "description": "UpdatingJobStore",
                        "endTime": "2024-06-10T06:40:07.269Z"
                    },
                    {
                        "startTime": "2024-06-10T06:40:03.572Z",
                        "description": "UpdatingCallCache",
                        "endTime": "2024-06-10T06:40:06.301Z"
                    },
                    {
                        "startTime": "2024-06-10T06:32:28.507Z",
                        "description": "RunningJob",
                        "endTime": "2024-06-10T06:32:47.623Z"
                    },
                    {
                        "description": "Delocalization",
                        "startTime": "2024-06-10T06:38:40.798Z",
                        "endTime": "2024-06-10T06:39:10.249Z"
                    },
                    {
                        "endTime": "2024-06-10T06:40:03.572Z",
                        "startTime": "2024-06-10T06:39:10.249Z",
                        "description": "Complete in GCE / Cromwell Poll Interval"
                    },
                    {
                        "description": "Pulling \"encodedcc/atac-seq-pipeline@sha256:b29984294619e9c1a1a9814d6a37a375d51b05beba481302246698b4b903ee30\"",
                        "startTime": "2024-06-10T06:34:33.801Z",
                        "endTime": "2024-06-10T06:36:11.592Z"
                    },
                    {
                        "startTime": "2024-06-10T06:39:10.249Z",
                        "description": "Worker released",
                        "endTime": "2024-06-10T06:39:10.249Z"
                    },
                    {
                        "startTime": "2024-06-10T06:32:58.575Z",
                        "description": "Worker \"google-pipelines-worker-88ce9cf80906a39a80e5672b858a56ca\" assigned in \"us-central1-b\" on a \"custom-1-6656\" machine",
                        "endTime": "2024-06-10T06:33:51.144Z"
                    },
                    {
                        "description": "Localization",
                        "startTime": "2024-06-10T06:36:17.270Z",
                        "endTime": "2024-06-10T06:36:46.844Z"
                    },
                    {
                        "description": "Pulling \"gcr.io/google.com/cloudsdktool/cloud-sdk:276.0.0-slim\"",
                        "startTime": "2024-06-10T06:33:51.144Z",
                        "endTime": "2024-06-10T06:34:33.801Z"
                    },
                    {
                        "description": "Background",
                        "startTime": "2024-06-10T06:36:15.709Z",
                        "endTime": "2024-06-10T06:36:17.270Z"
                    },
                    {
                        "startTime": "2024-06-10T06:32:28.212Z",
                        "description": "RequestingExecutionToken",
                        "endTime": "2024-06-10T06:32:28.350Z"
                    },
                    {
                        "startTime": "2024-06-10T06:32:28.350Z",
                        "description": "PreparingJob",
                        "endTime": "2024-06-10T06:32:28.506Z"
                    },
                    {
                        "startTime": "2024-06-10T06:32:28.506Z",
                        "description": "CallCacheReading",
                        "endTime": "2024-06-10T06:32:28.507Z"
                    },
                    {
                        "description": "ContainerSetup",
                        "startTime": "2024-06-10T06:36:11.592Z",
                        "endTime": "2024-06-10T06:36:15.709Z"
                    },
                    {
                        "description": "Pending",
                        "startTime": "2024-06-10T06:32:28.211Z",
                        "endTime": "2024-06-10T06:32:28.212Z"
                    },
                    {
                        "endTime": "2024-06-10T06:32:28.350Z",
                        "description": "WaitingForValueStore",
                        "startTime": "2024-06-10T06:32:28.350Z"
                    },
                    {
                        "description": "UserAction",
                        "startTime": "2024-06-10T06:36:46.844Z",
                        "endTime": "2024-06-10T06:38:40.798Z"
                    }
                ],
                "backendLogs": {
                    "log": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-spr/shard-0/spr-0.log"
                },
                "start": "2024-06-10T06:32:28.211Z"
            }
        ]
    },
    "outputs": {
        "atac.qc_json_ref_match": false,
        "atac.qc_json": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-qc_report/glob-3440f922973abb7a616aaf203e0db08b/qc.json",
        "atac.report": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/call-qc_report/glob-eae855c82d0f7e2185388856e7b2cc7b/qc.html"
    },
    "workflowRoot": "gs://neuro-variants/data/processed/atac_pipeline_outputs/atac/647e4f46-7583-4700-ba4e-bf59c94b2872/",
    "actualWorkflowLanguage": "WDL",
    "id": "647e4f46-7583-4700-ba4e-bf59c94b2872",
    "inputs": {
        "blacklist": null,
        "fastqs_rep6_R1": [],
        "adapters_rep2_R1": [],
        "auto_detect_adapter": false,
        "jsd_disk_factor": 2.0,
        "xcor_mem_factor": 1.0,
        "atac.pool_ta.col": null,
        "tss": null,
        "peaks_pr2": [],
        "enh": null,
        "adapters_rep6_R2": [],
        "align_cpu": 6,
        "fastqs_rep4_R1": [],
        "align_time_hr": 48,
        "fastqs_rep2_R1": [],
        "ref_mito_fa": null,
        "adapters_rep10_R2": [],
        "ref_fa": null,
        "cap_num_peak": 300000,
        "enable_fraglen_stat": true,
        "gc_bias_picard_java_heap": null,
        "reg2map": null,
        "atac.pool_blacklist.prefix": null,
        "multimapping": 4,
        "jsd_time_hr": 12,
        "fastqs_rep5_R2": [],
        "fastqs_rep7_R2": [],
        "description": "No description",
        "enable_tss_enrich": true,
        "adapters_rep2_R2": [],
        "pipeline_type": "atac",
        "enable_gc_bias": true,
        "bam2ta_time_hr": 12,
        "no_dup_removal": false,
        "filter_cpu": 4,
        "preseq_disk_factor": 5.0,
        "adapters_rep5_R1": [],
        "roadmap_meta": null,
        "call_peak_cpu": 2,
        "fastqs_rep9_R2": [],
        "fastqs_rep8_R2": [],
        "adapters_rep3_R2": [],
        "adapters_rep10_R1": [],
        "tas": [
            "gs://neuro-variants/data/processed/domcke_2020/tagaligns/domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells.tagAlign.gz"
        ],
        "atac.qc_report.qc_json_ref": null,
        "adapters_rep8_R2": [],
        "mito_chr_name": null,
        "adapter": null,
        "call_peak_mem_factor": 4.0,
        "adapters_rep8_R1": [],
        "pval_thresh": 0.01,
        "chrsz": null,
        "peak_ppr2": null,
        "fastqs_rep6_R2": [],
        "bowtie2_idx_tar": null,
        "atac.pool_ta_pr1.col": null,
        "jsd_mem_factor": 0.1,
        "true_rep_only": false,
        "bam2ta_cpu": 2,
        "idr_thresh": 0.05,
        "fastqs_rep3_R2": [],
        "peaks_pr1": [],
        "xcor_subsample_reads": 25000000,
        "jsd_cpu": 4,
        "fraglen_stat_picard_java_heap": null,
        "fastqs_rep5_R1": [],
        "adapters_rep9_R2": [],
        "atac.preseq.null": null,
        "spr_mem_factor": 13.5,
        "atac.read_genome_tsv.null_s": null,
        "mapq_thresh": 30,
        "genome_tsv": "gs://neuro-variants/data/pipeline_genome_data/hg19/hg19.tsv",
        "fastqs_rep4_R2": [],
        "filter_disk_factor": 8.0,
        "subsample_reads": 0,
        "peak_ppr1": null,
        "genome_name": null,
        "adapters_rep5_R2": [],
        "fastqs_rep8_R1": [],
        "enable_jsd": true,
        "call_peak_disk_factor": 30.0,
        "macs2_signal_track_disk_factor": 80.0,
        "fastqs_rep10_R2": [],
        "bam2ta_mem_factor": 0.3,
        "adapters_rep3_R1": [],
        "filter_time_hr": 24,
        "align_disk_factor": 8.0,
        "xcor_time_hr": 6,
        "atac.pool_ta_pr2.col": null,
        "fastqs_rep9_R1": [],
        "adapters_rep4_R2": [],
        "reg2map_bed": null,
        "gensz": null,
        "macs2_signal_track_time_hr": 24,
        "adapters_rep1_R1": [],
        "fastqs_rep2_R2": [],
        "fastqs_rep3_R1": [],
        "fastqs_rep1_R1": [],
        "bowtie2_mito_idx_tar": null,
        "enable_count_signal_track": false,
        "call_peak_time_hr": 24,
        "enable_idr": true,
        "bam2ta_disk_factor": 4.0,
        "read_len": [],
        "regex_bfilt_peak_chr_name": null,
        "filter_picard_java_heap": null,
        "enable_compare_to_roadmap": false,
        "filter_mem_factor": 0.4,
        "nodup_bams": [],
        "cutadapt_param": "-e 0.1 -m 5",
        "pseudoreplication_random_seed": 0,
        "blacklist2": null,
        "adapters_rep7_R1": [],
        "paired_end": true,
        "adapters_rep9_R1": [],
        "xcor_disk_factor": 4.5,
        "dup_marker": "picard",
        "prom": null,
        "peaks": [],
        "preseq_mem_factor": 0.5,
        "adapters_rep6_R1": [],
        "title": "domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells",
        "adapters_rep1_R2": [],
        "align_mem_factor": 0.15,
        "fastqs_rep10_R1": [],
        "macs2_signal_track_mem_factor": 12.0,
        "fastqs_rep1_R2": [],
        "adapters_rep7_R2": [],
        "smooth_win": 150,
        "enable_annot_enrich": true,
        "enable_preseq": false,
        "enable_xcor": false,
        "adapters_rep4_R1": [],
        "spr_disk_factor": 18.0,
        "filter_chrs": [
            "chrM",
            "MT"
        ],
        "peak_pooled": null,
        "xcor_cpu": 2,
        "preseq_picard_java_heap": null,
        "align_only": false,
        "dnase": null,
        "paired_ends": [],
        "fastqs_rep7_R1": [],
        "bams": []
    },
    "labels": {
        "caper-user": "soumyak",
        "cromwell-workflow-id": "cromwell-647e4f46-7583-4700-ba4e-bf59c94b2872",
        "caper-str-label": "domcke_2020.fetal_brain.SKOR2_NPSR1_positive_cells",
        "caper-backend": "gcp"
    },
    "submission": "2024-06-10T06:31:52.901Z",
    "status": "Succeeded",
    "end": "2024-06-10T07:47:26.863Z",
    "start": "2024-06-10T06:32:04.100Z"
}
